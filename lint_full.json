[{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\app\\[locale]\\brand-monitor\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Sparkles' is defined but never used.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'session' is defined but never used.","line":18,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[917,920],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[917,920],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'locale' is assigned a value but never used.","line":21,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isLoading' is assigned a value but never used.","line":23,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_index' is defined but never used.","line":38,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_array' is defined but never used.","line":39,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":11},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3329,3332],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3329,3332],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { BrandMonitor } from '@/components/brand-monitor/brand-monitor';\r\nimport { useEffect, useState } from 'react';\r\nimport type { ReactElement } from 'react';\r\nimport { useRouter, useParams } from 'next/navigation';\r\nimport { useTranslations } from 'next-intl';\r\nimport { Sparkles, Menu, X, Plus, Trash2, Loader2 } from 'lucide-react';\r\nimport { useCustomer, useRefreshCustomer } from '@/hooks/useAutumnCustomer';\r\nimport { useBrandAnalyses, useBrandAnalysis, useDeleteBrandAnalysis } from '@/hooks/useBrandAnalyses';\r\nimport { Button } from '@/components/ui/button';\r\nimport type { BrandAnalysisWithSources } from '@/lib/db/schema';\r\nimport { format } from 'date-fns';\r\nimport { useSession } from '@/lib/auth-client';\r\nimport { ConfirmationDialog } from '@/components/ui/confirmation-dialog';\r\n\r\n// Separate component that uses Autumn hooks\r\nfunction BrandMonitorContent({ session }: { session: any }) {\r\n  const router = useRouter();\r\n  const params = useParams();\r\n  const locale = params.locale as string;\r\n  const t = useTranslations();\r\n  const { customer, isLoading, error } = useCustomer();\r\n  const refreshCustomer = useRefreshCustomer();\r\n  const [sidebarOpen, setSidebarOpen] = useState(true);\r\n  const [selectedAnalysisId, setSelectedAnalysisId] = useState<string | null>(null);\r\n  const [resetCount, setResetCount] = useState(0);\r\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\r\n  const [analysisToDelete, setAnalysisToDelete] = useState<string | null>(null);\r\n  \r\n  // Queries and mutations\r\n  const { data: analyses, isLoading: analysesLoading } = useBrandAnalyses();\r\n  const { data: currentAnalysis } = useBrandAnalysis(selectedAnalysisId);\r\n  const deleteAnalysis = useDeleteBrandAnalysis();\r\n  const analysesList: BrandAnalysisWithSources[] = analyses ?? [];\r\n  const renderAnalysisItem = (\r\n    item: BrandAnalysisWithSources,\r\n    _index?: number,\r\n    _array?: BrandAnalysisWithSources[]\r\n  ): ReactElement => {\r\n    return (\r\n      <div\r\n        key={item.id}\r\n        className={`p-3 rounded-lg cursor-pointer hover:bg-gray-100 ${\r\n          selectedAnalysisId === item.id ? 'bg-gray-100' : ''\r\n        }`}\r\n        onClick={() => setSelectedAnalysisId(item.id)}\r\n      >\r\n        <div className=\"flex justify-between items-start\">\r\n          <div className=\"flex-1 min-w-0\">\r\n            <p className=\"font-medium truncate\">\r\n              {item.companyName || t('brandMonitor.untitledAnalysis')}\r\n            </p>\r\n            <p className=\"text-sm text-gray-500 truncate\">\r\n              {item.url}\r\n            </p>\r\n            <p className=\"text-xs text-gray-400\">\r\n              {item.createdAt && format(new Date(item.createdAt), 'MMM d, yyyy')}\r\n            </p>\r\n          </div>\r\n          <Button\r\n            size=\"sm\"\r\n            variant=\"ghost\"\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              handleDeleteAnalysis(item.id);\r\n            }}\r\n          >\r\n            <Trash2 className=\"w-4 h-4\" />\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  // Get credits from customer data\r\n  const messageUsage = customer?.features?.credits;\r\n  const credits = messageUsage ? (messageUsage.balance || 0) : 0;\r\n\r\n  // Determine active plan name/id\r\n  const activeProduct = customer?.products?.find((p: any) => \r\n    p?.status === 'active' || p?.status === 'trialing' || p?.status === 'past_due'\r\n  );\r\n  // DEV-only plan override via footer select\r\n  const [devPlanOverride, setDevPlanOverride] = useState<string | null>(null);\r\n  useEffect(() => {\r\n    if (process.env.NODE_ENV !== 'development') return;\r\n    const read = () => {\r\n      try {\r\n        const v = localStorage.getItem('devPlanOverride');\r\n        setDevPlanOverride(v);\r\n      } catch {}\r\n    };\r\n    read();\r\n    const handler = () => read();\r\n    window.addEventListener('dev-plan-override-changed', handler);\r\n    return () => window.removeEventListener('dev-plan-override-changed', handler);\r\n  }, []);\r\n\r\n  const effectivePlanName: string = ((devPlanOverride && process.env.NODE_ENV === 'development')\r\n    ? devPlanOverride\r\n    : (activeProduct?.name || activeProduct?.id || '')) as string;\r\n  const activePlanName: string = effectivePlanName;\r\n  const isStartPlan = activePlanName.toLowerCase().includes('start') || activePlanName.toLowerCase().includes('free');\r\n\r\n  useEffect(() => {\r\n    // If there's an auth error, redirect to login\r\n    if (error?.code === 'UNAUTHORIZED' || error?.code === 'AUTH_ERROR') {\r\n      router.push('/login');\r\n    }\r\n  }, [error, router]);\r\n\r\n  const handleCreditsUpdate = async () => {\r\n    // Use the global refresh to update customer data everywhere\r\n    await refreshCustomer();\r\n  };\r\n  \r\n  const handleDeleteAnalysis = async (analysisId: string) => {\r\n    setAnalysisToDelete(analysisId);\r\n    setDeleteDialogOpen(true);\r\n  };\r\n\r\n  const confirmDelete = async () => {\r\n    if (analysisToDelete) {\r\n      await deleteAnalysis.mutateAsync(analysisToDelete);\r\n      if (selectedAnalysisId === analysisToDelete) {\r\n        setSelectedAnalysisId(null);\r\n      }\r\n      setAnalysisToDelete(null);\r\n    }\r\n  };\r\n  \r\n  const handleNewAnalysis = () => {\r\n    logger.info('🆕 [BrandMonitorPage] New Analysis button clicked');\r\n    setSelectedAnalysisId(null);\r\n    setResetCount((c) => c + 1);\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50\">\r\n      <div className=\"flex h-[calc(100vh-4rem)] relative\">\r\n        {/* Sidebar Toggle Button - Always visible */}\r\n        <button\r\n          onClick={() => setSidebarOpen(!sidebarOpen)}\r\n          className={`absolute top-2 z-10 p-2 bg-white rounded-lg shadow-md hover:shadow-lg transition-all duration-200 border border-gray-200 ${\r\n            sidebarOpen ? 'left-[324px]' : 'left-4'\r\n          }`}\r\n          aria-label=\"Toggle sidebar\"\r\n        >\r\n          {sidebarOpen ? (\r\n            <X className=\"h-5 w-5 text-gray-600\" />\r\n          ) : (\r\n            <Menu className=\"h-5 w-5 text-gray-600\" />\r\n          )}\r\n        </button>\r\n\r\n        {/* Sidebar */}\r\n        <div className={`${sidebarOpen ? 'w-80' : 'w-0'} bg-white border-r overflow-hidden flex flex-col transition-all duration-200`}>\r\n          <div className=\"p-4 border-b\">\r\n            <Button\r\n              onClick={handleNewAnalysis}\r\n              className=\"w-full btn-firecrawl-orange\"\r\n            >\r\n              <Plus className=\"w-4 h-4 mr-2\" />\r\n              {t('brandMonitor.newAnalysis')}\r\n            </Button>\r\n          </div>\r\n          \r\n          <div className=\"overflow-y-auto flex-1\">\r\n            {analysesLoading ? (\r\n              <div className=\"p-4 text-center text-gray-500\">{t('brandMonitor.loadingAnalyses')}</div>\r\n            ) : analysesList.length === 0 ? (\r\n              <div className=\"p-4 text-center text-gray-500\">{t('brandMonitor.noAnalysesYet')}</div>\r\n            ) : (\r\n              <div className=\"space-y-1 p-2\">\r\n                {analysesList.map(renderAnalysisItem)}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Main Content */}\r\n        <div className=\"flex-1 overflow-y-auto\">\r\n          <div className=\"px-6 sm:px-8 lg:px-12 py-8\">\r\n            <BrandMonitor \r\n              key={`brand-monitor-${resetCount}`}\r\n              creditsAvailable={credits} \r\n              onCreditsUpdate={handleCreditsUpdate}\r\n              selectedAnalysis={selectedAnalysisId ? currentAnalysis : null}\r\n              onSaveAnalysis={() => {\r\n                // This will be called when analysis completes\r\n                // We'll implement this in the next step\r\n              }}\r\n              // UI gating by plan\r\n              hideSourcesTab={isStartPlan}\r\n              hideWebSearchSources={isStartPlan}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <ConfirmationDialog\r\n        open={deleteDialogOpen}\r\n        onOpenChange={setDeleteDialogOpen}\r\n        title={t('brandMonitor.deleteAnalysis')}\r\n        description={t('brandMonitor.deleteAnalysisDesc')}\r\n        confirmText={t('common.delete')}\r\n        cancelText={t('common.cancel')}\r\n        onConfirm={confirmDelete}\r\n        isLoading={deleteAnalysis.isPending}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nimport { logger } from '@/lib/logger';\r\n\r\nexport default function BrandMonitorPage() {\r\n  const { data: session, isPending } = useSession();\r\n  const t = useTranslations();\r\n  const [isClient, setIsClient] = useState(false);\r\n\r\n  // Prevent hydration mismatch by ensuring client-side rendering\r\n  useEffect(() => {\r\n    setIsClient(true);\r\n  }, []);\r\n\r\n  // Show loading state during hydration and session check\r\n  if (!isClient || isPending) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <Loader2 className=\"h-8 w-8 animate-spin text-gray-500\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!session) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <p className=\"text-gray-600\">{t('brandMonitor.pleaseLogIn')}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <BrandMonitorContent session={session} />;\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\app\\[locale]\\chat\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[760,763],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[760,763],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2690,2693],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2690,2693],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { useSession } from '@/lib/auth-client';\r\nimport { useRouter, useParams } from 'next/navigation';\r\nimport { useTranslations } from 'next-intl';\r\nimport { useCustomer } from '@/hooks/useAutumnCustomer';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Send, Menu, X, MessageSquare, Plus, Trash2 } from 'lucide-react';\r\nimport { useConversations, useConversation, useDeleteConversation } from '@/hooks/useConversations';\r\nimport { useSendMessage } from '@/hooks/useMessages';\r\nimport { format } from 'date-fns';\r\nimport { ConfirmationDialog } from '@/components/ui/confirmation-dialog';\r\n\r\n// Separate component that uses Autumn hooks\r\nfunction ChatContent({ session }: { session: any }) {\r\n  const router = useRouter();\r\n  const params = useParams();\r\n  const locale = params.locale as string;\r\n  const t = useTranslations();\r\n  const { allowed, customer, refetch } = useCustomer();\r\n  const [input, setInput] = useState('');\r\n  const [sidebarOpen, setSidebarOpen] = useState(true);\r\n  const [selectedConversationId, setSelectedConversationId] = useState<string | undefined>(undefined);\r\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\r\n  const [conversationToDelete, setConversationToDelete] = useState<string | undefined>(undefined);\r\n  \r\n  // Queries and mutations\r\n  const { data: conversations, isLoading: conversationsLoading } = useConversations();\r\n  const { data: currentConversation } = useConversation(selectedConversationId ?? null);\r\n  const sendMessage = useSendMessage();\r\n  const deleteConversation = useDeleteConversation();\r\n  \r\n  // Get message usage data\r\n  const messageUsage = customer?.features?.messages;\r\n  const remainingMessages = messageUsage ? (messageUsage.balance || 0) : 0;\r\n  const hasMessages = remainingMessages > 0;\r\n  const isCustomerLoading = !customer && !session; // Still loading customer data\r\n\r\n  // Removed auto-scroll functionality\r\n\r\n  const handleSendMessage = async () => {\r\n    if (!input.trim() || sendMessage.isPending) return;\r\n\r\n    // Check if user has messages available\r\n    if (!allowed({ featureId: 'messages' })) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await sendMessage.mutateAsync({\r\n        conversationId: selectedConversationId,\r\n        message: input,\r\n      });\r\n      \r\n      setInput('');\r\n      \r\n      // If this created a new conversation, select it\r\n      if (!selectedConversationId && response.conversationId) {\r\n        setSelectedConversationId(response.conversationId);\r\n      }\r\n      \r\n      // Refetch customer data to update credits in navbar\r\n      await refetch();\r\n    } catch (error: any) {\r\n      console.error('Failed to send message:', error);\r\n    }\r\n  };\r\n  \r\n  const handleNewConversation = () => {\r\n    setSelectedConversationId(undefined);\r\n  };\r\n  \r\n  const handleDeleteConversation = async (conversationId: string) => {\r\n    setConversationToDelete(conversationId);\r\n    setDeleteDialogOpen(true);\r\n  };\r\n\r\n  const confirmDelete = async () => {\r\n    if (conversationToDelete) {\r\n      await deleteConversation.mutateAsync(conversationToDelete);\r\n      if (selectedConversationId === conversationToDelete) {\r\n        setSelectedConversationId(undefined);\r\n      }\r\n      setConversationToDelete(undefined);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex h-screen bg-gray-50\">\r\n      {/* Sidebar */}\r\n      <div className={`${sidebarOpen ? 'w-64' : 'w-0'} bg-white border-r overflow-hidden flex flex-col transition-all duration-200`}>\r\n        <div className=\"p-4 border-b\">\r\n          <Button\r\n            onClick={handleNewConversation}\r\n            className=\"w-full btn-firecrawl-orange\"\r\n          >\r\n            <Plus className=\"w-4 h-4 mr-2\" />\r\n            {t('chat.newChat')}\r\n          </Button>\r\n        </div>\r\n        \r\n        <div className=\"overflow-y-auto flex-1\">\r\n          {conversationsLoading ? (\r\n            <div className=\"p-4 text-center text-gray-500\">{t('chat.loadingConversations')}</div>\r\n          ) : conversations?.length === 0 ? (\r\n            <div className=\"p-4 text-center text-gray-500\">{t('chat.noConversations')}</div>\r\n          ) : (\r\n            <div className=\"space-y-1 p-2\">\r\n              {conversations?.map((conversation) => (\r\n                <div\r\n                  key={conversation.id}\r\n                  className={`p-3 rounded-lg cursor-pointer hover:bg-gray-100 ${\r\n                    selectedConversationId === conversation.id ? 'bg-gray-100' : ''\r\n                  }`}\r\n                  onClick={() => setSelectedConversationId(conversation.id)}\r\n                >\r\n                  <div className=\"flex justify-between items-start\">\r\n                    <div className=\"flex-1 min-w-0\">\r\n                      <p className=\"font-medium truncate\">\r\n                                                  {conversation.title || t('chat.untitledConversation')}\r\n                      </p>\r\n                      <p className=\"text-xs text-gray-500\">\r\n                        {conversation.lastMessageAt ? format(new Date(conversation.lastMessageAt as unknown as string | number), 'MMM d, h:mm a') : ''}\r\n                      </p>\r\n                    </div>\r\n                    <Button\r\n                      size=\"sm\"\r\n                      variant=\"ghost\"\r\n                      onClick={(e) => {\r\n                        e.stopPropagation();\r\n                        handleDeleteConversation(conversation.id);\r\n                      }}\r\n                    >\r\n                      <Trash2 className=\"w-4 h-4\" />\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n        \r\n        <div className=\"p-4 border-t bg-gray-50\">\r\n          <div className=\"text-sm text-gray-600\">\r\n            <p>{t('chat.messagesRemaining')}</p>\r\n            <p className=\"text-2xl font-bold text-orange-600\">{remainingMessages}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Main Chat Area */}\r\n      <div className=\"flex-1 flex flex-col\">\r\n        {/* Header */}\r\n        <div className=\"bg-white border-b px-4 py-3 flex items-center justify-between\">\r\n          <div className=\"flex items-center gap-3\">\r\n            <Button\r\n              variant=\"ghost\"\r\n              size=\"sm\"\r\n              onClick={() => setSidebarOpen(!sidebarOpen)}\r\n            >\r\n              {sidebarOpen ? <X className=\"w-5 h-5\" /> : <Menu className=\"w-5 h-5\" />}\r\n            </Button>\r\n            <h1 className=\"font-semibold\">\r\n              {currentConversation?.title || t('chat.newConversation')}\r\n            </h1>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Messages Area */}\r\n        <div className=\"flex-1 overflow-y-auto p-4\">\r\n          {isCustomerLoading ? (\r\n            <div className=\"flex items-center justify-center h-full\">\r\n              <div className=\"text-center\">\r\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mx-auto mb-4\"></div>\r\n                <p className=\"text-gray-600\">{t('chat.loadingAccountData')}</p>\r\n              </div>\r\n            </div>\r\n          ) : !hasMessages ? (\r\n            <div className=\"flex items-center justify-center h-full\">\r\n              <div className=\"text-center max-w-md\">\r\n                <MessageSquare className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\r\n                <h2 className=\"text-xl font-semibold mb-2\">{t('chat.creditBasedMessaging')}</h2>\r\n                <p className=\"text-gray-600 mb-4\">\r\n                  {t('chat.creditBasedDesc')}\r\n                </p>\r\n                <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-4 mb-4\">\r\n                  <p className=\"text-sm text-orange-800\">\r\n                    {t('chat.youCurrentlyHave')} <span className=\"font-bold\">{remainingMessages}</span> {t('chat.messageCreditsAvailable')}\r\n                  </p>\r\n                </div>\r\n                <Button\r\n                  onClick={() => router.push(`/${locale}/plans`)}\r\n                  className=\"btn-firecrawl-orange\"\r\n                >\r\n                  {t('chat.getMoreCredits')}\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          ) : currentConversation?.messages && currentConversation.messages.length > 0 ? (\r\n            <div className=\"space-y-4 mb-20\">\r\n              {currentConversation.messages.map((message) => (\r\n                <div\r\n                  key={message.id}\r\n                  className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}\r\n                >\r\n                  <div\r\n                    className={`max-w-[70%] rounded-lg px-4 py-2 ${\r\n                      message.role === 'user'\r\n                        ? 'bg-orange-500 text-white'\r\n                        : 'bg-gray-100 text-gray-900'\r\n                    }`}\r\n                  >\r\n                    <p className=\"whitespace-pre-wrap\">{message.content}</p>\r\n                    <p className={`text-xs mt-1 ${\r\n                      message.role === 'user' ? 'text-orange-100' : 'text-gray-500'\r\n                    }`}>\r\n                      {message.createdAt ? format(new Date(message.createdAt as unknown as string | number), 'h:mm a') : ''}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n              {sendMessage.isPending && (\r\n                <div className=\"flex justify-start\">\r\n                  <div className=\"bg-gray-100 text-gray-900 rounded-lg px-4 py-2\">\r\n                    <div className=\"flex space-x-1\">\r\n                      <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" />\r\n                      <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }} />\r\n                      <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }} />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <div className=\"flex items-center justify-center h-full\">\r\n              <div className=\"text-center\">\r\n                <MessageSquare className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\r\n                <h2 className=\"text-xl font-semibold mb-2\">{t('chat.startConversation')}</h2>\r\n                <p className=\"text-gray-600\">\r\n                  {t('chat.sendMessageToBegin')}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Input Area */}\r\n        <div className=\"border-t bg-white p-4\">\r\n          <form\r\n            onSubmit={(e) => {\r\n              e.preventDefault();\r\n              handleSendMessage();\r\n            }}\r\n            className=\"flex gap-2\"\r\n          >\r\n            <input\r\n              type=\"text\"\r\n              value={input}\r\n              onChange={(e) => setInput(e.target.value)}\r\n              placeholder={hasMessages ? t('chat.typeMessage') : t('chat.noMessagesAvailable')}\r\n              disabled={!hasMessages || sendMessage.isPending}\r\n              className=\"flex-1 px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 disabled:bg-gray-100 disabled:text-gray-500\"\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              disabled={!hasMessages || !input.trim() || sendMessage.isPending}\r\n              className=\"btn-firecrawl-orange\"\r\n            >\r\n              <Send className=\"w-4 h-4\" />\r\n            </Button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n      \r\n      <ConfirmationDialog\r\n        open={deleteDialogOpen}\r\n        onOpenChange={setDeleteDialogOpen}\r\n        title={t('chat.deleteConversation')}\r\n        description={t('chat.deleteConversationDesc')}\r\n        confirmText={t('chat.delete')}\r\n        cancelText={t('common.cancel')}\r\n        onConfirm={confirmDelete}\r\n        isLoading={deleteConversation.isPending}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function ChatPage() {\r\n  const { data: session, isPending } = useSession();\r\n  const router = useRouter();\r\n\r\n  useEffect(() => {\r\n    if (!isPending && !session) {\r\n      router.push('/login');\r\n    }\r\n  }, [session, isPending, router]);\r\n\r\n  if (isPending || !session) {\r\n    return (\r\n      <div className=\"flex h-screen items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mx-auto mb-4\"></div>\r\n          <p className=\"text-gray-600\">Loading...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <ChatContent session={session} />;\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\app\\[locale]\\dashboard\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AlertCircle' is defined but never used.","line":9,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[759,762],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[759,762],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'locale' is assigned a value but never used.","line":21,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":213,"column":87,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":213,"endColumn":90,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8238,8241],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8238,8241],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":214,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":214,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8313,8316],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8313,8316],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":228,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":228,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9004,9007],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9004,9007],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":230,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":230,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9107,9110],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9107,9110],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useCustomer } from '@/hooks/useAutumnCustomer';\r\nimport { usePricingTable } from 'autumn-js/react';\r\nimport { useSession } from '@/lib/auth-client';\r\nimport { useRouter, useParams } from 'next/navigation';\r\nimport { useEffect, useState } from 'react';\r\nimport { useTranslations } from 'next-intl';\r\nimport { Lock, CheckCircle, AlertCircle, Loader2, User, Mail, Phone, Edit2, Save, X } from 'lucide-react';\r\nimport { Button } from '@/components/ui/button';\r\nimport ProductChangeDialog from '@/components/autumn/product-change-dialog';\r\nimport { useProfile, useUpdateProfile, useSettings, useUpdateSettings } from '@/hooks/useProfile';\r\n\r\n// Separate component that uses Autumn hooks\r\nfunction DashboardContent({ session }: { session: any }) {\r\n  const { customer, attach } = useCustomer();\r\n  const { products } = usePricingTable();\r\n  const [loadingProductId, setLoadingProductId] = useState<string | null>(null);\r\n  const t = useTranslations();\r\n  const params = useParams();\r\n  const locale = params.locale as string;\r\n  \r\n  // Profile and settings hooks\r\n  const { data: profileData } = useProfile();\r\n  const updateProfile = useUpdateProfile();\r\n  const { data: settings } = useSettings();\r\n  const updateSettings = useUpdateSettings();\r\n  \r\n  // Profile edit state\r\n  const [isEditingProfile, setIsEditingProfile] = useState(false);\r\n  const [profileForm, setProfileForm] = useState({\r\n    displayName: '',\r\n    bio: '',\r\n    phone: '',\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (profileData?.profile) {\r\n      setProfileForm({\r\n        displayName: profileData.profile.displayName || '',\r\n        bio: profileData.profile.bio || '',\r\n        phone: profileData.profile.phone || '',\r\n      });\r\n    }\r\n  }, [profileData]);\r\n\r\n  const handleSaveProfile = async () => {\r\n    await updateProfile.mutateAsync(profileForm);\r\n    setIsEditingProfile(false);\r\n  };\r\n\r\n  const handleCancelEdit = () => {\r\n    setIsEditingProfile(false);\r\n    if (profileData?.profile) {\r\n      setProfileForm({\r\n        displayName: profileData.profile.displayName || '',\r\n        bio: profileData.profile.bio || '',\r\n        phone: profileData.profile.phone || '',\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSettingToggle = async (key: string, value: boolean) => {\r\n    await updateSettings.mutateAsync({ [key]: value });\r\n  };\r\n\r\n  // Get current user's products and features\r\n  const userProducts = customer?.products || [];\r\n  const userFeatures = customer?.features || {};\r\n  \r\n  // Find the actual active product (not scheduled)\r\n  const activeProduct = userProducts.find(p => \r\n    p.status === 'active' || p.status === 'trialing' || p.status === 'past_due'\r\n  );\r\n  const scheduledProduct = userProducts.find(p => \r\n    p.status === 'scheduled' || (p.started_at && new Date(p.started_at) > new Date())\r\n  );\r\n\r\n  const handleUpgrade = async (productId: string) => {\r\n    try {\r\n      setLoadingProductId(productId);\r\n      await attach({\r\n        productId,\r\n        dialog: ProductChangeDialog,\r\n      });\r\n    } finally {\r\n      setLoadingProductId(null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 py-12\">\r\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n        <h1 className=\"text-3xl font-bold mb-8\">{t('dashboard.title')}</h1>\r\n\r\n        {/* Profile Section */}\r\n        <div className=\"bg-white rounded-lg shadow p-6 mb-8\">\r\n          <div className=\"flex justify-between items-center mb-4\">\r\n            <h2 className=\"text-xl font-semibold\">{t('dashboard.profileInformation')}</h2>\r\n            {!isEditingProfile ? (\r\n              <Button\r\n                onClick={() => setIsEditingProfile(true)}\r\n                size=\"sm\"\r\n                className=\"bg-black text-white hover:bg-gray-800\"\r\n              >\r\n                <Edit2 className=\"h-4 w-4 mr-2\" />\r\n                {t('dashboard.editProfile')}\r\n              </Button>\r\n            ) : (\r\n              <div className=\"flex gap-2\">\r\n                <Button\r\n                  onClick={handleSaveProfile}\r\n                  size=\"sm\"\r\n                  variant=\"default\"\r\n                  disabled={updateProfile.isPending}\r\n                >\r\n                  <Save className=\"h-4 w-4 mr-2\" />\r\n                  {t('dashboard.save')}\r\n                </Button>\r\n                <Button\r\n                  onClick={handleCancelEdit}\r\n                  size=\"sm\"\r\n                  variant=\"outline\"\r\n                  disabled={updateProfile.isPending}\r\n                >\r\n                  <X className=\"h-4 w-4 mr-2\" />\r\n                  {t('dashboard.cancel')}\r\n                </Button>\r\n              </div>\r\n            )}\r\n          </div>\r\n          \r\n          <div className=\"grid md:grid-cols-2 gap-6\">\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                <Mail className=\"inline-block h-4 w-4 mr-1\" />\r\n                {t('dashboard.email')}\r\n              </label>\r\n              <p className=\"text-gray-900\">{session.user?.email}</p>\r\n            </div>\r\n            \r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                <User className=\"inline-block h-4 w-4 mr-1\" />\r\n                {t('dashboard.displayName')}\r\n              </label>\r\n              {isEditingProfile ? (\r\n                <input\r\n                  type=\"text\"\r\n                  value={profileForm.displayName}\r\n                  onChange={(e) => setProfileForm({ ...profileForm, displayName: e.target.value })}\r\n                  className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                  placeholder={t('dashboard.enterDisplayName')}\r\n                />\r\n              ) : (\r\n                <p className=\"text-gray-900\">\r\n                  {profileData?.profile?.displayName || t('dashboard.notSet')}\r\n                </p>\r\n              )}\r\n            </div>\r\n            \r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                <Phone className=\"inline-block h-4 w-4 mr-1\" />\r\n                {t('dashboard.phone')}\r\n              </label>\r\n              {isEditingProfile ? (\r\n                <input\r\n                  type=\"tel\"\r\n                  value={profileForm.phone}\r\n                  onChange={(e) => setProfileForm({ ...profileForm, phone: e.target.value })}\r\n                  className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                  placeholder={t('dashboard.enterPhone')}\r\n                />\r\n              ) : (\r\n                <p className=\"text-gray-900\">\r\n                  {profileData?.profile?.phone || t('dashboard.notSet')}\r\n                </p>\r\n              )}\r\n            </div>\r\n            \r\n            <div className=\"md:col-span-2\">\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                {t('dashboard.bio')}\r\n              </label>\r\n              {isEditingProfile ? (\r\n                <textarea\r\n                  value={profileForm.bio}\r\n                  onChange={(e) => setProfileForm({ ...profileForm, bio: e.target.value })}\r\n                  className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                  rows={3}\r\n                  placeholder={t('dashboard.tellAboutYourself')}\r\n                />\r\n              ) : (\r\n                <p className=\"text-gray-900\">\r\n                  {profileData?.profile?.bio || t('dashboard.notSet')}\r\n                </p>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Available Plans */}\r\n        <div className=\"bg-white rounded-lg shadow p-6 mb-8\">\r\n          <h2 className=\"text-xl font-semibold mb-4\">{t('dashboard.availablePlans')}</h2>\r\n          {!products ? (\r\n            <div className=\"flex justify-center py-8\">\r\n              <Loader2 className=\"h-6 w-6 animate-spin text-gray-400\" />\r\n            </div>\r\n          ) : (\r\n            <div className=\"space-y-4\">\r\n              {(() => {\r\n                const findProductDetails = (id?: string) => (products || []).find((p: any) => p.id === id);\r\n                const parseCreditsFromDisplay = (p: any): number => {\r\n                  const items = p?.items || [];\r\n                  for (const it of items) {\r\n                    const text: string | undefined = it?.display?.primary_text;\r\n                    if (!text) continue;\r\n                    const match = text.match(/([0-9][0-9\\s,\\.]*)\\s*credits?/i);\r\n                    if (match && match[1]) {\r\n                      const normalized = match[1].replace(/[\\s,]/g, '');\r\n                      const num = Number(normalized);\r\n                      if (!Number.isNaN(num)) return num;\r\n                    }\r\n                  }\r\n                  return 0;\r\n                };\r\n                const getIncludedCredits = (p: any) => {\r\n                  if (!p) return 0;\r\n                  const unitItem = p?.items?.find((it: any) => it.type === 'unit' && it.unit?.quantity !== undefined);\r\n                  if (unitItem?.unit?.quantity !== undefined && unitItem.unit.quantity !== null) {\r\n                    return unitItem.unit.quantity as number;\r\n                  }\r\n                  return parseCreditsFromDisplay(p);\r\n                };\r\n                const activeProductDetails = findProductDetails(activeProduct?.id);\r\n                const activeCredits = activeProductDetails ? getIncludedCredits(activeProductDetails) : 0;\r\n\r\n                return products\r\n                  .filter((product) => product.id !== 'free' && product.id !== '50')\r\n                  .map((product) => {\r\n                const isCurrentPlan = activeProduct?.id === product.id;\r\n                const isScheduledPlan = scheduledProduct?.id === product.id;\r\n                const features = product.properties?.is_free ? product.items : product.items?.slice(1) || [];\r\n\r\n                  const productCredits = getIncludedCredits(product);\r\n                  const isLowerTierThanActive = !!activeProduct && productCredits < activeCredits;\r\n                  const isFreePlan = product.properties?.is_free || product.id === 'free';\r\n\r\n                  return (\r\n                  <div key={product.id} className=\"border rounded-lg p-4\">\r\n                    <div className=\"flex justify-between items-start\">\r\n                      <div className=\"flex-1\">\r\n                        <h3 className=\"font-medium text-lg\">\r\n                          {product.display?.name || product.name}\r\n                          {isCurrentPlan && (\r\n                            <span className=\"ml-2 text-sm text-green-600\">{t('dashboard.currentPlanLabel')}</span>\r\n                          )}\r\n                          {isScheduledPlan && (\r\n                            <span className=\"ml-2 text-sm text-orange-600\">{t('dashboard.scheduledLabel')}</span>\r\n                          )}\r\n                        </h3>\r\n                        {product.display?.description && (\r\n                          <p className=\"text-sm text-gray-600 mt-1\">{product.display.description}</p>\r\n                        )}\r\n                        <ul className=\"mt-3 space-y-1\">\r\n                          {features.slice(0, 3).map((item, index) => (\r\n                            <li key={index} className=\"flex items-start text-sm\">\r\n                              {isCurrentPlan ? (\r\n                                <CheckCircle className=\"h-4 w-4 text-green-500 mr-2 flex-shrink-0 mt-0.5\" />\r\n                              ) : (\r\n                                <Lock className=\"h-4 w-4 text-gray-400 mr-2 flex-shrink-0 mt-0.5\" />\r\n                              )}\r\n                              <span className={!isCurrentPlan ? 'text-gray-500' : ''}>\r\n                                {item.display?.primary_text}\r\n                              </span>\r\n                            </li>\r\n                          ))}\r\n                        </ul>\r\n                      </div>\r\n                      {!isCurrentPlan && !isScheduledPlan && !isFreePlan && (\r\n                        <Button \r\n                          onClick={() => handleUpgrade(product.id)} \r\n                          size=\"sm\"\r\n                          variant=\"outline\"\r\n                          disabled={loadingProductId !== null}\r\n                        >\r\n                          {loadingProductId === product.id ? (\r\n                            <>\r\n                              <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\r\n                              {t('dashboard.loading')}\r\n                            </>\r\n                          ) : (\r\n                            isLowerTierThanActive ? t('dashboard.downgrade') : t('dashboard.upgrade')\r\n                          )}\r\n                        </Button>\r\n                      )}\r\n                      {isScheduledPlan && (() => {\r\n                        const scheduledStart = scheduledProduct?.started_at || scheduledProduct?.current_period_end;\r\n                        if (!scheduledStart) return null;\r\n                        return (\r\n                          <span className=\"text-sm text-gray-500\">\r\n                            {t('dashboard.starts')} {new Date(scheduledStart).toLocaleDateString()}\r\n                          </span>\r\n                        );\r\n                      })()}\r\n                    </div>\r\n                  </div>\r\n                  );\r\n                });\r\n              })()}\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Usage Stats */}\r\n        <div className=\"bg-white rounded-lg shadow p-6 mb-8\">\r\n          <h2 className=\"text-xl font-semibold mb-4\">{t('dashboard.usageStatistics')}</h2>\r\n          {Object.keys(userFeatures).length > 0 ? (\r\n            <div className=\"space-y-4\">\r\n              {Object.entries(userFeatures).map(([featureId, feature]) => (\r\n                <div key={featureId}>\r\n                  <div className=\"mb-4\">\r\n                    <h3 className=\"font-medium mb-2 capitalize\">{featureId.replace(/_/g, ' ')}</h3>\r\n                    <div className=\"flex justify-between text-sm mb-1\">\r\n                      <span>{t('dashboard.used')}</span>\r\n                      <span>{(feature.usage || 0)} / {(feature.included_usage ?? ((feature.balance ?? 0) + (feature.usage || 0)))}</span>\r\n                    </div>\r\n                    <div className=\"w-full bg-gray-200 rounded-full h-2\">\r\n                      <div\r\n                        className=\"bg-orange-500 h-2 rounded-full transition-all\"\r\n                        style={{\r\n                          width: `${Math.min(((feature.usage || 0) / ((feature.included_usage ?? ((feature.balance ?? 0) + (feature.usage || 0))) || 1)) * 100, 100)}%`\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  {feature.next_reset_at ? (\r\n                    <p className=\"text-sm text-gray-600\">\r\n                      {t('dashboard.resetsOn')}: {new Date(feature.next_reset_at).toLocaleDateString()}\r\n                    </p>\r\n                  ) : null}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            <p className=\"text-gray-500\">{t('dashboard.noUsageData')}</p>\r\n          )}\r\n        </div>\r\n\r\n        {/* Settings Section */}\r\n        <div className=\"bg-white rounded-lg shadow p-6\">\r\n          <h2 className=\"text-xl font-semibold mb-4\">{t('dashboard.settings')}</h2>\r\n          <div className=\"space-y-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"font-medium\">{t('dashboard.emailNotifications')}</p>\r\n                <p className=\"text-sm text-gray-600\">{t('dashboard.emailNotificationsDesc')}</p>\r\n              </div>\r\n              <button\r\n                onClick={() => handleSettingToggle('emailNotifications', !settings?.emailNotifications)}\r\n                className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${\r\n                  settings?.emailNotifications ? 'bg-orange-500' : 'bg-gray-200'\r\n                }`}\r\n                disabled={updateSettings.isPending}\r\n              >\r\n                <span\r\n                  className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\r\n                    settings?.emailNotifications ? 'translate-x-6' : 'translate-x-1'\r\n                  }`}\r\n                />\r\n              </button>\r\n            </div>\r\n            \r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"font-medium\">{t('dashboard.marketingEmails')}</p>\r\n                <p className=\"text-sm text-gray-600\">{t('dashboard.marketingEmailsDesc')}</p>\r\n              </div>\r\n              <button\r\n                onClick={() => handleSettingToggle('marketingEmails', !settings?.marketingEmails)}\r\n                className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${\r\n                  settings?.marketingEmails ? 'bg-orange-500' : 'bg-gray-200'\r\n                }`}\r\n                disabled={updateSettings.isPending}\r\n              >\r\n                <span\r\n                  className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\r\n                    settings?.marketingEmails ? 'translate-x-6' : 'translate-x-1'\r\n                  }`}\r\n                />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function DashboardPage() {\r\n  const { data: session, isPending } = useSession();\r\n  const router = useRouter();\r\n  const t = useTranslations();\r\n  const params = useParams();\r\n  const locale = params.locale as string;\r\n\r\n  useEffect(() => {\r\n    if (!isPending && !session) {\r\n      router.push(`/${locale}/login`);\r\n    }\r\n  }, [session, isPending, router, locale]);\r\n\r\n  if (isPending || !session) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mx-auto mb-4\"></div>\r\n          <p className=\"text-gray-600\">{t('dashboard.loading')}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Only render DashboardContent when we have a session and AutumnProvider is available\r\n  return <DashboardContent session={session} />;\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\app\\[locale]\\docs\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1692,1695],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1692,1695],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2597,2600],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2597,2600],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'next/navigation';\nimport { marked } from 'marked';\n\nconst sectionsConfig = [\n  { id: 'introduction', fr: '/docs/introduction/fr.md', en: '/docs/introduction/en.md', label: { fr: 'Introduction', en: 'Introduction' } },\n  { id: 'features', fr: '/docs/key-features/fr.md', en: '/docs/key-features/en.md', label: { fr: 'Fonctionnalités clés', en: 'Key features' } },\n  { id: 'getting-started', fr: '/docs/getting-started/fr.md', en: '/docs/getting-started/en.md', label: { fr: 'Bien démarrer', en: 'Getting started' } },\n  { id: 'prompts', fr: '/docs/prompts/fr.md', en: '/docs/prompts/en.md', label: { fr: 'Prompts efficaces', en: 'Effective prompts' } },\n  { id: 'reading-results', fr: '/docs/reading-results/fr.md', en: '/docs/reading-results/en.md', label: { fr: 'Lire les résultats', en: 'Reading results' } },\n  { id: 'credits', fr: '/docs/credits/fr.md', en: '/docs/credits/en.md', label: { fr: 'Crédits', en: 'Credits' } },\n  { id: 'openai-web-search', fr: '/docs/openai-web-search/fr.md', en: '/docs/openai-web-search/en.md', label: { fr: 'OpenAI Web Search', en: 'OpenAI Web Search' } },\n];\n\nexport default function DocsPage() {\n  const routeParams = useParams<{ locale?: string }>();\n  const [active, setActive] = useState<string>('introduction');\n  const [htmlById, setHtmlById] = useState<Record<string, string>>({});\n  const [error, setError] = useState<string>(\"\");\n  const [locale, setLocale] = useState<'fr'|'en'>(routeParams?.locale === 'en' ? 'en' : 'fr');\n\n  useEffect(() => {\n    const l = window.location.pathname.split('/')[1] || 'fr';\n    setLocale((['fr','en'] as const).includes(l as any) ? (l as 'fr'|'en') : 'fr');\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n    async function loadAll() {\n      try {\n        const { default: DOMPurify } = await import('isomorphic-dompurify');\n        const entries = await Promise.all(\n          sectionsConfig.map(async (s) => {\n            const path = locale === 'fr' ? s.fr : s.en;\n            const res = await fetch(path, { cache: 'no-store' });\n            if (!res.ok) throw new Error(`HTTP ${res.status} for ${path}`);\n            const md = await res.text();\n            const parsed = marked.parse(md) as string;\n            const clean = DOMPurify.sanitize(parsed);\n            return [s.id, clean as string] as const;\n          })\n        );\n        if (!cancelled) {\n          const map: Record<string,string> = {};\n          for (const [k,v] of entries) map[k] = v;\n          setHtmlById(map);\n        }\n      } catch (e: any) {\n        if (!cancelled) setError(e?.message || 'Failed to load docs');\n      }\n    }\n    loadAll();\n    return () => { cancelled = true; };\n  }, [locale]);\n\n  const labelFor = (id: string) => {\n    const s = sectionsConfig.find(x => x.id === id)!;\n    return s.label[locale as 'fr'|'en'];\n  };\n\n  return (\n    <div className=\"w-full\">\n      <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-10\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-12 gap-8\">\n          <aside className=\"lg:col-span-3\">\n            <nav className=\"sticky top-24 space-y-1\">\n              {sectionsConfig.map(s => (\n                <a\n                  key={s.id}\n                  href={`#${s.id}`}\n                  onClick={() => setActive(s.id)}\n                  className={`block w-full text-left rounded-md px-3 py-2 text-sm transition-colors ${active===s.id? 'bg-zinc-100 text-zinc-900 dark:bg-zinc-800 dark:text-zinc-100':'text-zinc-600 hover:text-zinc-900 hover:bg-zinc-50 dark:text-zinc-300 dark:hover:text-zinc-50 dark:hover:bg-zinc-900'}`}\n                ><h2>{labelFor(s.id)}</h2></a>\n              ))}\n            </nav>\n          </aside>\n          <section className=\"lg:col-span-9 min-w-0\">\n            {error ? (\n              <div className=\"prose prose-zinc dark:prose-invert max-w-none\">{error}</div>\n            ) : (\n              <div className=\"prose prose-zinc dark:prose-invert max-w-none\">\n                {sectionsConfig.map(s => (\n                  <article key={s.id} id={s.id} className=\"scroll-mt-24\">\n                    <h1 className=\"text-2xl font-semibold mb-2\">{labelFor(s.id)}</h1>\n                    <div dangerouslySetInnerHTML={{ __html: htmlById[s.id] || '' }} />\n                  </article>\n                ))}\n              </div>\n            )}\n          </section>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\app\\[locale]\\forgot-password\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'router' is assigned a value but never used.","line":16,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'t' is assigned a value but never used.","line":17,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":10},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[896,899],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[896,899],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":46,"column":17,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1621,1732],"text":"\r\n              We&apos;ve sent you instructions to reset your password. Check your email to continue.\r\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1621,1732],"text":"\r\n              We&lsquo;ve sent you instructions to reset your password. Check your email to continue.\r\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1621,1732],"text":"\r\n              We&#39;ve sent you instructions to reset your password. Check your email to continue.\r\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1621,1732],"text":"\r\n              We&rsquo;ve sent you instructions to reset your password. Check your email to continue.\r\n            "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":67,"column":19,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[2933,3002],"text":"\r\n                We&apos;ve sent a password reset link to\r\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[2933,3002],"text":"\r\n                We&lsquo;ve sent a password reset link to\r\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[2933,3002],"text":"\r\n                We&#39;ve sent a password reset link to\r\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[2933,3002],"text":"\r\n                We&rsquo;ve sent a password reset link to\r\n              "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":71,"column":21,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3145,3241],"text":"\r\n                Didn&apos;t receive the email? Check your spam folder or try again.\r\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3145,3241],"text":"\r\n                Didn&lsquo;t receive the email? Check your spam folder or try again.\r\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3145,3241],"text":"\r\n                Didn&#39;t receive the email? Check your spam folder or try again.\r\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3145,3241],"text":"\r\n                Didn&rsquo;t receive the email? Check your spam folder or try again.\r\n              "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":95,"column":27,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[4183,4285],"text":"\r\n            No worries! We&apos;ll help you reset it and get back to building amazing things.\r\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[4183,4285],"text":"\r\n            No worries! We&lsquo;ll help you reset it and get back to building amazing things.\r\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[4183,4285],"text":"\r\n            No worries! We&#39;ll help you reset it and get back to building amazing things.\r\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[4183,4285],"text":"\r\n            No worries! We&rsquo;ll help you reset it and get back to building amazing things.\r\n          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":120,"column":38,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5357,5435],"text":"\r\n              Enter your email and we&apos;ll send you a reset link\r\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5357,5435],"text":"\r\n              Enter your email and we&lsquo;ll send you a reset link\r\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5357,5435],"text":"\r\n              Enter your email and we&#39;ll send you a reset link\r\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5357,5435],"text":"\r\n              Enter your email and we&rsquo;ll send you a reset link\r\n            "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState } from 'react';\r\nimport { useRouter } from '@/i18n/routing';\r\nimport { Link } from '@/i18n/routing';\r\nimport { useTranslations } from 'next-intl';\r\nimport Image from 'next/image';\r\nimport { authClient } from '@/lib/auth-client';\r\nimport { ArrowLeft } from 'lucide-react';\r\n\r\nexport default function ForgotPasswordPage() {\r\n  const [email, setEmail] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [success, setSuccess] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const router = useRouter();\r\n  const t = useTranslations();\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setError('');\r\n    setLoading(true);\r\n\r\n    try {\r\n      await authClient.forgetPassword({\r\n        email,\r\n        redirectTo: '/reset-password',\r\n      });\r\n      setSuccess(true);\r\n    } catch (err: any) {\r\n      setError(err.message || 'Failed to send reset email');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (success) {\r\n    return (\r\n      <div className=\"min-h-screen flex\">\r\n        {/* Left side - Orange gradient */}\r\n        <div className=\"hidden lg:flex lg:w-1/2 bg-gradient-to-br from-orange-400 via-orange-500 to-orange-600 p-12 items-center justify-center relative overflow-hidden\">\r\n          <div className=\"absolute inset-0 bg-gradient-to-br from-orange-400/90 via-orange-500/90 to-orange-600/90\" />\r\n          <div className=\"relative z-10 max-w-md text-white\">\r\n            <h1 className=\"text-4xl font-bold mb-4\">Check your inbox!</h1>\r\n            <p className=\"text-lg opacity-90\">\r\n              We've sent you instructions to reset your password. Check your email to continue.\r\n            </p>\r\n          </div>\r\n          {/* Decorative elements */}\r\n          <div className=\"absolute top-20 right-20 w-64 h-64 bg-orange-300 rounded-full mix-blend-multiply filter blur-xl opacity-30 animate-blob\" />\r\n          <div className=\"absolute bottom-20 left-20 w-64 h-64 bg-orange-300 rounded-full mix-blend-multiply filter blur-xl opacity-30 animate-blob animation-delay-2000\" />\r\n        </div>\r\n\r\n        {/* Right side - Success message */}\r\n        <div className=\"flex-1 flex items-center justify-center px-4 sm:px-6 lg:px-8 bg-white\">\r\n          <div className=\"max-w-md w-full space-y-8\">\r\n            <div className=\"text-center\">\r\n              <div className=\"mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100 mb-4\">\r\n                <svg className=\"h-6 w-6 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 13l4 4L19 7\" />\r\n                </svg>\r\n              </div>\r\n              <h2 className=\"text-3xl font-extrabold text-gray-900\">\r\n                Check your email\r\n              </h2>\r\n              <p className=\"mt-2 text-gray-600\">\r\n                We've sent a password reset link to\r\n              </p>\r\n              <p className=\"mt-1 text-lg font-medium text-gray-900\">{email}</p>\r\n              <p className=\"mt-4 text-sm text-gray-500\">\r\n                Didn't receive the email? Check your spam folder or try again.\r\n              </p>\r\n              <Link \r\n                href=\"/login\" \r\n                className=\"mt-6 inline-flex items-center text-sm text-orange-600 hover:text-orange-500\"\r\n              >\r\n                <ArrowLeft className=\"mr-2 h-4 w-4\" />\r\n                Back to login\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex\">\r\n      {/* Left side - Orange gradient */}\r\n      <div className=\"hidden lg:flex lg:w-1/2 bg-gradient-to-br from-orange-400 via-orange-500 to-orange-600 p-12 items-center justify-center relative overflow-hidden\">\r\n        <div className=\"absolute inset-0 bg-gradient-to-br from-orange-400/90 via-orange-500/90 to-orange-600/90\" />\r\n        <div className=\"relative z-10 max-w-md text-white\">\r\n          <h1 className=\"text-4xl font-bold mb-4\">Forgot your password?</h1>\r\n          <p className=\"text-lg opacity-90\">\r\n            No worries! We'll help you reset it and get back to building amazing things.\r\n          </p>\r\n        </div>\r\n        {/* Decorative elements */}\r\n        <div className=\"absolute top-20 right-20 w-64 h-64 bg-orange-300 rounded-full mix-blend-multiply filter blur-xl opacity-30 animate-blob\" />\r\n        <div className=\"absolute bottom-20 left-20 w-64 h-64 bg-orange-300 rounded-full mix-blend-multiply filter blur-xl opacity-30 animate-blob animation-delay-2000\" />\r\n      </div>\r\n\r\n      {/* Right side - Form */}\r\n      <div className=\"flex-1 flex items-center justify-center px-4 sm:px-6 lg:px-8 bg-white\">\r\n        <div className=\"max-w-md w-full space-y-8\">\r\n          <div>\r\n            <div className=\"lg:hidden mb-8 flex justify-center\">\r\n              <Image\r\n                src=\"/logo_voxum.svg\"\r\n                alt=\"VOXUM\"\r\n                width={180}\r\n                height={37}\r\n                priority\r\n              />\r\n            </div>\r\n            <h2 className=\"text-center text-3xl font-extrabold text-gray-900\">\r\n              Reset your password\r\n            </h2>\r\n            <p className=\"mt-2 text-center text-sm text-gray-600\">\r\n              Enter your email and we'll send you a reset link\r\n            </p>\r\n          </div>\r\n          \r\n          <form className=\"mt-8 space-y-6\" onSubmit={handleSubmit}>\r\n            <div>\r\n              <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                Email address\r\n              </label>\r\n              <input\r\n                id=\"email\"\r\n                name=\"email\"\r\n                type=\"email\"\r\n                autoComplete=\"email\"\r\n                required\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n                className=\"appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500 sm:text-sm\"\r\n                placeholder=\"Enter your email\"\r\n              />\r\n            </div>\r\n\r\n            {error && (\r\n              <div className=\"bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg\">\r\n                {error}\r\n              </div>\r\n            )}\r\n\r\n            <div>\r\n              <button\r\n                type=\"submit\"\r\n                disabled={loading}\r\n                className=\"btn-firecrawl-default w-full inline-flex items-center justify-center whitespace-nowrap rounded-[10px] text-sm font-medium transition-all duration-200 disabled:pointer-events-none disabled:opacity-50 h-10 px-4\"\r\n              >\r\n                {loading ? 'Sending...' : 'Send reset link'}\r\n              </button>\r\n            </div>\r\n\r\n            <div className=\"text-center\">\r\n              <Link href=\"/login\" className=\"text-sm text-orange-600 hover:text-orange-500 inline-flex items-center\">\r\n                <ArrowLeft className=\"mr-2 h-4 w-4\" />\r\n                Back to login\r\n              </Link>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\app\\[locale]\\layout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'geistSans' is assigned a value but never used.","line":11,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'geistMono' is assigned a value but never used.","line":16,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[955,958],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[955,958],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextIntlClientProvider } from 'next-intl';\r\nimport { getMessages } from 'next-intl/server';\r\nimport { notFound } from 'next/navigation';\r\nimport { Navbar } from \"@/components/navbar\";\r\nimport { Footer } from \"@/components/footer\";\r\nimport { Providers } from \"@/components/providers\";\r\nimport { NetworkStatusAlert } from \"@/components/ui/network-status-alert\";\r\nimport { routing } from '@/i18n/routing';\r\nimport { Geist, Geist_Mono } from \"next/font/google\";\r\n\r\nconst geistSans = Geist({\r\n  variable: \"--font-geist-sans\",\r\n  subsets: [\"latin\"],\r\n});\r\n\r\nconst geistMono = Geist_Mono({\r\n  variable: \"--font-geist-mono\",\r\n  subsets: [\"latin\"],\r\n});\r\n\r\ntype Props = {\r\n  children: React.ReactNode;\r\n  params: Promise<{ locale: string }>;\r\n};\r\n\r\nexport default async function LocaleLayout({\r\n  children,\r\n  params\r\n}: Props) {\r\n  const { locale } = await params;\r\n  \r\n  // Valider que la locale est supportée\r\n  if (!routing.locales.includes(locale as any)) {\r\n    notFound();\r\n  }\r\n\r\n  // Fournir tous les messages à la page et aux composants enfants\r\n  const messages = await getMessages({ locale });\r\n\r\n  return (\r\n    <>\r\n      <script\r\n        dangerouslySetInnerHTML={{\r\n          __html: `document.documentElement.lang = '${locale}';`,\r\n        }}\r\n      />\r\n      <NextIntlClientProvider locale={locale} messages={messages}>\r\n        <Providers>\r\n          <div className=\"flex flex-col min-h-screen\">\r\n            <Navbar />\r\n            <main className=\"flex-grow\">\r\n              {children}\r\n            </main>\r\n            <Footer />\r\n            <NetworkStatusAlert />\r\n          </div>\r\n        </Providers>\r\n      </NextIntlClientProvider>\r\n    </>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\app\\[locale]\\login\\page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 't'. Either include it or remove the dependency array.","line":37,"column":6,"nodeType":"ArrayExpression","endLine":37,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [searchParams, t]","fix":{"range":[1182,1196],"text":"[searchParams, t]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1887,1890],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1887,1890],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect, Suspense } from 'react';\r\nimport { useSearchParams } from 'next/navigation';\r\nimport { Link, useRouter } from '@/i18n/routing';\r\nimport Image from 'next/image';\r\nimport { signIn, useSession } from '@/lib/auth-client';\r\nimport { useTranslations } from 'next-intl';\r\n\r\nfunction LoginForm() {\r\n  const { data: session, isPending } = useSession();\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const searchParams = useSearchParams();\r\n  const t = useTranslations();\r\n  const router = useRouter();\r\n\r\n  useEffect(() => {\r\n    if (!isPending && session) {\r\n      router.replace('/brand-monitor');\r\n    }\r\n  }, [isPending, session, router]);\r\n\r\n  useEffect(() => {\r\n    if (searchParams.get('reset') === 'success') {\r\n      setSuccess(t('auth.passwordResetSuccess'));\r\n    }\r\n    \r\n    // Pre-fill email if passed from registration page\r\n    const emailParam = searchParams.get('email');\r\n    if (emailParam) {\r\n      setEmail(emailParam);\r\n    }\r\n  }, [searchParams]);\r\n\r\n  const handleLogin = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setError('');\r\n    setLoading(true);\r\n\r\n    try {\r\n      const response = await signIn.email({\r\n        email,\r\n        password,\r\n      });\r\n      \r\n      if (response.error) {\r\n        // Les messages sont désormais localisés côté serveur par better-auth-localization\r\n        setError(response.error.message || t('auth.failedToLogin'));\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      \r\n      // Navigation après connexion (respecte la locale)\r\n      const returnUrl = searchParams.get('from') || '/brand-monitor';\r\n      router.push(returnUrl || '/brand-monitor');\r\n    } catch (err: any) {\r\n      setError(err?.message || t('auth.failedToLogin'));\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex\">\r\n      {/* Left side - Orange gradient */}\r\n      <div className=\"hidden lg:flex lg:w-1/2 bg-gradient-to-br from-orange-400 via-orange-500 to-orange-600 p-12 items-center justify-center relative overflow-hidden\">\r\n        <div className=\"absolute inset-0 bg-gradient-to-br from-orange-400/90 via-orange-500/90 to-orange-600/90\" />\r\n        <div className=\"relative z-10 max-w-md text-white\">\r\n          <h1 className=\"text-4xl font-bold mb-4\">{t('auth.welcomeBack')}</h1>\r\n          <p className=\"text-lg opacity-90\">\r\n            {t('auth.welcomeBackDescription')}\r\n          </p>\r\n        </div>\r\n        {/* Decorative elements */}\r\n        <div className=\"absolute top-20 right-20 w-64 h-64 bg-orange-300 rounded-full mix-blend-multiply filter blur-xl opacity-30 animate-blob\" />\r\n        <div className=\"absolute bottom-20 left-20 w-64 h-64 bg-orange-300 rounded-full mix-blend-multiply filter blur-xl opacity-30 animate-blob animation-delay-2000\" />\r\n      </div>\r\n\r\n      {/* Right side - Form */}\r\n      <div className=\"flex-1 flex items-center justify-center px-4 sm:px-6 lg:px-8 bg-white\">\r\n        <div className=\"max-w-md w-full space-y-8\">\r\n          <div>\r\n            <div className=\"lg:hidden mb-8 flex justify-center\">\r\n              <Image\r\n                src=\"/logo_voxum.svg\"\r\n                alt=\"VOXUM\"\r\n                width={180}\r\n                height={37}\r\n                priority\r\n              />\r\n            </div>\r\n            <h2 className=\"text-center text-3xl font-extrabold text-gray-900\">\r\n              {t('auth.loginTitle')}\r\n            </h2>\r\n            <p className=\"mt-2 text-center text-sm text-gray-600\">\r\n              {t('auth.or')}{' '}\r\n              <Link href={`/register`} className=\"font-medium text-orange-600 hover:text-orange-500\">\r\n                {t('auth.createNewAccount')}\r\n              </Link>\r\n            </p>\r\n          </div>\r\n          <form className=\"mt-8 space-y-6\" onSubmit={handleLogin}>\r\n            <div className=\"space-y-4\">\r\n              <div>\r\n                <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                  {t('auth.emailLabel')}\r\n                </label>\r\n                <input\r\n                  id=\"email\"\r\n                  name=\"email\"\r\n                  type=\"email\"\r\n                  autoComplete=\"email\"\r\n                  required\r\n                  value={email}\r\n                  onChange={(e) => setEmail(e.target.value)}\r\n                  className=\"appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500 sm:text-sm\"\r\n                  placeholder={t('auth.emailPlaceholder')}\r\n                />\r\n              </div>\r\n              <div>\r\n                <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                  {t('auth.passwordLabel')}\r\n                </label>\r\n                <input\r\n                  id=\"password\"\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                  autoComplete=\"current-password\"\r\n                  required\r\n                  value={password}\r\n                  onChange={(e) => setPassword(e.target.value)}\r\n                  className=\"appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500 sm:text-sm\"\r\n                  placeholder={t('auth.passwordPlaceholder')}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"flex items-center\">\r\n                <input\r\n                  id=\"remember-me\"\r\n                  name=\"remember-me\"\r\n                  type=\"checkbox\"\r\n                  className=\"h-4 w-4 text-orange-600 focus:ring-orange-500 border-gray-300 rounded\"\r\n                />\r\n                <label htmlFor=\"remember-me\" className=\"ml-2 block text-sm text-gray-900\">\r\n                  {t('auth.rememberMe')}\r\n                </label>\r\n              </div>\r\n              <Link href={`/forgot-password`} className=\"text-sm text-orange-600 hover:text-orange-500\">\r\n                {t('auth.forgotPassword')}\r\n              </Link>\r\n            </div>\r\n\r\n            {success && (\r\n              <div className=\"bg-green-50 border border-green-200 text-green-600 px-4 py-3 rounded-lg\">\r\n                {success}\r\n              </div>\r\n            )}\r\n\r\n            {error && (\r\n              <div className=\"bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg\">\r\n                {error}\r\n              </div>\r\n            )}\r\n\r\n            <div>\r\n              <button\r\n                type=\"submit\"\r\n                disabled={loading}\r\n                className=\"btn-firecrawl-default w-full inline-flex items-center justify-center whitespace-nowrap rounded-[10px] text-sm font-medium transition-all duration-200 disabled:pointer-events-none disabled:opacity-50 h-10 px-4\"\r\n              >\r\n                {loading ? t('auth.signingIn') : t('auth.signIn')}\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function LoginPage() {\r\n  return (\r\n    <Suspense fallback={<div className=\"min-h-screen flex items-center justify-center\">Loading...</div>}>\r\n      <LoginForm />\r\n    </Suspense>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\app\\[locale]\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'locale' is assigned a value but never used.","line":14,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { Link } from \"@/i18n/routing\";\r\nimport { useState } from \"react\";\r\nimport { useTranslations } from 'next-intl';\r\nimport { useParams } from 'next/navigation';\r\nimport PricingSection from '@/components/pricing-section';\r\nimport InteractiveDemo from '@/components/interactive-demo';\r\n\r\nexport default function Home() {\r\n  const [openFaq, setOpenFaq] = useState<number | null>(null);\r\n  const t = useTranslations();\r\n  const params = useParams();\r\n  const locale = params.locale as string;\r\n\r\n  const toggleFaq = (index: number) => {\r\n    setOpenFaq(openFaq === index ? null : index);\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen\">\r\n      {/* Hero Section */}\r\n      <section className=\"relative overflow-hidden bg-white pt-16 pb-24\">\r\n        \r\n        \r\n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n          <div className=\"text-center\">\r\n            <h1 className=\"text-5xl lg:text-7xl font-bold tracking-tight mb-8 animate-fade-in-up\">\r\n              <span className=\"block text-zinc-900\">{t('home.hero.title')}</span>\r\n              <span className=\"block bg-gradient-to-r from-red-600 to-yellow-500 bg-clip-text text-transparent\">\r\n                {t('home.hero.subtitle')}\r\n              </span>\r\n            </h1>\r\n            <p className=\"text-xl lg:text-2xl text-zinc-600 max-w-3xl mx-auto mb-6 animate-fade-in-up animation-delay-200\">\r\n              {t('home.hero.description')}\r\n            </p>\r\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center animate-fade-in-up animation-delay-400\">\r\n              <Link\r\n                href={`/register?plan=free`}\r\n                className=\"btn-firecrawl-orange inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-[10px] text-base font-medium transition-all duration-200 h-12 px-8\"\r\n              >\r\n                {t('home.hero.startAnalysis')}\r\n              </Link>\r\n              <Link\r\n                href={`/plans`}\r\n                className=\"btn-firecrawl-default inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-[10px] text-base font-medium transition-all duration-200 h-12 px-8\"\r\n              >\r\n                {t('home.hero.viewPricing')}\r\n              </Link>\r\n            </div>\r\n            <p className=\"mt-6 text-sm text-zinc-500 animate-fade-in-up animation-delay-600\">\r\n              {t('home.hero.features')}\r\n            </p>\r\n          </div>\r\n\r\n          {/* Stats */}\r\n          <div className=\"mt-20 bg-zinc-900 rounded-[20px] p-12 animate-fade-in-scale animation-delay-800\">\r\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8\">\r\n              <div className=\"text-center animate-fade-in-up animation-delay-1000\">\r\n                <div className=\"text-4xl font-bold text-white\">{t('home.stats.aiModels.title')}</div>\r\n                <div className=\"text-sm text-zinc-400 mt-1\">{t('home.stats.aiModels.description')}</div>\r\n              </div>\r\n              <div className=\"text-center animate-fade-in-up animation-delay-1000\" style={{animationDelay: '1200ms'}}>\r\n                <div className=\"text-4xl font-bold text-white\">{t('home.stats.competitor.title')}</div>\r\n                <div className=\"text-sm text-zinc-400 mt-1\">{t('home.stats.competitor.description')}</div>\r\n              </div>\r\n              <div className=\"text-center animate-fade-in-up animation-delay-1000\" style={{animationDelay: '1100ms'}}>\r\n                <div className=\"text-4xl font-bold text-white\">{t('home.stats.realtime.title')}</div>\r\n                <div className=\"text-sm text-zinc-400 mt-1\">{t('home.stats.realtime.description')}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <InteractiveDemo />\r\n\r\n      <PricingSection\r\n        products={[\r\n          {\r\n            id: 'start',\r\n            name: t('pricing.voxum.start.name'),\r\n            price: { primaryText: t('pricing.voxum.start.price'), secondaryText: t('pricing.voxum.start.priceDesc') },\r\n            items: [\r\n              { primaryText: t('pricing.voxum.start.feature1') },\r\n              { primaryText: t('pricing.voxum.start.feature2') },\r\n            ],\r\n          },\r\n          {\r\n            id: 'watch',\r\n            name: t('pricing.voxum.watch.name'),\r\n            recommendText: t('home.pricing.mostPopular'),\r\n            price: { primaryText: t('pricing.voxum.watch.price'), secondaryText: t('pricing.voxum.watch.priceDesc') },\r\n            items: [\r\n              { primaryText: t('pricing.voxum.watch.feature1') },\r\n              { primaryText: t('pricing.voxum.watch.feature2') },\r\n            ],\r\n          },\r\n          {\r\n            id: 'pro',\r\n            name: t('pricing.voxum.pro.name'),\r\n            price: { primaryText: t('pricing.voxum.pro.price'), secondaryText: t('pricing.voxum.pro.priceDesc') },\r\n            items: [\r\n              { primaryText: t('pricing.voxum.pro.feature1') },\r\n              { primaryText: t('pricing.voxum.pro.feature2') },\r\n              { primaryText: t('pricing.voxum.pro.feature3') },\r\n            ],\r\n          },\r\n          {\r\n            id: 'enterprise',\r\n            name: t('pricing.voxum.enterprise.name'),\r\n            price: { primaryText: t('pricing.voxum.enterprise.price') },\r\n            items: [\r\n              { primaryText: t('pricing.voxum.enterprise.feature1') },\r\n              { primaryText: t('pricing.voxum.enterprise.feature2') },\r\n              { primaryText: t('pricing.voxum.enterprise.feature3') },\r\n            ],\r\n          },\r\n        ]}\r\n      />\r\n\r\n\r\n      {/* CTA Section 1 */}\r\n      <section className=\"py-20 bg-white\">\r\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n          <div className=\"bg-gradient-to-r from-orange-500 to-orange-600 rounded-[30px] p-16 text-center\">\r\n            <h2 className=\"text-4xl font-bold text-white mb-6\">\r\n              {t('home.cta1.title')}\r\n            </h2>\r\n            <p className=\"text-xl text-orange-100 mb-8\">\r\n              {t('home.cta1.description')}\r\n            </p>\r\n             <Link\r\n               href={`/register?plan=free`}\r\n               className=\"btn-firecrawl-orange inline-flex items-center justify-center whitespace-nowrap rounded-[10px] text-base font-medium transition-all duration-200 h-12 px-8\"\r\n             >\r\n               {t('home.cta1.button')}\r\n             </Link>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n\r\n      {/* FAQs */}\r\n      <section className=\"py-24 bg-white\">\r\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n          <div className=\"text-center mb-16\">\r\n            <h2 className=\"text-4xl font-bold text-zinc-900 mb-4 animate-fade-in-up\">\r\n              {t('home.faq.title')}\r\n            </h2>\r\n            <p className=\"text-xl text-zinc-600 animate-fade-in-up animation-delay-200\">\r\n              {t('home.faq.description')}\r\n            </p>\r\n          </div>\r\n\r\n          <div className=\"space-y-4\">\r\n            {/* FAQ 1 */}\r\n            <div className=\"bg-gray-50 rounded-[15px] overflow-hidden animate-fade-in-up animation-delay-400\">\r\n              <button\r\n                onClick={() => toggleFaq(0)}\r\n                className=\"w-full px-6 py-5 text-left flex justify-between items-center hover:bg-gray-100 transition-colors\"\r\n              >\r\n                <h3 className=\"text-lg font-semibold text-zinc-900\">\r\n                  {t('home.faq.questions.howItWorks.question')}\r\n                </h3>\r\n                <svg\r\n                  className={`w-5 h-5 text-zinc-500 transition-transform ${openFaq === 0 ? 'rotate-180' : ''}`}\r\n                  fill=\"none\"\r\n                  stroke=\"currentColor\"\r\n                  viewBox=\"0 0 24 24\"\r\n                >\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n                </svg>\r\n              </button>\r\n              {openFaq === 0 && (\r\n                <div className=\"px-6 py-6\">\r\n                  <p className=\"text-zinc-600 leading-relaxed\">\r\n                    {t('home.faq.questions.howItWorks.answer')}\r\n                  </p>\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* FAQ 2 */}\r\n            <div className=\"bg-gray-50 rounded-[15px] overflow-hidden animate-fade-in-up animation-delay-400\" style={{animationDelay: '500ms'}}>\r\n              <button\r\n                onClick={() => toggleFaq(1)}\r\n                className=\"w-full px-6 py-5 text-left flex justify-between items-center hover:bg-gray-100 transition-colors\"\r\n              >\r\n                <h3 className=\"text-lg font-semibold text-zinc-900\">\r\n                  {t('home.faq.questions.providers.question')}\r\n                </h3>\r\n                <svg\r\n                  className={`w-5 h-5 text-zinc-500 transition-transform ${openFaq === 1 ? 'rotate-180' : ''}`}\r\n                  fill=\"none\"\r\n                  stroke=\"currentColor\"\r\n                  viewBox=\"0 0 24 24\"\r\n                >\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n                </svg>\r\n              </button>\r\n              {openFaq === 1 && (\r\n                <div className=\"px-6 py-6\">\r\n                  <p className=\"text-zinc-600 leading-relaxed\">\r\n                    {t('home.faq.questions.providers.answer')}\r\n                  </p>\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* FAQ 3 */}\r\n            <div className=\"bg-gray-50 rounded-[15px] overflow-hidden animate-fade-in-up animation-delay-600\">\r\n              <button\r\n                onClick={() => toggleFaq(2)}\r\n                className=\"w-full px-6 py-5 text-left flex justify-between items-center hover:bg-gray-100 transition-colors\"\r\n              >\r\n                <h3 className=\"text-lg font-semibold text-zinc-900\">\r\n                  {t('home.faq.questions.updates.question')}\r\n                </h3>\r\n                <svg\r\n                  className={`w-5 h-5 text-zinc-500 transition-transform ${openFaq === 2 ? 'rotate-180' : ''}`}\r\n                  fill=\"none\"\r\n                  stroke=\"currentColor\"\r\n                  viewBox=\"0 0 24 24\"\r\n                >\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n                </svg>\r\n              </button>\r\n              {openFaq === 2 && (\r\n                <div className=\"px-6 py-6\">\r\n                  <p className=\"text-zinc-600 leading-relaxed\">\r\n                    {t('home.faq.questions.updates.answer')}\r\n                  </p>\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* FAQ 4 */}\r\n            <div className=\"bg-gray-50 rounded-[15px] overflow-hidden animate-fade-in-up animation-delay-400\" style={{animationDelay: '700ms'}}>\r\n              <button\r\n                onClick={() => toggleFaq(3)}\r\n                className=\"w-full px-6 py-5 text-left flex justify-between items-center hover:bg-gray-100 transition-colors\"\r\n              >\r\n                <h3 className=\"text-lg font-semibold text-zinc-900\">\r\n                  {t('home.faq.questions.insights.question')}\r\n                </h3>\r\n                <svg\r\n                  className={`w-5 h-5 text-zinc-500 transition-transform ${openFaq === 3 ? 'rotate-180' : ''}`}\r\n                  fill=\"none\"\r\n                  stroke=\"currentColor\"\r\n                  viewBox=\"0 0 24 24\"\r\n                >\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n                </svg>\r\n              </button>\r\n              {openFaq === 3 && (\r\n                <div className=\"px-6 py-6\">\r\n                  <p className=\"text-zinc-600 leading-relaxed\">\r\n                    {t('home.faq.questions.insights.answer')}\r\n                  </p>\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* FAQ 5 */}\r\n            <div className=\"bg-gray-50 rounded-[15px] overflow-hidden animate-fade-in-up animation-delay-800\">\r\n              <button\r\n                onClick={() => toggleFaq(4)}\r\n                className=\"w-full px-6 py-5 text-left flex justify-between items-center hover:bg-gray-100 transition-colors\"\r\n              >\r\n                <h3 className=\"text-lg font-semibold text-zinc-900\">\r\n                  {t('home.faq.questions.credits.question')}\r\n                </h3>\r\n                <svg\r\n                  className={`w-5 h-5 text-zinc-500 transition-transform ${openFaq === 4 ? 'rotate-180' : ''}`}\r\n                  fill=\"none\"\r\n                  stroke=\"currentColor\"\r\n                  viewBox=\"0 0 24 24\"\r\n                >\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n                </svg>\r\n              </button>\r\n              {openFaq === 4 && (\r\n                <div className=\"px-6 py-6\">\r\n                  <p className=\"text-zinc-600 leading-relaxed\">\r\n                    {t('home.faq.questions.credits.answer')}\r\n                  </p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      {/* Final CTA */}\r\n      <section className=\"py-24 bg-zinc-900\">\r\n        <div className=\"max-w-4xl mx-auto text-center px-4 sm:px-6 lg:px-8\">\r\n          <h2 className=\"text-4xl font-bold text-white mb-6\">\r\n            {t('home.finalCta.title')}\r\n          </h2>\r\n          <p className=\"text-xl text-zinc-400 mb-8\">\r\n            {t('home.finalCta.description')}\r\n          </p>\r\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\r\n            <Link\r\n              href={`/register?plan=free`}\r\n              className=\"btn-firecrawl-orange inline-flex items-center justify-center whitespace-nowrap rounded-[10px] text-base font-medium transition-all duration-200 h-12 px-8\"\r\n            >\r\n              {t('home.finalCta.analyzeButton')}\r\n            </Link>\r\n            <Link\r\n              href={`/plans`}\r\n              className=\"inline-flex items-center justify-center whitespace-nowrap rounded-[10px] text-base font-medium transition-all duration-200 h-12 px-8 bg-zinc-800 text-white hover:bg-zinc-700\"\r\n            >\r\n              {t('home.finalCta.pricingButton')}\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\app\\[locale]\\pricing-dynamic\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[501,504],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[501,504],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useCustomer } from '@/hooks/useAutumnCustomer';\r\nimport { usePricingTable } from 'autumn-js/react';\r\nimport { useSession } from '@/lib/auth-client';\r\nimport { useRouter } from 'next/navigation';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Check, Loader2 } from 'lucide-react';\r\nimport ProductChangeDialog from '@/components/autumn/product-change-dialog';\r\n\r\n// Separate component that uses Autumn hooks\r\nfunction DynamicPricingContent({ session }: { session: any }) {\r\n  const { customer, attach } = useCustomer();\r\n  const { products, isLoading, error } = usePricingTable();\r\n  const router = useRouter();\r\n\r\n  const handleSelectPlan = async (productId: string) => {\r\n    if (!session) {\r\n      router.push('/login');\r\n      return;\r\n    }\r\n\r\n    await attach({\r\n      productId,\r\n      dialog: ProductChangeDialog,\r\n    });\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <Loader2 className=\"h-8 w-8 animate-spin text-gray-500\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <p className=\"text-red-600 mb-4\">Error loading pricing</p>\r\n          <Button onClick={() => window.location.reload()}>Try Again</Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 py-12\">\r\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n        <div className=\"text-center mb-12\">\r\n          <h1 className=\"text-4xl font-bold mb-4\">Choose Your Plan</h1>\r\n          <p className=\"text-xl text-gray-600\">Select the perfect plan for your needs</p>\r\n        </div>\r\n\r\n        <div className=\"grid md:grid-cols-3 gap-8 max-w-5xl mx-auto\">\r\n          {products?.map((product) => {\r\n            const isActive = customer?.products?.some(p => p.id === product.id);\r\n            const price = product.items?.[0];\r\n            const features = product.items?.slice(1) || [];\r\n\r\n            return (\r\n              <div \r\n                key={product.id} \r\n                className={`bg-white rounded-lg shadow-lg p-8 ${\r\n                  product.display?.recommend_text ? 'ring-2 ring-orange-500 transform scale-105' : ''\r\n                }`}\r\n              >\r\n                {product.display?.recommend_text && (\r\n                  <div className=\"bg-orange-500 text-white text-sm font-semibold px-3 py-1 rounded-full inline-block mb-4\">\r\n                    {product.display.recommend_text}\r\n                  </div>\r\n                )}\r\n                \r\n                <h2 className=\"text-2xl font-bold mb-4\">{product.display?.name || product.name}</h2>\r\n                \r\n                {price && (\r\n                  <div className=\"mb-6\">\r\n                    <span className=\"text-4xl font-bold\">{price.display?.primary_text}</span>\r\n                    {price.display?.secondary_text && (\r\n                      <span className=\"text-gray-600 ml-2\">{price.display.secondary_text}</span>\r\n                    )}\r\n                  </div>\r\n                )}\r\n\r\n                <Button\r\n                  onClick={() => handleSelectPlan(product.id)}\r\n                  disabled={isActive}\r\n                  className={`w-full mb-6 ${\r\n                    product.display?.recommend_text \r\n                      ? 'btn-firecrawl-orange' \r\n                      : 'bg-gray-900 text-white hover:bg-gray-800'\r\n                  }`}\r\n                >\r\n                  {isActive ? 'Current Plan' : 'Select Plan'}\r\n                </Button>\r\n\r\n                <ul className=\"space-y-3\">\r\n                  {features.map((feature, index) => (\r\n                    <li key={index} className=\"flex items-start\">\r\n                      <Check className=\"h-5 w-5 text-green-500 mr-2 flex-shrink-0 mt-0.5\" />\r\n                      <span className=\"text-gray-700\">{feature.display?.primary_text}</span>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function DynamicPricingPage() {\r\n  const { data: session, isPending } = useSession();\r\n\r\n  if (isPending) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <Loader2 className=\"h-8 w-8 animate-spin text-gray-500\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <DynamicPricingContent session={session} />;\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\app\\[locale]\\register\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":42,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1343,1346],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1343,1346],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState } from 'react';\r\nimport { Link, useRouter } from '@/i18n/routing';\r\nimport Image from 'next/image';\r\nimport { signUp } from '@/lib/auth-client';\r\nimport { useTranslations } from 'next-intl';\r\n\r\nexport default function RegisterPage() {\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [showExistingAccountOptions, setShowExistingAccountOptions] = useState(false);\r\n  const t = useTranslations();\r\n  const router = useRouter();\r\n\r\n  const handleRegister = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setError('');\r\n    setLoading(true);\r\n    setShowExistingAccountOptions(false);\r\n\r\n    try {\r\n      const response = await signUp.email({\r\n        name,\r\n        email,\r\n        password,\r\n      });\r\n      \r\n      // Only redirect if signup was successful\r\n      if (!response.error) {\r\n        // Wait a moment for the session to be properly set\r\n        await new Promise(resolve => setTimeout(resolve, 100));\r\n        \r\n        // Redirige vers la page d'information de vérification email\r\n        router.push('/verify-email');\r\n      } else {\r\n        throw response.error;\r\n      }\r\n    } catch (err: any) {\r\n      const errorMessage = err.message || t('auth.failedToRegister');\r\n      \r\n      // Check if the error is about existing account\r\n      // Better Auth returns 422 status for existing accounts\r\n      const isExistingAccountError = (\r\n        err.status === 422 ||\r\n        (typeof errorMessage === 'string' && (\r\n          errorMessage.toLowerCase().includes('already exists') ||\r\n          errorMessage.toLowerCase().includes('already registered') ||\r\n          errorMessage.toLowerCase().includes('existing email') ||\r\n          errorMessage.toLowerCase().includes('email already') ||\r\n          errorMessage.toLowerCase().includes('user already exists')\r\n        ))\r\n      );\r\n\r\n      if (isExistingAccountError) {\r\n        // Use localized copy instead of raw provider message\r\n        setError(t('auth.existingAccountDetected'));\r\n        setShowExistingAccountOptions(true);\r\n      } else {\r\n        setError(errorMessage);\r\n      }\r\n\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex\">\r\n      {/* Left side - Orange gradient */}\r\n      <div className=\"hidden lg:flex lg:w-1/2 bg-gradient-to-br from-orange-400 via-orange-500 to-orange-600 p-12 items-center justify-center relative overflow-hidden\">\r\n        <div className=\"absolute inset-0 bg-gradient-to-br from-orange-400/90 via-orange-500/90 to-orange-600/90\" />\r\n        <div className=\"relative z-10 max-w-md text-white\">\r\n          <h1 className=\"text-4xl font-bold mb-4\">{t('auth.joinDevelopers')}</h1>\r\n          <p className=\"text-lg opacity-90\">\r\n            {t('auth.joinDevelopersDescription')}\r\n          </p>\r\n          <div className=\"mt-8 space-y-4\">\r\n            <div className=\"flex items-center space-x-3\">\r\n              <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\r\n              </svg>\r\n              <span>{t('auth.unlimitedAccess')}</span>\r\n            </div>\r\n            <div className=\"flex items-center space-x-3\">\r\n              <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\r\n              </svg>\r\n              <span>{t('auth.realtimeCollaboration')}</span>\r\n            </div>\r\n            <div className=\"flex items-center space-x-3\">\r\n              <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\r\n              </svg>\r\n              <span>{t('auth.support247')}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* Decorative elements */}\r\n        <div className=\"absolute top-20 right-20 w-64 h-64 bg-orange-300 rounded-full mix-blend-multiply filter blur-xl opacity-30 animate-blob\" />\r\n        <div className=\"absolute bottom-20 left-20 w-64 h-64 bg-orange-300 rounded-full mix-blend-multiply filter blur-xl opacity-30 animate-blob animation-delay-2000\" />\r\n      </div>\r\n\r\n      {/* Right side - Form */}\r\n      <div className=\"flex-1 flex items-center justify-center px-4 sm:px-6 lg:px-8 bg-white\">\r\n        <div className=\"max-w-md w-full space-y-8\">\r\n          <div>\r\n            <div className=\"lg:hidden mb-8 flex justify-center\">\r\n              <Image\r\n                src=\"/logo_voxum.svg\"\r\n                alt=\"VOXUM\"\r\n                width={180}\r\n                height={37}\r\n                priority\r\n              />\r\n            </div>\r\n            <h2 className=\"text-center text-3xl font-extrabold text-gray-900\">\r\n              {t('auth.registerTitle')}\r\n            </h2>\r\n            <p className=\"mt-2 text-center text-sm text-gray-600\">\r\n              {t('auth.or')}{' '}\r\n              <Link href={`/login`} className=\"font-medium text-orange-600 hover:text-orange-500\">\r\n                {t('auth.signInExisting')}\r\n              </Link>\r\n            </p>\r\n          </div>\r\n          <form className=\"mt-8 space-y-6\" onSubmit={handleRegister}>\r\n            <div className=\"space-y-4\">\r\n              <div>\r\n                <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                  {t('auth.fullNameLabel')}\r\n                </label>\r\n                <input\r\n                  id=\"name\"\r\n                  name=\"name\"\r\n                  type=\"text\"\r\n                  autoComplete=\"name\"\r\n                  required\r\n                  value={name}\r\n                  onChange={(e) => setName(e.target.value)}\r\n                  className=\"appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500 sm:text-sm\"\r\n                  placeholder={t('auth.fullNamePlaceholder')}\r\n                />\r\n              </div>\r\n              <div>\r\n                <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                  {t('auth.emailLabel')}\r\n                </label>\r\n                <input\r\n                  id=\"email\"\r\n                  name=\"email\"\r\n                  type=\"email\"\r\n                  autoComplete=\"email\"\r\n                  required\r\n                  value={email}\r\n                  onChange={(e) => setEmail(e.target.value)}\r\n                  className=\"appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500 sm:text-sm\"\r\n                  placeholder={t('auth.emailPlaceholder')}\r\n                />\r\n              </div>\r\n              <div>\r\n                <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                  {t('auth.passwordLabel')}\r\n                </label>\r\n                <input\r\n                  id=\"password\"\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                  autoComplete=\"new-password\"\r\n                  required\r\n                  value={password}\r\n                  onChange={(e) => setPassword(e.target.value)}\r\n                  className=\"appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500 sm:text-sm\"\r\n                  placeholder={t('auth.newPasswordPlaceholder')}\r\n                />\r\n                <p className=\"mt-1 text-xs text-gray-500\">{t('auth.passwordRequirement')}</p>\r\n              </div>\r\n            </div>\r\n\r\n            {error && (\r\n              <div className={`border px-4 py-3 rounded-lg ${showExistingAccountOptions ? 'bg-gray-900 border-gray-800' : 'bg-red-50 border-red-200'}`}>\r\n                <p className={showExistingAccountOptions ? 'text-white font-medium' : 'text-red-600'}>\r\n                  {error}\r\n                </p>\r\n                {showExistingAccountOptions && (\r\n                  <div className=\"mt-3 space-y-3\">\r\n                    <p className=\"text-sm text-gray-300\">\r\n                      {t('auth.existingAccountDetected')}\r\n                    </p>\r\n                    <div className=\"flex flex-col sm:flex-row gap-2\">\r\n                      <Link \r\n                        href={`/login?email=${encodeURIComponent(email)}`}\r\n                        className=\"inline-flex items-center justify-center px-4 py-2 border border-orange-500 text-sm font-medium rounded-md text-white bg-orange-500 hover:bg-orange-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 focus:ring-offset-gray-900 transition-colors\"\r\n                      >\r\n                        {t('auth.signInInstead')}\r\n                      </Link>\r\n                      <Link \r\n                        href={`/forgot-password`}\r\n                        className=\"inline-flex items-center justify-center px-4 py-2 text-sm font-medium rounded-md text-orange-400 hover:text-orange-300 focus:outline-none focus:underline transition-colors\"\r\n                      >\r\n                        {t('auth.forgotPassword')}\r\n                      </Link>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )}\r\n\r\n            <div className=\"space-y-4\">\r\n              <div className=\"flex items-center\">\r\n                <input\r\n                  id=\"terms\"\r\n                  name=\"terms\"\r\n                  type=\"checkbox\"\r\n                  required\r\n                  className=\"h-4 w-4 text-orange-600 focus:ring-orange-500 border-gray-300 rounded\"\r\n                />\r\n                <label htmlFor=\"terms\" className=\"ml-2 block text-sm text-gray-900\">\r\n                  {t('auth.agreeToTerms')}{' '}\r\n                  <Link href={`/terms`} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-orange-600 hover:text-orange-500\">\r\n                    {t('footer.termsOfService')}\r\n                  </Link>{' '}\r\n                  {t('auth.and')}{' '}\r\n                  <Link href={`/privacy`} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-orange-600 hover:text-orange-500\">\r\n                    {t('footer.privacyPolicy')}\r\n                  </Link>\r\n                </label>\r\n              </div>\r\n              <button\r\n                type=\"submit\"\r\n                disabled={loading}\r\n                className=\"btn-firecrawl-orange w-full inline-flex items-center justify-center whitespace-nowrap rounded-[10px] text-sm font-medium transition-all duration-200 disabled:pointer-events-none disabled:opacity-50 h-10 px-4\"\r\n              >\r\n                {loading ? t('auth.creatingAccount') : t('auth.createAccount')}\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\app\\[locale]\\reset-password\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1410,1413],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1410,1413],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":110,"column":65,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[4478,4577],"text":"\r\n            Create a new password for your account. Make sure it&apos;s strong and unique.\r\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[4478,4577],"text":"\r\n            Create a new password for your account. Make sure it&lsquo;s strong and unique.\r\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[4478,4577],"text":"\r\n            Create a new password for your account. Make sure it&#39;s strong and unique.\r\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[4478,4577],"text":"\r\n            Create a new password for your account. Make sure it&rsquo;s strong and unique.\r\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect, Suspense } from 'react';\r\nimport { useRouter } from '@/i18n/routing';\r\nimport { Link } from '@/i18n/routing';\r\nimport { useSearchParams } from 'next/navigation';\r\nimport Image from 'next/image';\r\nimport { authClient } from '@/lib/auth-client';\r\nimport { ArrowLeft, CheckCircle } from 'lucide-react';\r\n\r\nfunction ResetPasswordForm() {\r\n  const [password, setPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const router = useRouter();\r\n  const searchParams = useSearchParams();\r\n  const token = searchParams.get('token');\r\n\r\n  useEffect(() => {\r\n    if (!token) {\r\n      setError('Invalid or missing reset token');\r\n    }\r\n  }, [token]);\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setError('');\r\n\r\n    if (password !== confirmPassword) {\r\n      setError('Passwords do not match');\r\n      return;\r\n    }\r\n\r\n    if (password.length < 8) {\r\n      setError('Password must be at least 8 characters');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n\r\n    try {\r\n      await authClient.resetPassword({\r\n        newPassword: password,\r\n        token: token!,\r\n      });\r\n      \r\n      // Redirect to login with success message\r\n      router.push('/login?reset=success');\r\n    } catch (err: any) {\r\n      setError(err.message || 'Failed to reset password');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (!token) {\r\n    return (\r\n      <div className=\"min-h-screen flex\">\r\n        {/* Left side - Orange gradient */}\r\n        <div className=\"hidden lg:flex lg:w-1/2 bg-gradient-to-br from-orange-400 via-orange-500 to-orange-600 p-12 items-center justify-center relative overflow-hidden\">\r\n          <div className=\"absolute inset-0 bg-gradient-to-br from-orange-400/90 via-orange-500/90 to-orange-600/90\" />\r\n          <div className=\"relative z-10 max-w-md text-white\">\r\n            <h1 className=\"text-4xl font-bold mb-4\">Invalid Link</h1>\r\n            <p className=\"text-lg opacity-90\">\r\n              This password reset link has expired or is invalid. Please request a new one.\r\n            </p>\r\n          </div>\r\n          {/* Decorative elements */}\r\n          <div className=\"absolute top-20 right-20 w-64 h-64 bg-orange-300 rounded-full mix-blend-multiply filter blur-xl opacity-30 animate-blob\" />\r\n          <div className=\"absolute bottom-20 left-20 w-64 h-64 bg-orange-300 rounded-full mix-blend-multiply filter blur-xl opacity-30 animate-blob animation-delay-2000\" />\r\n        </div>\r\n\r\n        {/* Right side - Error message */}\r\n        <div className=\"flex-1 flex items-center justify-center px-4 sm:px-6 lg:px-8 bg-white\">\r\n          <div className=\"max-w-md w-full space-y-8\">\r\n            <div className=\"text-center\">\r\n              <div className=\"mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100 mb-4\">\r\n                <svg className=\"h-6 w-6 text-red-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\r\n                </svg>\r\n              </div>\r\n              <h2 className=\"text-3xl font-extrabold text-gray-900\">\r\n                Invalid Reset Link\r\n              </h2>\r\n              <p className=\"mt-2 text-gray-600\">\r\n                This password reset link is invalid or has expired.\r\n              </p>\r\n              <Link \r\n                href=\"/forgot-password\"\r\n                className=\"mt-6 inline-block btn-firecrawl-default whitespace-nowrap rounded-[10px] text-sm font-medium transition-all duration-200 h-10 px-6 py-2\"\r\n              >\r\n                Request new reset link\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex\">\r\n      {/* Left side - Orange gradient */}\r\n      <div className=\"hidden lg:flex lg:w-1/2 bg-gradient-to-br from-orange-400 via-orange-500 to-orange-600 p-12 items-center justify-center relative overflow-hidden\">\r\n        <div className=\"absolute inset-0 bg-gradient-to-br from-orange-400/90 via-orange-500/90 to-orange-600/90\" />\r\n        <div className=\"relative z-10 max-w-md text-white\">\r\n          <h1 className=\"text-4xl font-bold mb-4\">Almost there!</h1>\r\n          <p className=\"text-lg opacity-90\">\r\n            Create a new password for your account. Make sure it's strong and unique.\r\n          </p>\r\n          <div className=\"mt-6 space-y-3\">\r\n            <div className=\"flex items-center text-white/80\">\r\n              <CheckCircle className=\"h-5 w-5 mr-3 flex-shrink-0\" />\r\n              <span className=\"text-sm\">At least 8 characters long</span>\r\n            </div>\r\n            <div className=\"flex items-center text-white/80\">\r\n              <CheckCircle className=\"h-5 w-5 mr-3 flex-shrink-0\" />\r\n              <span className=\"text-sm\">Mix of letters and numbers</span>\r\n            </div>\r\n            <div className=\"flex items-center text-white/80\">\r\n              <CheckCircle className=\"h-5 w-5 mr-3 flex-shrink-0\" />\r\n              <span className=\"text-sm\">Unique to this account</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* Decorative elements */}\r\n        <div className=\"absolute top-20 right-20 w-64 h-64 bg-orange-300 rounded-full mix-blend-multiply filter blur-xl opacity-30 animate-blob\" />\r\n        <div className=\"absolute bottom-20 left-20 w-64 h-64 bg-orange-300 rounded-full mix-blend-multiply filter blur-xl opacity-30 animate-blob animation-delay-2000\" />\r\n      </div>\r\n\r\n      {/* Right side - Form */}\r\n      <div className=\"flex-1 flex items-center justify-center px-4 sm:px-6 lg:px-8 bg-white\">\r\n        <div className=\"max-w-md w-full space-y-8\">\r\n          <div>\r\n            <div className=\"lg:hidden mb-8 flex justify-center\">\r\n              <Image\r\n                src=\"/logo_voxum.svg\"\r\n                alt=\"VOXUM\"\r\n                width={180}\r\n                height={37}\r\n                priority\r\n              />\r\n            </div>\r\n            <h2 className=\"text-center text-3xl font-extrabold text-gray-900\">\r\n              Reset your password\r\n            </h2>\r\n            <p className=\"mt-2 text-center text-sm text-gray-600\">\r\n              Enter your new password below\r\n            </p>\r\n          </div>\r\n          \r\n          <form className=\"mt-8 space-y-6\" onSubmit={handleSubmit}>\r\n            <div className=\"space-y-4\">\r\n              <div>\r\n                <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                  New password\r\n                </label>\r\n                <input\r\n                  id=\"password\"\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                  autoComplete=\"new-password\"\r\n                  required\r\n                  value={password}\r\n                  onChange={(e) => setPassword(e.target.value)}\r\n                  className=\"appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500 sm:text-sm\"\r\n                  placeholder=\"Enter new password\"\r\n                />\r\n              </div>\r\n              \r\n              <div>\r\n                <label htmlFor=\"confirmPassword\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                  Confirm new password\r\n                </label>\r\n                <input\r\n                  id=\"confirmPassword\"\r\n                  name=\"confirmPassword\"\r\n                  type=\"password\"\r\n                  autoComplete=\"new-password\"\r\n                  required\r\n                  value={confirmPassword}\r\n                  onChange={(e) => setConfirmPassword(e.target.value)}\r\n                  className=\"appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500 sm:text-sm\"\r\n                  placeholder=\"Confirm new password\"\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            {error && (\r\n              <div className=\"bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg\">\r\n                {error}\r\n              </div>\r\n            )}\r\n\r\n            <div>\r\n              <button\r\n                type=\"submit\"\r\n                disabled={loading}\r\n                className=\"btn-firecrawl-default w-full inline-flex items-center justify-center whitespace-nowrap rounded-[10px] text-sm font-medium transition-all duration-200 disabled:pointer-events-none disabled:opacity-50 h-10 px-4\"\r\n              >\r\n                {loading ? 'Resetting...' : 'Reset password'}\r\n              </button>\r\n            </div>\r\n\r\n            <div className=\"text-center\">\r\n              <Link href=\"/login\" className=\"text-sm text-orange-600 hover:text-orange-500 inline-flex items-center\">\r\n                <ArrowLeft className=\"mr-2 h-4 w-4\" />\r\n                Back to login\r\n              </Link>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function ResetPasswordPage() {\r\n  return (\r\n    <Suspense fallback={\r\n      <div className=\"min-h-screen flex items-center justify-center bg-white\">\r\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\r\n      </div>\r\n    }>\r\n      <ResetPasswordForm />\r\n    </Suspense>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\app\\api\\chat\\feedback\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2201,2204],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2201,2204],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/lib/auth';\r\nimport { db } from '@/lib/db';\r\nimport { messageFeedback, messages } from '@/lib/db/schema';\r\nimport { and, eq } from 'drizzle-orm';\r\n\r\n// POST /api/chat/feedback - Submit feedback for a message\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const session = await auth.api.getSession({\r\n      headers: request.headers,\r\n    });\r\n\r\n    if (!session?.user) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    const { messageId, helpful, rating, feedback } = await request.json();\r\n\r\n    if (!messageId) {\r\n      return NextResponse.json({ error: 'Message ID required' }, { status: 400 });\r\n    }\r\n\r\n    // Verify the message exists and belongs to the user\r\n    const message = await db.query.messages.findFirst({\r\n      where: and(\r\n        eq(messages.id, messageId),\r\n        eq(messages.userId, session.user.id)\r\n      ),\r\n    });\r\n\r\n    if (!message) {\r\n      return NextResponse.json({ error: 'Message not found' }, { status: 404 });\r\n    }\r\n\r\n    // Create or update feedback\r\n    const existingFeedback = await db.query.messageFeedback.findFirst({\r\n      where: and(\r\n        eq(messageFeedback.messageId, messageId),\r\n        eq(messageFeedback.userId, session.user.id)\r\n      ),\r\n    });\r\n\r\n    if (existingFeedback) {\r\n      // Update existing feedback\r\n      const [updated] = await db\r\n        .update(messageFeedback)\r\n        .set({\r\n          rating: rating || (helpful === true ? 5 : helpful === false ? 1 : existingFeedback.rating),\r\n          feedback: feedback || existingFeedback.feedback,\r\n        })\r\n        .where(eq(messageFeedback.id, existingFeedback.id))\r\n        .returning();\r\n\r\n      return NextResponse.json(updated);\r\n    } else {\r\n      // Create new feedback\r\n      const [created] = await db\r\n        .insert(messageFeedback)\r\n        .values({\r\n          messageId,\r\n          userId: session.user.id,\r\n          rating: rating || (helpful === true ? 5 : helpful === false ? 1 : null),\r\n          feedback,\r\n        })\r\n        .returning();\r\n\r\n      return NextResponse.json(created);\r\n    }\r\n  } catch (error: any) {\r\n    console.error('Feedback POST error:', error);\r\n    return NextResponse.json(\r\n      { error: error.message || 'Internal server error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\app\\api\\user\\settings\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ValidationError' is defined but never used.","line":6,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":62}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/lib/auth';\r\nimport { db } from '@/lib/db';\r\nimport { userSettings } from '@/lib/db/schema';\r\nimport { eq } from 'drizzle-orm';\r\nimport { handleApiError, AuthenticationError, ValidationError } from '@/lib/api-errors';\r\n\r\n// GET /api/user/settings - Get user settings\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const session = await auth.api.getSession({\r\n      headers: request.headers,\r\n    });\r\n\r\n    if (!session?.user) {\r\n      throw new AuthenticationError('Please log in to access settings');\r\n    }\r\n\r\n    const settings = await db.query.userSettings.findFirst({\r\n      where: eq(userSettings.userId, session.user.id),\r\n    });\r\n\r\n    // Return default settings if none exist\r\n    if (!settings) {\r\n      return NextResponse.json({\r\n        theme: 'light',\r\n        emailNotifications: true,\r\n        marketingEmails: false,\r\n        defaultModel: 'gpt-3.5-turbo',\r\n        metadata: {},\r\n      });\r\n    }\r\n\r\n    return NextResponse.json(settings);\r\n  } catch (error) {\r\n    return handleApiError(error);\r\n  }\r\n}\r\n\r\n// PUT /api/user/settings - Update user settings\r\nexport async function PUT(request: NextRequest) {\r\n  try {\r\n    const session = await auth.api.getSession({\r\n      headers: request.headers,\r\n    });\r\n\r\n    if (!session?.user) {\r\n      throw new AuthenticationError('Please log in to access settings');\r\n    }\r\n\r\n    const data = await request.json();\r\n    const { theme, emailNotifications, marketingEmails, defaultModel, metadata } = data;\r\n\r\n    // Validate theme\r\n    if (theme && !['light', 'dark'].includes(theme)) {\r\n      return NextResponse.json({ error: 'Invalid theme value' }, { status: 400 });\r\n    }\r\n\r\n    // Upsert user settings\r\n    const [updatedSettings] = await db\r\n      .insert(userSettings)\r\n      .values({\r\n        userId: session.user.id,\r\n        theme: theme || 'light',\r\n        emailNotifications: emailNotifications ?? true,\r\n        marketingEmails: marketingEmails ?? false,\r\n        defaultModel: defaultModel || 'gpt-3.5-turbo',\r\n        metadata: metadata || {},\r\n      })\r\n      .onConflictDoUpdate({\r\n        target: userSettings.userId,\r\n        set: {\r\n          theme,\r\n          emailNotifications,\r\n          marketingEmails,\r\n          defaultModel,\r\n          metadata,\r\n          updatedAt: new Date(),\r\n        },\r\n      })\r\n      .returning();\r\n\r\n    return NextResponse.json(updatedSettings);\r\n  } catch (error) {\r\n    return handleApiError(error);\r\n  }\r\n}\r\n\r\n// PATCH /api/user/settings - Partial update\r\nexport async function PATCH(request: NextRequest) {\r\n  try {\r\n    const session = await auth.api.getSession({\r\n      headers: request.headers,\r\n    });\r\n\r\n    if (!session?.user) {\r\n      throw new AuthenticationError('Please log in to access settings');\r\n    }\r\n\r\n    const updates = await request.json();\r\n    \r\n    // Remove any fields that shouldn't be updated\r\n    delete updates.id;\r\n    delete updates.userId;\r\n    delete updates.createdAt;\r\n\r\n    // Validate theme if provided\r\n    if (updates.theme && !['light', 'dark'].includes(updates.theme)) {\r\n      return NextResponse.json({ error: 'Invalid theme value' }, { status: 400 });\r\n    }\r\n\r\n    if (Object.keys(updates).length === 0) {\r\n      return NextResponse.json({ error: 'No valid fields to update' }, { status: 400 });\r\n    }\r\n\r\n    // Check if settings exist\r\n    const existingSettings = await db.query.userSettings.findFirst({\r\n      where: eq(userSettings.userId, session.user.id),\r\n    });\r\n\r\n    if (!existingSettings) {\r\n      // Create new settings with partial data\r\n      const [newSettings] = await db\r\n        .insert(userSettings)\r\n        .values({\r\n          userId: session.user.id,\r\n          ...updates,\r\n        })\r\n        .returning();\r\n      \r\n      return NextResponse.json(newSettings);\r\n    }\r\n\r\n    // Update existing settings\r\n    const [updatedSettings] = await db\r\n      .update(userSettings)\r\n      .set({\r\n        ...updates,\r\n        updatedAt: new Date(),\r\n      })\r\n      .where(eq(userSettings.userId, session.user.id))\r\n      .returning();\r\n\r\n    return NextResponse.json(updatedSettings);\r\n  } catch (error) {\r\n    return handleApiError(error);\r\n  }\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\components\\autumn\\attach-dialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[743,746],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[743,746],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":141,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5377,5380],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5377,5380],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'className' is defined but never used.","line":207,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":207,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'props' is defined but never used.","line":212,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":212,"endColumn":11}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { ArrowRight, Loader2 } from \"lucide-react\";\r\nimport { type CheckProductPreview } from \"autumn-js\";\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogFooter,\r\n  DialogTitle,\r\n} from \"@/components/ui/dialog\";\r\nimport { getAttachContent } from \"@/lib/autumn/attach-content\";\r\nimport { useCustomer } from \"@/hooks/useAutumnCustomer\";\r\nimport { isNetworkError } from \"@/lib/network-utils\";\r\nimport { useTranslations } from \"next-intl\";\r\n\r\nexport interface AttachDialogProps {\r\n  open: boolean;\r\n  setOpen: (open: boolean) => void;\r\n  preview: CheckProductPreview;\r\n  onClick: (options?: any) => Promise<void>;\r\n}\r\n\r\nexport default function AttachDialog(params?: AttachDialogProps) {\r\n  const { attach, refetch } = useCustomer();\r\n  const [loading, setLoading] = useState(false);\r\n  const tErrors = useTranslations('errors');\r\n  const [optionsInput, setOptionsInput] = useState<FeatureOption[]>(\r\n    params?.preview?.options || []\r\n  );\r\n\r\n  const getTotalPrice = () => {\r\n    let sum = due_today?.price || 0;\r\n    optionsInput.forEach((option) => {\r\n      if (option.price && option.quantity) {\r\n        sum += option.price * (option.quantity / option.billing_units);\r\n      }\r\n    });\r\n    return sum;\r\n  };\r\n\r\n  useEffect(() => {\r\n    setOptionsInput(params?.preview?.options || []);\r\n  }, [params?.preview?.options]);\r\n\r\n  if (!params || !params.preview) {\r\n    return <></>;\r\n  }\r\n\r\n  const { open, setOpen, preview } = params;\r\n  const { items, due_today } = preview;\r\n  const { title, message } = getAttachContent(preview);\r\n\r\n  return (\r\n    <Dialog open={open} onOpenChange={setOpen}>\r\n      <DialogContent\r\n        className={cn(\r\n          \"p-0 pt-4 gap-0 text-foreground overflow-hidden text-sm\"\r\n        )}\r\n      >\r\n        <DialogTitle className={cn(\"px-6 mb-1 \")}>{title}</DialogTitle>\r\n        <div className={cn(\"px-6 mt-1 mb-4 text-muted-foreground\")}>\r\n          {message}\r\n        </div>\r\n        {(items || optionsInput.length > 0) && (\r\n          <div className=\"mb-6 px-6\">\r\n            {items?.map((item) => (\r\n              <PriceItem key={item.description}>\r\n                <span className=\"truncate flex-1\">\r\n                  {item.description}\r\n                </span>\r\n                <span>{item.price}</span>\r\n              </PriceItem>\r\n            ))}\r\n\r\n            {optionsInput?.map((option, index) => {\r\n              return (\r\n                <OptionsInput\r\n                  key={option.feature_name}\r\n                  option={option as FeatureOptionWithRequiredPrice}\r\n                  optionsInput={optionsInput}\r\n                  setOptionsInput={setOptionsInput}\r\n                  index={index}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n        )}\r\n\r\n        <DialogFooter className=\"flex flex-col sm:flex-row justify-between gap-x-4 py-2 pl-6 pr-3 bg-secondary border-t shadow-inner\">\r\n          {due_today && (\r\n            <TotalPrice>\r\n              <span>Due Today</span>\r\n              <span>\r\n                {new Intl.NumberFormat(\"en-US\", {\r\n                  style: \"currency\",\r\n                  currency: due_today.currency,\r\n                }).format(getTotalPrice())}\r\n              </span>\r\n            </TotalPrice>\r\n          )}\r\n          <button\r\n            onClick={async () => {\r\n              setLoading(true);\r\n              try {\r\n                await attach({\r\n                  productId: preview.product_id,\r\n                  options: optionsInput.map((option) => ({\r\n                    featureId: option.feature_id,\r\n                    quantity: option.quantity || 0,\r\n                  })),\r\n                  returnUrl: window.location.origin + '/dashboard',\r\n                  successUrl: window.location.origin + '/dashboard',\r\n                  cancelUrl: window.location.origin + '/plans',\r\n                });\r\n                setOpen(false);\r\n                \r\n                // Refresh customer data to update credits in navbar\r\n                await refetch();\r\n                \r\n                // Show success message based on scenario\r\n                if (preview.scenario === 'downgrade') {\r\n                  alert(`Downgrade scheduled! Your plan will change to ${preview.product_name} on ${new Date(preview.next_cycle_at!).toLocaleDateString()}.`);\r\n                  // Redirect to dashboard after downgrade\r\n                  window.location.href = '/dashboard';\r\n                } else if (preview.scenario === 'upgrade') {\r\n                  alert(`Upgrade successful! You're now on the ${preview.product_name} plan.`);\r\n                  // Redirect to dashboard after upgrade\r\n                  window.location.href = '/dashboard';\r\n                }\r\n              } catch (error) {\r\n                console.error('Error attaching product:', error);\r\n                \r\n                // Check if it's a network error and show appropriate message\r\n                let errorMessage = 'An error occurred. Please try again or contact support.';\r\n                if (isNetworkError(error)) {\r\n                  errorMessage = tErrors('connectionLost');\r\n                } else if (error && typeof error === 'object' && 'message' in error) {\r\n                  const apiError = error as any;\r\n                  if (apiError.message?.includes('internet') || apiError.message?.includes('connection')) {\r\n                    errorMessage = tErrors('noInternetConnection');\r\n                  }\r\n                }\r\n                \r\n                alert(errorMessage);\r\n              } finally {\r\n                setLoading(false);\r\n              }\r\n            }}\r\n            disabled={loading}\r\n            className=\"btn-firecrawl-orange inline-flex items-center justify-center whitespace-nowrap rounded-[10px] text-sm font-medium transition-all duration-200 h-8 px-4 min-w-16 gap-2 disabled:pointer-events-none disabled:opacity-50\"\r\n          >\r\n            {loading ? (\r\n              <Loader2 className=\"w-4 h-4 animate-spin\" />\r\n            ) : (\r\n              <>\r\n                <span className=\"whitespace-nowrap flex gap-1\">\r\n                  Confirm\r\n                </span>\r\n              </>\r\n            )}\r\n          </button>\r\n        </DialogFooter>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nexport const PriceItem = ({\r\n  children,\r\n  className,\r\n  ...props\r\n}: {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n} & React.HTMLAttributes<HTMLDivElement>) => {\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"flex flex-col pb-4 sm:pb-0 gap-1 sm:flex-row justify-between sm:h-7 sm:gap-2 sm:items-center\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface FeatureOption {\r\n  feature_id: string;\r\n  feature_name: string;\r\n  billing_units: number;\r\n  price?: number;\r\n  quantity?: number;\r\n}\r\n\r\ninterface FeatureOptionWithRequiredPrice\r\n  extends Omit<FeatureOption, \"price\" | \"quantity\"> {\r\n  price: number;\r\n  quantity: number;\r\n}\r\n\r\nexport const OptionsInput = ({\r\n  className,\r\n  option,\r\n  optionsInput,\r\n  setOptionsInput,\r\n  index,\r\n  ...props\r\n}: {\r\n  className?: string;\r\n  option: FeatureOptionWithRequiredPrice;\r\n  optionsInput: FeatureOption[];\r\n  setOptionsInput: (options: FeatureOption[]) => void;\r\n  index: number;\r\n} & React.HTMLAttributes<HTMLDivElement>) => {\r\n  const { feature_name, billing_units, quantity, price } = option;\r\n  return (\r\n    <PriceItem key={feature_name}>\r\n      <span>{feature_name}</span>\r\n      <QuantityInput\r\n        key={feature_name}\r\n        value={quantity ? quantity / billing_units : \"\"}\r\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n          const newOptions = [...optionsInput];\r\n          newOptions[index].quantity = parseInt(e.target.value) * billing_units;\r\n          setOptionsInput(newOptions);\r\n        }}\r\n      >\r\n        <span className=\"\">\r\n          × ${price} per {billing_units === 1 ? \" \" : billing_units}{\" \"}\r\n          {feature_name}\r\n        </span>\r\n      </QuantityInput>\r\n    </PriceItem>\r\n  );\r\n};\r\n\r\nexport const QuantityInput = ({\r\n  children,\r\n  onChange,\r\n  value,\r\n  className,\r\n  ...props\r\n}: {\r\n  children: React.ReactNode;\r\n  value: string | number;\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  className?: string;\r\n} & React.HTMLAttributes<HTMLDivElement>) => {\r\n  const currentValue = Number(value) || 0;\r\n\r\n  const handleValueChange = (newValue: number) => {\r\n    const syntheticEvent = {\r\n      target: { value: String(newValue) },\r\n    } as React.ChangeEvent<HTMLInputElement>;\r\n    onChange(syntheticEvent);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={cn(className, \"flex flex-row items-center gap-4\")}\r\n      {...props}\r\n    >\r\n      <div className=\"flex items-center gap-1\">\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"icon\"\r\n          onClick={() =>\r\n            currentValue > 0 && handleValueChange(currentValue - 1)\r\n          }\r\n          disabled={currentValue <= 0}\r\n          className=\"h-6 w-6 pb-0.5\"\r\n        >\r\n          -\r\n        </Button>\r\n        <span className=\"w-8 text-center text-foreground\">\r\n          {currentValue}\r\n        </span>\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"icon\"\r\n          onClick={() => handleValueChange(currentValue + 1)}\r\n          className=\"h-6 w-6 pb-0.5\"\r\n        >\r\n          +\r\n        </Button>\r\n      </div>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const TotalPrice = ({ children }: { children: React.ReactNode }) => {\r\n  return (\r\n    <div className=\"w-full font-semibold flex justify-between items-center\">\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const PricingDialogButton = ({\r\n  children,\r\n  size,\r\n  onClick,\r\n  disabled,\r\n  className,\r\n}: {\r\n  children: React.ReactNode;\r\n  size?: \"sm\" | \"lg\" | \"default\" | \"icon\";\r\n  onClick: () => void;\r\n  disabled?: boolean;\r\n  className?: string;\r\n}) => {\r\n  return (\r\n    <Button\r\n      onClick={onClick}\r\n      disabled={disabled}\r\n      size={size}\r\n      className={cn(className, \"shadow-sm shadow-stone-400\")}\r\n    >\r\n      {children}\r\n      <ArrowRight className=\"!h-3\" />\r\n    </Button>\r\n  );\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\components\\autumn\\pricing-table.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[729,732],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[729,732],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1732,1735],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1732,1735],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2232,2235],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2232,2235],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'items' is assigned a value but never used.","line":212,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":212,"endColumn":47}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React from \"react\";\r\n\r\nimport { usePricingTable } from \"autumn-js/react\";\r\nimport { useCustomer } from \"@/hooks/useAutumnCustomer\";\r\nimport { createContext, useContext, useState } from \"react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Switch } from \"@/components/ui/switch\";\r\nimport { Check, Loader2 } from \"lucide-react\";\r\nimport AttachDialog from \"@/components/autumn/attach-dialog\";\r\nimport { getPricingTableContent } from \"@/lib/autumn/pricing-table-content\";\r\nimport { Product, ProductItem } from \"autumn-js\";\r\nimport { isNetworkError } from \"@/lib/network-utils\";\r\nimport { useTranslations } from \"next-intl\";\r\nexport default function PricingTable({\r\n  productDetails,\r\n}: {\r\n  productDetails?: any;\r\n}) {\r\n  const { attach } = useCustomer();\r\n  const [isAnnual, setIsAnnual] = useState(false);\r\n  const { products, isLoading, error } = usePricingTable({ productDetails });\r\n  const tErrors = useTranslations('errors');\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"w-full h-full flex justify-center items-center min-h-[300px]\">\r\n        <Loader2 className=\"w-6 h-6 text-zinc-400 animate-spin\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    let errorMessage = 'Something went wrong...';\r\n    if (isNetworkError(error)) {\r\n      errorMessage = tErrors('noInternetConnection');\r\n    }\r\n    return <div className=\"text-center p-4 text-red-600\">{errorMessage}</div>;\r\n  }\r\n\r\n  const visibleProducts = (products || []).filter((p) => p.id !== 'free');\r\n\r\n  const intervals = Array.from(\r\n    new Set(\r\n      visibleProducts?.map((p) => p.properties?.interval_group).filter((i) => !!i)\r\n    )\r\n  );\r\n\r\n  const multiInterval = intervals.length > 1;\r\n\r\n  const intervalFilter = (product: any) => {\r\n    if (!product.properties?.interval_group) {\r\n      return true;\r\n    }\r\n\r\n    if (multiInterval) {\r\n      if (isAnnual) {\r\n        return product.properties?.interval_group === \"year\";\r\n      } else {\r\n        return product.properties?.interval_group === \"month\";\r\n      }\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  return (\r\n    <div className={cn(\"root\")}>\r\n      {visibleProducts && visibleProducts.length > 0 && (\r\n        <PricingTableContainer\r\n          products={visibleProducts as any}\r\n          isAnnualToggle={isAnnual}\r\n          setIsAnnualToggle={setIsAnnual}\r\n          multiInterval={multiInterval}\r\n        >\r\n          {visibleProducts.filter(intervalFilter).map((product, index) => (\r\n            <PricingCard\r\n              key={index}\r\n              productId={product.id}\r\n              buttonProps={{\r\n                disabled:\r\n                  product.scenario === \"active\" ||\r\n                  product.scenario === \"scheduled\",\r\n\r\n                onClick: async () => {\r\n                  if (product.id) {\r\n                    await attach({\r\n                      productId: product.id,\r\n                      dialog: AttachDialog,\r\n                      returnUrl: window.location.origin + '/dashboard',\r\n                      successUrl: window.location.origin + '/dashboard',\r\n                      cancelUrl: window.location.origin + '/pricing',\r\n                    });\r\n                  } else if (product.display?.button_url) {\r\n                    window.open(product.display?.button_url, \"_blank\");\r\n                  }\r\n                },\r\n              }}\r\n            />\r\n          ))}\r\n        </PricingTableContainer>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst PricingTableContext = createContext<{\r\n  isAnnualToggle: boolean;\r\n  setIsAnnualToggle: (isAnnual: boolean) => void;\r\n  products: Product[];\r\n  showFeatures: boolean;\r\n}>({\r\n  isAnnualToggle: false,\r\n  setIsAnnualToggle: () => {},\r\n  products: [],\r\n  showFeatures: true,\r\n});\r\n\r\nexport const usePricingTableContext = (componentName: string) => {\r\n  const context = useContext(PricingTableContext);\r\n\r\n  if (context === undefined) {\r\n    throw new Error(`${componentName} must be used within <PricingTable />`);\r\n  }\r\n\r\n  return context;\r\n};\r\n\r\nexport const PricingTableContainer = ({\r\n  children,\r\n  products,\r\n  showFeatures = true,\r\n  className,\r\n  isAnnualToggle,\r\n  setIsAnnualToggle,\r\n  multiInterval,\r\n}: {\r\n  children?: React.ReactNode;\r\n  products?: Product[];\r\n  showFeatures?: boolean;\r\n  className?: string;\r\n  isAnnualToggle: boolean;\r\n  setIsAnnualToggle: (isAnnual: boolean) => void;\r\n  multiInterval: boolean;\r\n}) => {\r\n  if (!products) {\r\n    throw new Error(\"products is required in <PricingTable />\");\r\n  }\r\n\r\n  if (products.length === 0) {\r\n    return <></>;\r\n  }\r\n\r\n  const hasRecommended = products?.some((p) => p.display?.recommend_text);\r\n  return (\r\n    <PricingTableContext.Provider\r\n      value={{ isAnnualToggle, setIsAnnualToggle, products, showFeatures }}\r\n    >\r\n      <div\r\n        className={cn(\r\n          \"flex items-center flex-col\",\r\n          hasRecommended && \"!py-10\"\r\n        )}\r\n      >\r\n        {multiInterval && (\r\n          <div\r\n            className={cn(\r\n              products.some((p) => p.display?.recommend_text) && \"mb-8\"\r\n            )}\r\n          >\r\n            <AnnualSwitch\r\n              isAnnualToggle={isAnnualToggle}\r\n              setIsAnnualToggle={setIsAnnualToggle}\r\n            />\r\n          </div>\r\n        )}\r\n        <div\r\n          className={cn(\r\n            \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-[repeat(auto-fit,minmax(200px,1fr))] w-full gap-2\",\r\n            className\r\n          )}\r\n        >\r\n          {children}\r\n        </div>\r\n      </div>\r\n    </PricingTableContext.Provider>\r\n  );\r\n};\r\n\r\ninterface PricingCardProps {\r\n  productId: string;\r\n  showFeatures?: boolean;\r\n  className?: string;\r\n  onButtonClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;\r\n  buttonProps?: React.ComponentProps<\"button\">;\r\n}\r\n\r\nexport const PricingCard = ({\r\n  productId,\r\n  className,\r\n  buttonProps,\r\n}: PricingCardProps) => {\r\n  const { products, showFeatures } = usePricingTableContext(\"PricingCard\");\r\n\r\n  const product = products.find((p) => p.id === productId);\r\n\r\n  if (!product) {\r\n    throw new Error(`Product with id ${productId} not found`);\r\n  }\r\n\r\n  const { name, display: productDisplay, items } = product;\r\n\r\n  const { buttonText } = getPricingTableContent(product);\r\n  const isRecommended = productDisplay?.recommend_text ? true : false;\r\n  const mainPriceDisplay = product.properties?.is_free\r\n    ? {\r\n        primary_text: \"Free\",\r\n      }\r\n    : product.items[0].display;\r\n\r\n  const featureItems = product.properties?.is_free\r\n    ? product.items\r\n    : product.items.slice(1);\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \" w-full h-full py-6 text-foreground border rounded-lg shadow-sm max-w-xl\",\r\n        isRecommended &&\r\n          \"lg:-translate-y-6 lg:shadow-lg dark:shadow-zinc-800/80 lg:h-[calc(100%+48px)] bg-secondary/40\",\r\n        className\r\n      )}\r\n    >\r\n      {productDisplay?.recommend_text && (\r\n        <RecommendedBadge recommended={productDisplay?.recommend_text} />\r\n      )}\r\n      <div\r\n        className={cn(\r\n          \"flex flex-col h-full flex-grow\",\r\n          isRecommended && \"lg:translate-y-6\"\r\n        )}\r\n      >\r\n        <div className=\"h-full\">\r\n          <div className=\"flex flex-col\">\r\n            <div className=\"pb-4\">\r\n              <h2 className=\"text-2xl font-semibold px-6 truncate\">\r\n                {productDisplay?.name || name}\r\n              </h2>\r\n              {productDisplay?.description && (\r\n                <div className=\"text-sm text-muted-foreground px-6 h-8\">\r\n                  <p className=\"line-clamp-2\">\r\n                    {productDisplay?.description}\r\n                  </p>\r\n                </div>\r\n              )}\r\n            </div>\r\n            <div className=\"mb-2\">\r\n              <h3 className=\"font-semibold h-16 flex px-6 items-center border-y mb-4 bg-secondary/40\">\r\n                <div className=\"line-clamp-2\">\r\n                  {mainPriceDisplay?.primary_text}{\" \"}\r\n                  {mainPriceDisplay?.secondary_text && (\r\n                    <span className=\"font-normal text-muted-foreground mt-1\">\r\n                      {mainPriceDisplay?.secondary_text}\r\n                    </span>\r\n                  )}\r\n                </div>\r\n              </h3>\r\n            </div>\r\n          </div>\r\n          {showFeatures && featureItems.length > 0 && (\r\n            <div className=\"flex-grow px-6 mb-6\">\r\n              <PricingFeatureList\r\n                items={featureItems}\r\n                showIcon={true}\r\n                everythingFrom={product.display?.everything_from}\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div\r\n          className={cn(\" px-6 \", isRecommended && \"lg:-translate-y-12\")}\r\n        >\r\n          <PricingCardButton\r\n            recommended={productDisplay?.recommend_text ? true : false}\r\n            {...buttonProps}\r\n          >\r\n            {productDisplay?.button_text || buttonText}\r\n          </PricingCardButton>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Pricing Feature List\r\nexport const PricingFeatureList = ({\r\n  items,\r\n  showIcon = true,\r\n  everythingFrom,\r\n  className,\r\n}: {\r\n  items: ProductItem[];\r\n  showIcon?: boolean;\r\n  everythingFrom?: string;\r\n  className?: string;\r\n}) => {\r\n  return (\r\n    <div className={cn(\"flex-grow\", className)}>\r\n      {everythingFrom && (\r\n        <p className=\"text-sm mb-4\">\r\n          Everything from {everythingFrom}, plus:\r\n        </p>\r\n      )}\r\n      <div className=\"space-y-3\">\r\n        {items.map((item, index) => (\r\n          <div\r\n            key={index}\r\n            className=\"flex items-start gap-2 text-sm\"\r\n          >\r\n            {showIcon && (\r\n              <Check className=\"h-4 w-4 text-primary flex-shrink-0 mt-0.5\" />\r\n            )}\r\n            <div className=\"flex flex-col\">\r\n              <span>{item.display?.primary_text}</span>\r\n              {item.display?.secondary_text && (\r\n                <span className=\"text-sm text-muted-foreground\">\r\n                  {item.display?.secondary_text}\r\n                </span>\r\n              )}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Pricing Card Button\r\nexport interface PricingCardButtonProps extends React.ComponentProps<\"button\"> {\r\n  recommended?: boolean;\r\n  buttonUrl?: string;\r\n}\r\n\r\nexport const PricingCardButton = React.forwardRef<\r\n  HTMLButtonElement,\r\n  PricingCardButtonProps\r\n>(({ recommended, children, className, onClick, ...props }, ref) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const tErrors = useTranslations('errors');\r\n\r\n  const handleClick = async (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    setLoading(true);\r\n    try {\r\n      await onClick?.(e);\r\n    } catch (error) {\r\n      console.error(error);\r\n      \r\n      // Show user-friendly error message for network issues\r\n      if (isNetworkError(error)) {\r\n        alert(tErrors('connectionLost'));\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <button\r\n      className={cn(\r\n        \"w-full py-3 px-4 group overflow-hidden relative transition-all duration-300 border rounded-[10px] inline-flex items-center justify-center whitespace-nowrap text-sm font-medium disabled:pointer-events-none disabled:opacity-50\",\r\n        recommended ? \"btn-firecrawl-orange\" : \"btn-firecrawl-default\",\r\n        className\r\n      )}\r\n      {...props}\r\n      data-primary={recommended ? \"true\" : \"false\"}\r\n      ref={ref}\r\n      disabled={loading || props.disabled}\r\n      onClick={handleClick}\r\n    >\r\n      {loading ? (\r\n        <div className=\"flex items-center justify-center\">\r\n          <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\r\n          <span>Loading checkout...</span>\r\n        </div>\r\n      ) : (\r\n        <div className=\"flex items-center justify-between w-full\">\r\n          <span>{children}</span>\r\n          <span className=\"text-sm transition-transform duration-300 group-hover:translate-x-1\">→</span>\r\n        </div>\r\n      )}\r\n    </button>\r\n  );\r\n});\r\nPricingCardButton.displayName = \"PricingCardButton\";\r\n\r\n// Annual Switch\r\nexport const AnnualSwitch = ({\r\n  isAnnualToggle,\r\n  setIsAnnualToggle,\r\n}: {\r\n  isAnnualToggle: boolean;\r\n  setIsAnnualToggle: (isAnnual: boolean) => void;\r\n}) => {\r\n  return (\r\n    <div className=\"flex items-center space-x-2 mb-4\">\r\n      <span className=\"text-sm text-muted-foreground\">Monthly</span>\r\n      <Switch\r\n        id=\"annual-billing\"\r\n        checked={isAnnualToggle}\r\n        onCheckedChange={setIsAnnualToggle}\r\n      />\r\n      <span className=\"text-sm text-muted-foreground\">Annual</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const RecommendedBadge = ({ recommended }: { recommended: string }) => {\r\n  return (\r\n    <div className=\"bg-black absolute border text-white text-sm font-medium lg:rounded-full px-3 lg:py-0.5 lg:top-4 lg:right-4 top-[-1px] right-[-1px] rounded-bl-lg\">\r\n      {recommended}\r\n    </div>\r\n  );\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\components\\brand-monitor\\api-usage-summary.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getOperationName' is assigned a value but never used.","line":58,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":25},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":152,"column":26,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5607,5654],"text":"\n              Par phase d&apos;analyse\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5607,5654],"text":"\n              Par phase d&lsquo;analyse\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5607,5654],"text":"\n              Par phase d&#39;analyse\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5607,5654],"text":"\n              Par phase d&rsquo;analyse\n            "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { ChevronDown, ChevronUp, DollarSign, Clock, Zap, AlertCircle } from 'lucide-react';\n\nexport interface ApiUsageSummaryData {\n  totalCalls: number;\n  totalCost: number;\n  totalDuration: number;\n  byProvider: Record<string, {\n    calls: number;\n    cost: number;\n    tokens: { input: number; output: number };\n  }>;\n  byOperation: Record<string, {\n    calls: number;\n    cost: number;\n    providers: string[];\n  }>;\n  byPhase: Record<string, {\n    calls: number;\n    cost: number;\n    duration: number;\n    providers: string[];\n    averageCostPerCall?: number;\n    promptAnalysis?: {\n      totalPrompts: number;\n      averageCostPerPrompt: number;\n    };\n  }>;\n  errors: number;\n}\n\ninterface ApiUsageSummaryProps {\n  summary: ApiUsageSummaryData | null;\n}\n\nexport function ApiUsageSummary({ summary }: ApiUsageSummaryProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  if (!summary) return null;\n\n  // Vérifier que les propriétés nécessaires existent et les initialiser si nécessaire\n  const safeSummary = {\n    ...summary,\n    byPhase: summary.byPhase || {},\n    byProvider: summary.byProvider || {},\n    byOperation: summary.byOperation || {}\n  };\n\n  const formatCost = (cost: number) => `$${cost.toFixed(4)}`;\n  const formatDuration = (ms: number) => `${(ms / 1000).toFixed(2)}s`;\n  const formatTokens = (tokens: number) => tokens.toLocaleString();\n\n  const getOperationName = (operation: string) => {\n    const names: Record<string, string> = {\n      'scrape': 'Scraping initial',\n      'competitor_search': 'Recherche de concurrents',\n      'prompt_generation': 'Génération de prompts',\n      'analysis': 'Analyse des résultats',\n      'brand_canonicalization': 'Normalisation des marques',\n      'brand_cleaning': 'Nettoyage des marques',\n      'brand_extraction': 'Extraction des marques',\n      'structured_analysis': 'Analyse structurée'\n    };\n    return names[operation] || operation;\n  };\n\n  const getPhaseName = (phase: string) => {\n    const names: Record<string, string> = {\n      'url_analysis': 'Analyse de l\\'URL',\n      'competitor_search': 'Trouver concurrents',\n      'prompt_generation': 'Génération de prompts',\n      'prompt_analysis': 'Analyse des prompts',\n      'result_analysis': 'Analyse des résultats'\n    };\n    return names[phase] || phase;\n  };\n\n  const getProviderIcon = (provider: string) => {\n    const icons: Record<string, string> = {\n      'openai': '🤖',\n      'anthropic': '🧠',\n      'perplexity': '🔍',\n      'google': '🔬',\n      'firecrawl': '🕷️'\n    };\n    return icons[provider.toLowerCase()] || '⚡';\n  };\n\n  return (\n    <Card className=\"w-full border-l-4 border-l-orange-500 bg-orange-50/50\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <DollarSign className=\"w-5 h-5 text-orange-600\" />\n            <CardTitle className=\"text-lg font-semibold text-orange-800\">\n              Résumé des coûts API\n            </CardTitle>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            {safeSummary.errors > 0 && (\n              <Badge variant=\"destructive\" className=\"flex items-center gap-1\">\n                <AlertCircle className=\"w-3 h-3\" />\n                {safeSummary.errors} erreur{safeSummary.errors > 1 ? 's' : ''}\n              </Badge>\n            )}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsExpanded(!isExpanded)}\n              className=\"text-orange-600 hover:text-orange-700\"\n            >\n              {isExpanded ? <ChevronUp className=\"w-4 h-4\" /> : <ChevronDown className=\"w-4 h-4\" />}\n            </Button>\n          </div>\n        </div>\n        <CardDescription className=\"text-orange-700\">\n          Détail des appels API et coûts pour cette analyse\n        </CardDescription>\n      </CardHeader>\n\n      {isExpanded && (\n        <CardContent className=\"pt-0 space-y-6\">\n          {/* Statistiques générales */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"text-center p-3 bg-white rounded-lg border\">\n              <div className=\"text-2xl font-bold text-orange-600\">{safeSummary.totalCalls}</div>\n              <div className=\"text-sm text-gray-600\">Appels totaux</div>\n            </div>\n            <div className=\"text-center p-3 bg-white rounded-lg border\">\n              <div className=\"text-2xl font-bold text-green-600\">{formatCost(safeSummary.totalCost)}</div>\n              <div className=\"text-sm text-gray-600\">Coût total</div>\n            </div>\n            <div className=\"text-center p-3 bg-white rounded-lg border\">\n              <div className=\"text-2xl font-bold text-blue-600\">{formatDuration(safeSummary.totalDuration)}</div>\n              <div className=\"text-sm text-gray-600\">Durée totale</div>\n            </div>\n            <div className=\"text-center p-3 bg-white rounded-lg border\">\n              <div className=\"text-2xl font-bold text-purple-600\">{Object.keys(safeSummary.byProvider).length}</div>\n              <div className=\"text-sm text-gray-600\">Providers utilisés</div>\n            </div>\n          </div>\n\n          {/* Par phase */}\n          <div>\n            <h4 className=\"font-semibold text-gray-800 mb-3 flex items-center gap-2\">\n              <Zap className=\"w-4 h-4\" />\n              Par phase d'analyse\n            </h4>\n            <div className=\"space-y-3\">\n              {Object.entries(safeSummary.byPhase).map(([phase, data]) => (\n                <div key={phase} className=\"p-4 bg-white rounded-lg border\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"w-3 h-3 bg-orange-500 rounded-full\"></div>\n                      <span className=\"font-semibold text-gray-800\">{getPhaseName(phase)}</span>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {data.calls} appel{data.calls > 1 ? 's' : ''}\n                      </Badge>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"font-bold text-green-600 text-lg\">{formatCost(data.cost)}</div>\n                      <div className=\"text-xs text-gray-500\">\n                        {data.providers.map(p => getProviderIcon(p)).join(' ')}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {/* Métriques détaillées */}\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3 mt-3 text-sm\">\n                    <div className=\"text-center p-2 bg-gray-50 rounded\">\n                      <div className=\"font-semibold text-gray-700\">{data.calls}</div>\n                      <div className=\"text-xs text-gray-500\">Appels</div>\n                    </div>\n                    <div className=\"text-center p-2 bg-gray-50 rounded\">\n                      <div className=\"font-semibold text-gray-700\">{formatDuration(data.duration)}</div>\n                      <div className=\"text-xs text-gray-500\">Durée</div>\n                    </div>\n                    <div className=\"text-center p-2 bg-gray-50 rounded\">\n                      <div className=\"font-semibold text-gray-700\">{formatCost(data.averageCostPerCall || 0)}</div>\n                      <div className=\"text-xs text-gray-500\">Coût moyen/appel</div>\n                    </div>\n                    <div className=\"text-center p-2 bg-gray-50 rounded\">\n                      <div className=\"font-semibold text-gray-700\">{data.providers.length}</div>\n                      <div className=\"text-xs text-gray-500\">Providers</div>\n                    </div>\n                  </div>\n\n                  {/* Métriques spéciales pour l'analyse des prompts */}\n                  {phase === 'prompt_analysis' && data.promptAnalysis && (\n                    <div className=\"mt-3 p-3 bg-blue-50 rounded-lg border-l-4 border-blue-400\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                        <span className=\"font-medium text-blue-800\">Analyse des prompts</span>\n                      </div>\n                      <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                        <div>\n                          <div className=\"font-semibold text-blue-700\">{data.promptAnalysis.totalPrompts}</div>\n                          <div className=\"text-xs text-blue-600\">Prompts analysés</div>\n                        </div>\n                        <div>\n                          <div className=\"font-semibold text-blue-700\">{formatCost(data.promptAnalysis.averageCostPerPrompt)}</div>\n                          <div className=\"text-xs text-blue-600\">Coût moyen/prompt</div>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Par provider */}\n          <div>\n            <h4 className=\"font-semibold text-gray-800 mb-3 flex items-center gap-2\">\n              <Clock className=\"w-4 h-4\" />\n              Par provider\n            </h4>\n            <div className=\"space-y-2\">\n              {Object.entries(safeSummary.byProvider).map(([provider, data]) => (\n                <div key={provider} className=\"flex items-center justify-between p-3 bg-white rounded-lg border\">\n                  <div className=\"flex items-center gap-3\">\n                    <span className=\"text-lg\">{getProviderIcon(provider)}</span>\n                    <span className=\"font-medium text-gray-700 capitalize\">{provider}</span>\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {data.calls} appel{data.calls > 1 ? 's' : ''}\n                    </Badge>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"font-semibold text-green-600\">{formatCost(data.cost)}</div>\n                    <div className=\"text-xs text-gray-500\">\n                      {formatTokens(data.tokens.input)} → {formatTokens(data.tokens.output)} tokens\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Note sur les estimations */}\n          <div className=\"text-xs text-gray-500 bg-gray-100 p-3 rounded-lg\">\n            <strong>Note :</strong> Les coûts sont estimés basés sur les tokens utilisés. \n            Les coûts réels peuvent varier selon les tarifs actuels des providers.\n          </div>\n        </CardContent>\n      )}\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\components\\brand-monitor\\brand-monitor.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'t' is assigned a value but never used.","line":160,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":160,"endColumn":10},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'creditsAvailable'. Either include it or remove the dependency array.","line":540,"column":6,"nodeType":"ArrayExpression","endLine":540,"endColumn":59,"suggestions":[{"desc":"Update the dependencies array to be: [company, creditsAvailable, tErrors, useIntelliSearch, onCreditsUpdate]","fix":{"range":[19015,19068],"text":"[company, creditsAvailable, tErrors, useIntelliSearch, onCreditsUpdate]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleIntelliSearchToggle' is assigned a value but never used.","line":662,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":662,"endColumn":34},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":807,"column":54,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[29511,29590],"text":"\n                  Recherche en ligne pour améliorer l&apos;analyse\n                "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[29511,29590],"text":"\n                  Recherche en ligne pour améliorer l&lsquo;analyse\n                "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[29511,29590],"text":"\n                  Recherche en ligne pour améliorer l&#39;analyse\n                "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[29511,29590],"text":"\n                  Recherche en ligne pour améliorer l&rsquo;analyse\n                "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useReducer, useCallback, useState, useEffect, useRef, useMemo } from 'react';\nimport { useTranslations } from 'next-intl';\nimport type { Company, ProviderSpecificRanking } from '@/lib/types';\nimport type { BrandAnalysisWithSources } from '@/lib/db/schema';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { RefreshCw } from 'lucide-react';\nimport { ClientApiError } from '@/lib/client-errors';\nimport { \n  brandMonitorReducer, \n  initialBrandMonitorState,\n  IdentifiedCompetitor,\n  PromptCompletionStatus,\n  PromptStatus,\n  Analysis\n} from '@/lib/brand-monitor-reducer';\nimport {\n  validateUrl,\n  validateCompetitorUrl\n} from '@/lib/brand-monitor-utils';\nimport { getEnabledProviders } from '@/lib/provider-config';\nimport { useSaveBrandAnalysis } from '@/hooks/useBrandAnalyses';\n\n// Components\nimport { UrlInputSection } from './url-input-section';\nimport { CompanyCard } from './company-card';\nimport { AnalysisProgressSection } from './analysis-progress-section';\nimport { ResultsNavigation } from './results-navigation';\nimport { PromptsResponsesTab } from './prompts-responses-tab';\nimport { VisibilityScoreTab } from './visibility-score-tab';\nimport { SourcesTab } from './sources-tab';\nimport { ErrorMessage } from './error-message';\nimport { AddPromptModal } from './modals/add-prompt-modal';\nimport { AddCompetitorModal } from './modals/add-competitor-modal';\nimport { ProviderComparisonMatrix } from './provider-comparison-matrix';\nimport { ProviderRankingsTabs } from './provider-rankings-tabs';\nimport { WebSearchToggle } from './web-search-toggle';\nimport { logger } from '@/lib/logger';\nimport { extractAnalysisSources } from '@/lib/brand-monitor-sources';\nimport { ApiUsageSummary, ApiUsageSummaryData } from './api-usage-summary';\nimport {\n  CREDIT_COST_URL_ANALYSIS,\n  CREDIT_COST_COMPETITOR_ANALYSIS,\n  CREDIT_COST_PER_PROMPT_ANALYSIS_WEB,\n  CREDIT_COST_PER_PROMPT_ANALYSIS_NO_WEB,\n  CREDIT_COST_PROMPT_GENERATION\n} from '@/config/constants';\n\n// Hooks\nimport { useSSEHandler } from './hooks/use-sse-handler';\n\n// Dev flag to restrict certain UI elements to local/dev only\nconst isDev = process.env.NODE_ENV === 'development';\n\ninterface BrandMonitorProps {\n  creditsAvailable?: number;\n  onCreditsUpdate?: () => void;\n  selectedAnalysis?: BrandAnalysisWithSources | null;\n  onSaveAnalysis?: (analysis: BrandAnalysisWithSources) => void;\n  hideSourcesTab?: boolean;\n  hideWebSearchSources?: boolean;\n}\n\ninterface CompetitorSearchResponse {\n  success: boolean;\n  competitors: Array<{ name: string; url?: string | null }>;\n  stats?: unknown;\n  warning?: string;\n}\n\ntype RawCompany = Omit<Company, 'id' | 'name' | 'url'> & {\n  id?: string;\n  name?: string;\n  url?: string;\n};\n\ninterface ScrapeResponse {\n  company: RawCompany;\n}\n\nfunction isRecord(value: unknown): value is Record<string, unknown> {\n  return typeof value === 'object' && value !== null;\n}\n\nfunction isAnalysisPayload(value: unknown): value is Analysis {\n  if (!isRecord(value)) {\n    return false;\n  }\n\n  const candidate = value as Partial<Analysis>;\n  return (\n    isRecord(candidate.company) &&\n    Array.isArray(candidate.competitors) &&\n    Array.isArray(candidate.prompts) &&\n    Array.isArray(candidate.responses) &&\n    isRecord(candidate.scores)\n  );\n}\n\nfunction normalizeScrapedCompany(input: RawCompany): Company {\n  const url = input.url?.trim();\n  if (!url) {\n    throw new Error('Scraped company is missing a URL');\n  }\n\n  const name = (input.name ?? url).trim() || url;\n  const id = input.id ?? url;\n\n  return {\n    id,\n    name,\n    url,\n    description: input.description,\n    industry: input.industry,\n    logo: input.logo,\n    favicon: input.favicon,\n    scraped: input.scraped,\n    scrapedData: input.scrapedData,\n    businessProfile: input.businessProfile,\n  };\n}\n\nfunction buildCompanyFromSelection(\n  selection: BrandAnalysisWithSources,\n  analysisData?: Analysis | null\n): Company | null {\n  const reference = analysisData?.company;\n  const url = reference?.url ?? selection.url;\n  if (!url) {\n    return reference ?? null;\n  }\n\n  const name = reference?.name ?? selection.companyName ?? url;\n  const id = reference?.id ?? selection.id ?? url;\n\n  return {\n    id,\n    name,\n    url,\n    description: reference?.description,\n    industry: reference?.industry ?? selection.industry ?? undefined,\n    logo: reference?.logo,\n    favicon: reference?.favicon,\n    scraped: reference?.scraped,\n    scrapedData: reference?.scrapedData,\n    businessProfile: reference?.businessProfile,\n  };\n}\n\nexport function BrandMonitor({ \n  creditsAvailable = 0, \n  onCreditsUpdate,\n  selectedAnalysis,\n  onSaveAnalysis,\n  hideSourcesTab = false,\n  hideWebSearchSources = false,\n}: BrandMonitorProps = {}) {\n  const t = useTranslations('brandMonitor');\n  const tErrors = useTranslations('brandMonitor.errors');\n  const tAnalysis = useTranslations('brandMonitor.analysis');\n  const [state, dispatch] = useReducer(brandMonitorReducer, initialBrandMonitorState);\n  const saveAnalysis = useSaveBrandAnalysis();\n  const hasSavedRef = useRef(false);\n  const [isRefreshingMatrix, setIsRefreshingMatrix] = useState(false);\n  const [apiUsageSummary, setApiUsageSummary] = useState<ApiUsageSummaryData | null>(null);\n  \n  const { startSSEConnection } = useSSEHandler({ \n    state, \n    dispatch, \n    onCreditsUpdate,\n    onAnalysisComplete: (completedAnalysis) => {\n      // Only save if this is a new analysis (not loaded from existing)\n      if (!selectedAnalysis && !hasSavedRef.current) {\n        hasSavedRef.current = true;\n        \n        const normalizedSources = extractAnalysisSources(completedAnalysis);\n        const normalizedAnalysis = {\n          ...completedAnalysis,\n          sources: normalizedSources,\n        };\n\n        const analysisData: Partial<BrandAnalysisWithSources> = {\n          url: company?.url || url,\n          companyName: company?.name,\n          industry: company?.industry,\n          analysisData: normalizedAnalysis,\n          competitors: identifiedCompetitors,\n          prompts: analyzingPrompts,\n          creditsUsed: (completedAnalysis?.prompts?.length || 0) * (useWebSearch ? CREDIT_COST_PER_PROMPT_ANALYSIS_WEB : CREDIT_COST_PER_PROMPT_ANALYSIS_NO_WEB),\n        };\n\n        saveAnalysis.mutate(analysisData, {\n          onSuccess: (savedAnalysis: BrandAnalysisWithSources) => {\n            logger.info('Analysis saved successfully:', savedAnalysis);\n            if (onSaveAnalysis) {\n              onSaveAnalysis(savedAnalysis);\n            }\n          },\n          onError: (error: unknown) => {\n            logger.error('Failed to save analysis:', error);\n            hasSavedRef.current = false;\n          }\n        });\n      }\n    },\n    onApiUsageSummary: (summary) => {\n      setApiUsageSummary(summary);\n    }\n  });\n  \n  // Extract state for easier access\n  const {\n    url,\n    urlValid,\n    error,\n    loading,\n    analyzing,\n    preparingAnalysis,\n    company,\n    showInput,\n    showCompanyCard,\n    showPromptsList,\n    showCompetitors,\n    customPrompts,\n    removedDefaultPrompts,\n    identifiedCompetitors,\n    analysisProgress,\n    promptCompletionStatus,\n    analyzingPrompts,\n    analysis,\n    activeResultsTab,\n    expandedPromptIndex,\n    showAddPromptModal,\n    showAddCompetitorModal,\n    newPromptText,\n    newCompetitorName,\n    newCompetitorUrl,\n    scrapingCompetitors,\n    useWebSearch,\n    useIntelliSearch\n  } = state;\n  const displaySources = useMemo(() => {\n    const persisted = selectedAnalysis?.sources ?? null;\n\n    if (analysis) {\n      return extractAnalysisSources(analysis, persisted);\n    }\n\n    if (selectedAnalysis?.analysisData) {\n      return extractAnalysisSources(selectedAnalysis.analysisData, persisted);\n    }\n\n    if (persisted) {\n      return extractAnalysisSources(undefined, persisted);\n    }\n\n    return [];\n  }, [analysis, selectedAnalysis]);\n\n  // Remove the auto-save effect entirely - we'll save manually when analysis completes\n  \n  // Load selected analysis if provided or reset when null\n  useEffect(() => {\n    logger.debug('[BrandMonitor] selectedAnalysis changed:', selectedAnalysis);\n\n    if (selectedAnalysis === null) {\n      logger.info('[BrandMonitor] Resetting state for new analysis');\n      dispatch({ type: 'RESET_STATE' });\n      hasSavedRef.current = false;\n      return;\n    }\n\n    if (!selectedAnalysis) {\n      return;\n    }\n\n    logger.info('[BrandMonitor] Loading existing analysis');\n    const analysisPayload = isAnalysisPayload(selectedAnalysis.analysisData)\n      ? selectedAnalysis.analysisData\n      : null;\n\n    if (analysisPayload) {\n      dispatch({ type: 'SET_ANALYSIS', payload: analysisPayload });\n    } else if (selectedAnalysis.analysisData) {\n      logger.warn('[BrandMonitor] Selected analysis data had unexpected shape; skipping load');\n    }\n\n    const restoredCompany = buildCompanyFromSelection(selectedAnalysis, analysisPayload);\n    if (restoredCompany) {\n      dispatch({ type: 'SCRAPE_SUCCESS', payload: restoredCompany });\n    }\n  }, [selectedAnalysis]);\n  \n  // Handlers\n  const handleUrlChange = useCallback((newUrl: string) => {\n    dispatch({ type: 'SET_URL', payload: newUrl });\n    \n    // Clear any existing error when user starts typing\n    if (error) {\n      dispatch({ type: 'SET_ERROR', payload: null });\n    }\n    \n    // Validate URL on change\n    if (newUrl.length > 0) {\n      const isValid = validateUrl(newUrl);\n      dispatch({ type: 'SET_URL_VALID', payload: isValid });\n    } else {\n      dispatch({ type: 'SET_URL_VALID', payload: null });\n    }\n  }, [error]);\n  \n  const handleScrape = useCallback(async () => {\n    if (!url) {\n      dispatch({ type: 'SET_ERROR', payload: tErrors('pleaseEnterUrl') });\n      return;\n    }\n\n    // Validate URL\n    if (!validateUrl(url)) {\n      dispatch({ type: 'SET_ERROR', payload: tErrors('pleaseEnterValidUrl') });\n      dispatch({ type: 'SET_URL_VALID', payload: false });\n      return;\n    }\n\n    // Check if user has enough credits for initial scrape\n    if (creditsAvailable < CREDIT_COST_URL_ANALYSIS) {\n      dispatch({ type: 'SET_ERROR', payload: tErrors('insufficientCreditsUrl', { credits: CREDIT_COST_URL_ANALYSIS }) });\n      return;\n    }\n\n    logger.info('Starting scrape for URL:', url);\n    dispatch({ type: 'SET_LOADING', payload: true });\n    dispatch({ type: 'SET_ERROR', payload: null });\n    dispatch({ type: 'SET_URL_VALID', payload: true });\n    \n    try {\n      const response = await fetch('/api/brand-monitor/scrape', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ \n          url,\n          maxAge: 7 * 24 * 60 * 60 * 1000, // 1 week in milliseconds\n          useDeepCrawl: false // Temporarily disabled\n        }),\n      });\n\n      logger.debug('Scrape response status:', response.status);\n\n      if (!response.ok) {\n        try {\n          const errorData = await response.json();\n          logger.error('Scrape API error:', errorData);\n          if (errorData.error?.message) {\n            throw new ClientApiError(errorData);\n          }\n          throw new Error(errorData.error || tErrors('failedToScrape'));\n        } catch (innerError) {\n          if (innerError instanceof ClientApiError) throw innerError;\n          throw new Error(tErrors('failedToScrape'));\n        }\n      }\n\n      const data: ScrapeResponse = await response.json();\n      logger.debug('Scrape data received:', data);\n\n      if (!data?.company) {\n        throw new Error(tErrors('noCompanyData'));\n      }\n\n      const scrapedCompany = normalizeScrapedCompany(data.company);\n      // Debit for URL analysis on successful scrape result\n      try {\n        const debitRes = await fetch('/api/credits', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ value: CREDIT_COST_URL_ANALYSIS, reason: 'scrape_success' })\n        });\n        if (!debitRes.ok) {\n          const err = (await debitRes.json().catch(() => null)) as { error?: string } | null;\n          logger.warn('[Credits] Debit on scrape_success failed:', err?.error || debitRes.statusText);\n        } else if (onCreditsUpdate) {\n          onCreditsUpdate();\n        }\n      } catch (creditError) {\n        logger.warn('[Credits] Debit on scrape_success error:', creditError);\n      }\n      \n      // Scrape was successful - credits have been deducted, refresh the navbar\n      if (onCreditsUpdate) {\n        onCreditsUpdate();\n      }\n      \n      // Start fade out transition\n      dispatch({ type: 'SET_SHOW_INPUT', payload: false });\n      \n      // After fade out completes, set company and show card with fade in\n      setTimeout(() => {\n        dispatch({ type: 'SCRAPE_SUCCESS', payload: scrapedCompany });\n        // Small delay to ensure DOM updates before fade in\n        setTimeout(() => {\n          dispatch({ type: 'SET_SHOW_COMPANY_CARD', payload: true });\n          logger.info('Showing company card');\n        }, 50);\n      }, 500);\n    } catch (unknownError) {\n      logger.error('❌ [BrandMonitor] Scrape error:', unknownError);\n\n      let errorMessage = tErrors('failedToExtractCompany');\n      if (unknownError instanceof ClientApiError) {\n        errorMessage = unknownError.getUserMessage();\n      } else if (unknownError instanceof Error) {\n        logger.error('❌ [BrandMonitor] Error details:', {\n          message: unknownError.message,\n          name: unknownError.name,\n          stack: unknownError.stack,\n          cause: (unknownError as { cause?: unknown }).cause\n        });\n\n        if (unknownError.message.includes('FIRECRAWL_API_KEY not configured')) {\n          errorMessage = 'Clé API Firecrawl manquante. Veuillez configurer FIRECRAWL_API_KEY dans .env.local';\n        } else if (unknownError.message.includes('No AI providers configured')) {\n          errorMessage = 'Aucun fournisseur IA configuré. Veuillez configurer au moins une clé API (OpenAI, Anthropic, etc.)';\n        } else if (unknownError.message.includes('timed out')) {\n          errorMessage = 'Timeout lors du scraping. Le site web met trop de temps à répondre.';\n        } else if (unknownError.message.includes('network') || unknownError.message.includes('fetch')) {\n          errorMessage = 'Erreur de réseau. Vérifiez votre connexion internet.';\n        } else {\n          errorMessage = tErrors('failedToExtractCompanyWithReason', { reason: unknownError.message });\n        }\n      }\n\n      dispatch({ type: 'SET_ERROR', payload: errorMessage });\n    } finally {\n      dispatch({ type: 'SET_LOADING', payload: false });\n    }\n  }, [url, creditsAvailable, onCreditsUpdate, tErrors]);\n  \n  const handlePrepareAnalysis = useCallback(async () => {\n    if (!company) return;\n\n    // Validate credits and show error but allow click to give feedback like URL stage\n    if (creditsAvailable < CREDIT_COST_COMPETITOR_ANALYSIS) {\n      dispatch({ type: 'SET_ERROR', payload: tErrors('insufficientCreditsCompetitors', { credits: CREDIT_COST_COMPETITOR_ANALYSIS }) });\n      return;\n    }\n\n    dispatch({ type: 'SET_PREPARING_ANALYSIS', payload: true });\n    \n    // Check which providers are available\n    try {\n      const response = await fetch('/api/brand-monitor/check-providers', {\n        method: 'POST',\n      });\n      if (response.ok) {\n        const data = await response.json();\n        dispatch({ type: 'SET_AVAILABLE_PROVIDERS', payload: data.providers || ['OpenAI', 'Anthropic', 'Google'] });\n      }\n    } catch {\n      // Default to providers with API keys if check fails\n      const defaultProviders = [];\n      if (process.env.NEXT_PUBLIC_HAS_OPENAI_KEY) defaultProviders.push('OpenAI');\n      if (process.env.NEXT_PUBLIC_HAS_ANTHROPIC_KEY) defaultProviders.push('Anthropic');\n      dispatch({ type: 'SET_AVAILABLE_PROVIDERS', payload: defaultProviders.length > 0 ? defaultProviders : ['OpenAI', 'Anthropic'] });\n    }\n    \n    try {\n      const detectedLocale = navigator.language.split('-')[0] || 'en';\n      logger.info('ðŸš€ Starting competitor search...');\n      logger.debug('🌐 Detected browser locale:', navigator.language, '→', detectedLocale);\n      \n      // Import search method configuration\n      const { ACTIVE_SEARCH_CONFIG, getApiEndpoint, buildRequestBody } = await import('@/lib/competitor-pipeline/search-method-config');\n      \n      const apiEndpoint = getApiEndpoint(ACTIVE_SEARCH_CONFIG.method);\n      const requestBody = buildRequestBody(ACTIVE_SEARCH_CONFIG, company, detectedLocale, useIntelliSearch);\n      \n      logger.debug(`ðŸ”¬ [SearchMethod] Active method: ${ACTIVE_SEARCH_CONFIG.method}`);\n      logger.debug(`ðŸ”§ [SearchMethod] Config:`, ACTIVE_SEARCH_CONFIG);\n      \n      const response = await fetch(apiEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(requestBody),\n      });\n      \n      if (!response.ok) {\n        throw new Error(`API request failed: ${response.status}`);\n      }\n      \n      const data = (await response.json()) as CompetitorSearchResponse & { error?: string };\n\n      if (!data.success) {\n        throw new Error(data.error || 'Unknown API error');\n      }\n\n      // Debit credits for competitor analysis only after successful generation\n      try {\n        const debitRes = await fetch('/api/credits', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ value: CREDIT_COST_COMPETITOR_ANALYSIS, reason: 'identify_competitors_success' })\n        });\n        if (!debitRes.ok) {\n          const err = (await debitRes.json().catch(() => null)) as { error?: string } | null;\n          logger.warn('[Credits] Debit on identify_competitors_success failed:', err?.error || debitRes.statusText);\n        } else if (onCreditsUpdate) {\n          onCreditsUpdate();\n        }\n      } catch (creditError) {\n        logger.warn('[Credits] Debit on identify_competitors_success error:', creditError);\n      }\n      \n      // Handle AI web search results\n      const foundCompetitors: IdentifiedCompetitor[] = data.competitors.map((comp) => ({\n        name: comp.name,\n        url: comp.url ?? undefined\n      }));\n      \n      logger.info('ðŸ† Found competitors:', foundCompetitors);\n      logger.debug('ðŸ“Š Stats:', data.stats);\n      \n      if (data.warning) {\n        logger.warn('⚠️ Warning:', data.warning);\n      }\n      \n      dispatch({ type: 'SET_IDENTIFIED_COMPETITORS', payload: foundCompetitors });\n      logger.info('Final identified competitors:', foundCompetitors);\n    } catch (unknownError) {\n      logger.error('❌ Error in competitor search:', unknownError);\n      dispatch({ type: 'SET_ERROR', payload: tErrors('failedToFindCompetitors') });\n    }\n    \n    // Show competitors on the same page with animation\n    dispatch({ type: 'SET_SHOW_COMPETITORS', payload: true });\n    dispatch({ type: 'SET_PREPARING_ANALYSIS', payload: false });\n  }, [company, useIntelliSearch, onCreditsUpdate, tErrors]);\n  \n  const handleProceedToPrompts = useCallback(() => {\n    // Add a fade-out class to the current view\n    const currentView = document.querySelector('.animate-panel-in');\n    if (currentView) {\n      currentView.classList.add('opacity-0');\n    }\n    \n    setTimeout(() => {\n      // Require credits for prompt generation; show specific error if missing and do not proceed\n      if (creditsAvailable < CREDIT_COST_PROMPT_GENERATION) {\n        dispatch({ type: 'SET_ERROR', payload: tErrors('insufficientCreditsPromptGen', { credits: CREDIT_COST_PROMPT_GENERATION }) });\n        return;\n      }\n\n      dispatch({ type: 'SET_SHOW_COMPETITORS', payload: false });\n      dispatch({ type: 'SET_SHOW_PROMPTS_LIST', payload: true });\n    }, 300);\n  }, [creditsAvailable, tErrors]);\n  \n  const handleAnalyze = useCallback(async (displayPrompts: string[]) => {\n    if (!company) return;\n\n    // Reset saved flag for new analysis\n    hasSavedRef.current = false;\n\n    // Check if user has enough credits dynamically: per-prompt cost depends on webSearch\n    const normalizedPrompts = displayPrompts.map(p => p.trim());\n    const perPromptCost = useWebSearch ? CREDIT_COST_PER_PROMPT_ANALYSIS_WEB : CREDIT_COST_PER_PROMPT_ANALYSIS_NO_WEB;\n    const requiredCredits = normalizedPrompts.length * perPromptCost;\n    if (creditsAvailable < requiredCredits) {\n      dispatch({ type: 'SET_ERROR', payload: tErrors('insufficientCreditsAnalysis', { credits: requiredCredits, perPrompt: perPromptCost }) });\n      return;\n    }\n\n    // Immediately trigger credit update to reflect deduction in navbar\n    if (onCreditsUpdate) {\n      onCreditsUpdate();\n    }\n\n    try {\n      // Use the prompts that are already displayed in the UI instead of regenerating\n      // This ensures consistency and avoids unnecessary API calls\n      // normalizedPrompts already computed above\n      dispatch({ type: 'SET_ANALYZING_PROMPTS', payload: normalizedPrompts });\n\n      logger.info('Starting analysis with existing prompts:', normalizedPrompts.length);\n      \n      dispatch({ type: 'SET_ANALYZING', payload: true });\n      dispatch({ type: 'SET_ANALYSIS_PROGRESS', payload: {\n        stage: 'initializing',\n        progress: 0,\n        message: tAnalysis('startingAnalysis'),\n        competitors: [],\n        prompts: [],\n        partialResults: []\n      }});\n      dispatch({ type: 'SET_ANALYSIS_TILES', payload: [] });\n      \n      // Initialize prompt completion status\n      const initialStatus: PromptCompletionStatus = {};\n      const expectedProviders = getEnabledProviders().map(config => config.name);\n      \n      normalizedPrompts.forEach(prompt => {\n        initialStatus[prompt] = {} as Record<string, PromptStatus>;\n        expectedProviders.forEach(provider => {\n          initialStatus[prompt][provider] = 'pending';\n        });\n      });\n      dispatch({ type: 'SET_PROMPT_COMPLETION_STATUS', payload: initialStatus });\n\n      await startSSEConnection(\n        '/api/brand-monitor/analyze',\n        {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ \n            company, \n            prompts: normalizedPrompts,\n            competitors: identifiedCompetitors,\n            useWebSearch\n          }),\n        },\n        async () => {\n          // Debit credits for prompts only after SSE connection (HTTP 200)\n          const perPrompt = useWebSearch ? CREDIT_COST_PER_PROMPT_ANALYSIS_WEB : CREDIT_COST_PER_PROMPT_ANALYSIS_NO_WEB;\n          const debitValue = normalizedPrompts.length * perPrompt;\n          try {\n            const debitRes = await fetch('/api/credits', {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify({ value: debitValue, reason: 'prompts_analysis' })\n            });\n            if (!debitRes.ok) {\n              const err = (await debitRes.json().catch(() => null)) as { error?: string } | null;\n              logger.warn('[Credits] Debit for prompts failed:', err?.error || debitRes.statusText);\n            } else if (onCreditsUpdate) {\n              onCreditsUpdate();\n            }\n          } catch (creditError) {\n            logger.warn('[Credits] Debit for prompts error:', creditError);\n          }\n        }\n      );\n    } catch (unknownError) {\n      logger.error('Error preparing prompts or starting analysis:', unknownError);\n      dispatch({ type: 'SET_ERROR', payload: tErrors('analysisPreparationFailed') });\n    } finally {\n      dispatch({ type: 'SET_ANALYZING', payload: false });\n    }\n  }, [company, identifiedCompetitors, startSSEConnection, creditsAvailable, tErrors, tAnalysis, useWebSearch, onCreditsUpdate]);\n  \n  const handleRestart = useCallback(() => {\n    dispatch({ type: 'RESET_STATE' });\n    hasSavedRef.current = false;\n  }, []);\n  \n  const handleWebSearchToggle = useCallback((enabled: boolean) => {\n    dispatch({ type: 'SET_USE_WEB_SEARCH', payload: enabled });\n  }, []);\n  \n  const handleIntelliSearchToggle = useCallback((enabled: boolean) => {\n    dispatch({ type: 'SET_USE_INTELLISEARCH', payload: enabled });\n  }, []);\n  \n  const handleRefreshMatrix = useCallback(async () => {\n    if (!company || !analysis?.responses || !identifiedCompetitors) {\n      logger.error('Données manquantes pour le refresh de la matrice');\n      return;\n    }\n\n    setIsRefreshingMatrix(true);\n    \n    try {\n      logger.info('[RefreshMatrix] ðŸ”„ Début du recalcul de la matrice...');\n      \n      // Préparer les données pour l'API\n      const knownCompetitors = identifiedCompetitors.map(c => c.name);\n      \n      const response = await fetch('/api/brand-monitor/refresh-matrix', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          company,\n          responses: analysis.responses,\n          knownCompetitors\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Erreur lors du refresh');\n      }\n\n      const data = await response.json();\n      logger.info('[RefreshMatrix] ✅ Matrice recalculée avec succès');\n      \n      // Mettre à jour l'analyse avec les nouvelles données\n      const updatedAnalysis = {\n        ...analysis,\n        providerRankings: data.providerRankings,\n        providerComparison: data.providerComparison,\n        lastMatrixRefresh: data.timestamp\n      };\n      \n      dispatch({ type: 'SET_ANALYSIS', payload: updatedAnalysis });\n      \n    } catch (error) {\n      logger.error('[RefreshMatrix] ❌ Erreur:', error);\n      dispatch({ \n        type: 'SET_ERROR', \n        payload: `Erreur lors du rafraîchissement: ${error instanceof Error ? error.message : 'Erreur inconnue'}` \n      });\n    } finally {\n      setIsRefreshingMatrix(false);\n    }\n  }, [company, analysis, identifiedCompetitors]);\n  \n  const batchScrapeAndValidateCompetitors = useCallback(async (competitors: IdentifiedCompetitor[]) => {\n    const validatedCompetitors = competitors.map(comp => ({\n      ...comp,\n      url: comp.url ? validateCompetitorUrl(comp.url) : undefined\n    })).filter(comp => comp.url);\n    \n    if (validatedCompetitors.length === 0) return;\n    \n    // Implementation for batch scraping - you can move the full implementation here\n    // For now, just logging\n    logger.info('Batch scraping validated competitors:', validatedCompetitors);\n  }, []);\n  \n  \n  // Find brand data\n  const brandData = analysis?.competitors?.find(c => c.isOwn);\n  const providerRankingsForDisplay: ProviderSpecificRanking[] | undefined = (() => {\n    const rankings = analysis?.providerRankings;\n    if (!rankings) {\n      return undefined;\n    }\n\n    if (!analysis?.providerComparison) {\n      return rankings;\n    }\n\n    const comparisonBrands = new Set(analysis.providerComparison.map(c => c.competitor));\n    return rankings.map((ranking) => ({\n      ...ranking,\n      competitors: ranking.competitors.filter((competitor) => comparisonBrands.has(competitor.name))\n    }));\n  })();\n  \n  return (\n    <div className=\"flex flex-col\">\n\n      {/* URL Input Section */}\n      {showInput && (\n        <div className=\"flex items-center justify-center min-h-[50vh]\">\n          <div className=\"max-w-7xl mx-auto w-full px-4 sm:px-6 lg:px-8\">\n            <UrlInputSection\n              url={url}\n              urlValid={urlValid}\n              loading={loading}\n              analyzing={analyzing}\n              onUrlChange={handleUrlChange}\n              onSubmit={handleScrape}\n            />\n          </div>\n        </div>\n      )}\n\n      {/* Company Card Section with Competitors */}\n      {!showInput && company && !showPromptsList && !analyzing && !analysis && (\n        <div className=\"flex items-center justify-center animate-panel-in\">\n          <div className=\"max-w-7xl mx-auto w-full px-4 sm:px-6 lg:px-8\">\n            <div className=\"w-full space-y-6\">\n            <div className={`transition-all duration-500 ${showCompanyCard ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-4'}`}>\n              <CompanyCard \n                company={company}\n                onAnalyze={handlePrepareAnalysis}\n                analyzing={preparingAnalysis}\n                showCompetitors={showCompetitors}\n                identifiedCompetitors={identifiedCompetitors}\n                onRemoveCompetitor={(idx) => dispatch({ type: 'REMOVE_COMPETITOR', payload: idx })}\n                onAddCompetitor={() => {\n                  // Only allow adding if we have less than 9 competitors\n                  if (identifiedCompetitors.length < 9) {\n                    dispatch({ type: 'TOGGLE_MODAL', payload: { modal: 'addCompetitor', show: true } });\n                    dispatch({ type: 'SET_NEW_COMPETITOR', payload: { name: '', url: '' } });\n                  }\n                }}\n                onContinueToAnalysis={handleProceedToPrompts}\n              />\n            </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Prompts List Section */}\n      {showPromptsList && company && !analysis && (\n        <div className=\"max-w-7xl mx-auto w-full px-4 sm:px-6 lg:px-8\">\n          {/* Web Search Toggle */}\n          <div className=\"mb-6 flex justify-center\">\n            <div className=\"bg-white rounded-lg border border-gray-200 p-4 shadow-sm\">\n              <div className=\"flex items-center gap-4\">\n                <span className=\"text-sm font-medium text-gray-700\">\n                  Recherche en ligne pour améliorer l'analyse\n                </span>\n                <WebSearchToggle\n                  enabled={useWebSearch}\n                  onChange={handleWebSearchToggle}\n                  disabled={analyzing}\n                />\n              </div>\n              <p className=\"text-xs text-gray-500 mt-2 text-center\">\n                {useWebSearch \n                  ? \"Les modèles d'IA effectueront des recherches en ligne pour des informations plus récentes et précises\"\n                  : \"Les modèles d'IA utiliseront uniquement leurs connaissances pré-entraînées\"\n                }\n              </p>\n            </div>\n          </div>\n          \n          <AnalysisProgressSection\n          company={company}\n          analyzing={analyzing}\n          identifiedCompetitors={identifiedCompetitors}\n          scrapingCompetitors={scrapingCompetitors}\n          analysisProgress={analysisProgress}\n          prompts={analyzingPrompts}\n          customPrompts={customPrompts}\n          removedDefaultPrompts={removedDefaultPrompts}\n          promptCompletionStatus={promptCompletionStatus}\n          onRemoveDefaultPrompt={(index) => dispatch({ type: 'REMOVE_DEFAULT_PROMPT', payload: index })}\n          onRemoveCustomPrompt={(prompt) => {\n            dispatch({ type: 'SET_CUSTOM_PROMPTS', payload: customPrompts.filter(p => p !== prompt) });\n          }}\n          onAddPromptClick={() => {\n            dispatch({ type: 'TOGGLE_MODAL', payload: { modal: 'addPrompt', show: true } });\n            dispatch({ type: 'SET_NEW_PROMPT_TEXT', payload: '' });\n          }}\n          onStartAnalysis={handleAnalyze}\n          onCreditsUpdate={onCreditsUpdate}\n        />\n        </div>\n      )}\n\n      {/* Analysis Results */}\n      {analysis && brandData && (\n        <div className=\"flex-1 flex justify-center animate-panel-in pt-8\">\n          <div className=\"max-w-7xl mx-auto w-full px-4 sm:px-6 lg:px-8\">\n            {/* API Usage Summary */}\n            {isDev && apiUsageSummary && (\n              <div className=\"mb-6\">\n                <ApiUsageSummary\n                  summary={apiUsageSummary}\n                />\n              </div>\n            )}\n            \n            <div className=\"flex gap-6 relative\">\n            {/* Sidebar Navigation */}\n            <ResultsNavigation\n              activeTab={activeResultsTab}\n              onTabChange={(tab) => {\n                // Allow click but keep disabled styling/tooltip handled in nav\n                dispatch({ type: 'SET_ACTIVE_RESULTS_TAB', payload: tab });\n              }}\n              onRestart={handleRestart}\n              hideSourcesTab={hideSourcesTab}\n            />\n            \n            {/* Main Content Area */}\n            <div className=\"flex-1 flex flex-col\">\n              <div className=\"w-full flex-1 flex flex-col\">\n                {/* Tab Content */}\n                {activeResultsTab === 'visibility' && (\n                  <VisibilityScoreTab\n                    competitors={analysis.competitors}\n                    brandData={brandData}\n                    identifiedCompetitors={identifiedCompetitors}\n                  />\n                )}\n\n                {activeResultsTab === 'matrix' && (\n                  <Card className=\"p-2 bg-card text-card-foreground gap-6 rounded-xl border py-6 shadow-sm border-gray-200 h-full flex flex-col\">\n                    <CardHeader className=\"border-b\">\n                      <div className=\"flex justify-between items-center\">\n                        <div>\n                          <CardTitle className=\"text-xl font-semibold\">{tAnalysis('comparisonMatrix.title')}</CardTitle>\n                          <CardDescription className=\"text-sm text-gray-600 mt-1\">\n                            {tAnalysis('comparisonMatrix.description')}\n                            \n                          </CardDescription>\n                        </div>\n                        <div className=\"flex items-center gap-4\">\n                          {isDev && (\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={handleRefreshMatrix}\n                              disabled={isRefreshingMatrix}\n                              className=\"flex items-center gap-2\"\n                            >\n                              <RefreshCw className={`w-4 h-4 ${isRefreshingMatrix ? 'animate-spin' : ''}`} />\n                              {isRefreshingMatrix ? 'Recalcul...' : 'Rafraîchir'}\n                            </Button>\n                          )}\n                          <div className=\"text-right\">\n                            <p className=\"text-2xl font-bold text-orange-600\">{brandData.visibilityScore}%</p>\n                            <p className=\"text-xs text-gray-500 mt-1\">{tAnalysis('comparisonMatrix.averageScore')}</p>\n                          </div>\n                        </div>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"pt-6 flex-1 overflow-auto\">\n                      {analysis.providerComparison ? (\n                        <ProviderComparisonMatrix \n                          data={analysis.providerComparison} \n                          competitors={identifiedCompetitors}\n                        />\n                      ) : (\n                        <div className=\"text-center py-8 text-gray-500\">\n                          <p>{tAnalysis('comparisonMatrix.noDataAvailable')}</p>\n                          <p className=\"text-sm mt-2\">{tAnalysis('comparisonMatrix.ensureProvidersConfigured')}</p>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                )}\n\n                {activeResultsTab === 'rankings' && providerRankingsForDisplay && (\n                  <div id=\"provider-rankings\" className=\"h-full\">\n                    <ProviderRankingsTabs \n                      providerRankings={providerRankingsForDisplay} \n                      brandName={company?.name || tAnalysis('yourBrand')}\n                      shareOfVoice={brandData.shareOfVoice}\n                      averagePosition={Math.round(brandData.averagePosition)}\n                      sentimentScore={brandData.sentimentScore}\n                      weeklyChange={brandData.weeklyChange}\n                    />\n                  </div>\n                )}\n\n                {activeResultsTab === 'sources' && !hideSourcesTab && (\n                  <SourcesTab sources={displaySources} />\n                )}\n\n                {activeResultsTab === 'prompts' && analysis.prompts && (\n                  <Card className=\"p-2 bg-card text-card-foreground gap-6 rounded-xl border py-6 shadow-sm border-gray-200 h-full flex flex-col\">\n                    <CardHeader className=\"border-b\">\n                      <div className=\"flex justify-between items-center\">\n                        <div>\n                          <CardTitle className=\"text-xl font-semibold\">{tAnalysis('promptsResponses.title')}</CardTitle>\n                          <CardDescription className=\"text-sm text-gray-600 mt-1\">\n                            {tAnalysis('promptsResponses.description')}\n                          </CardDescription>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"text-2xl font-bold text-orange-600\">{analysis.prompts.length}</p>\n                          <p className=\"text-xs text-gray-500 mt-1\">{tAnalysis('promptsResponses.totalPrompts')}</p>\n                        </div>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"pt-6 flex-1 overflow-auto\">\n                      <PromptsResponsesTab\n                        prompts={analysis.prompts}\n                        responses={analysis.responses}\n                        expandedPromptIndex={expandedPromptIndex}\n                        onToggleExpand={(index) => dispatch({ type: 'SET_EXPANDED_PROMPT_INDEX', payload: index })}\n                        brandName={analysis.company?.name || ''}\n                        competitors={analysis.competitors?.map(c => c.name) || []}\n                        webSearchUsed={analysis.webSearchUsed}\n                        hideWebSearchSources={hideWebSearchSources}\n                      />\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n            </div>\n          </div>\n          </div>\n        </div>\n      )}\n      \n      {/* Error message */}\n      {error && (\n        <ErrorMessage\n          error={error}\n          onDismiss={() => dispatch({ type: 'SET_ERROR', payload: null })}\n        />\n      )}\n      \n      {/* Modals */}\n      <AddPromptModal\n        isOpen={showAddPromptModal}\n        promptText={newPromptText}\n        onPromptTextChange={(text) => dispatch({ type: 'SET_NEW_PROMPT_TEXT', payload: text })}\n        onAdd={async () => {\n          const trimmed = newPromptText.trim();\n          if (!trimmed) return;\n          dispatch({ type: 'ADD_CUSTOM_PROMPT', payload: trimmed });\n          dispatch({ type: 'TOGGLE_MODAL', payload: { modal: 'addPrompt', show: false } });\n          dispatch({ type: 'SET_NEW_PROMPT_TEXT', payload: '' });\n        }}\n        onClose={() => {\n          dispatch({ type: 'TOGGLE_MODAL', payload: { modal: 'addPrompt', show: false } });\n          dispatch({ type: 'SET_NEW_PROMPT_TEXT', payload: '' });\n        }}\n      />\n\n      <AddCompetitorModal\n        isOpen={showAddCompetitorModal}\n        competitorName={newCompetitorName}\n        competitorUrl={newCompetitorUrl}\n        onNameChange={(name) => dispatch({ type: 'SET_NEW_COMPETITOR', payload: { name } })}\n        onUrlChange={(url) => dispatch({ type: 'SET_NEW_COMPETITOR', payload: { url } })}\n        onAdd={async () => {\n          if (newCompetitorName.trim()) {\n            const rawUrl = newCompetitorUrl.trim();\n            const validatedUrl = rawUrl ? validateCompetitorUrl(rawUrl) : undefined;\n            \n            const newCompetitor: IdentifiedCompetitor = {\n              name: newCompetitorName.trim(),\n              url: validatedUrl\n            };\n            \n            dispatch({ type: 'ADD_COMPETITOR', payload: newCompetitor });\n            dispatch({ type: 'TOGGLE_MODAL', payload: { modal: 'addCompetitor', show: false } });\n            dispatch({ type: 'SET_NEW_COMPETITOR', payload: { name: '', url: '' } });\n            \n            // Batch scrape and validate the new competitor if it has a URL\n            if (newCompetitor.url) {\n              await batchScrapeAndValidateCompetitors([newCompetitor]);\n            }\n          }\n        }}\n        onClose={() => {\n          dispatch({ type: 'TOGGLE_MODAL', payload: { modal: 'addCompetitor', show: false } });\n          dispatch({ type: 'SET_NEW_COMPETITOR', payload: { name: '', url: '' } });\n        }}\n      />\n    </div>\n  );\n}\n\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\components\\brand-monitor\\highlighted-response.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DetectionMatch' is defined but never used.","line":29,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isDetectionLoading' is assigned a value but never used.","line":81,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":81,"endColumn":62},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'detectionError' is assigned a value but never used.","line":81,"column":71,"nodeType":null,"messageId":"unusedVar","endLine":81,"endColumn":85},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":170,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6389,6392],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6389,6392],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":171,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":171,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6453,6456],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6453,6456],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":172,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":172,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6532,6535],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6532,6535],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":173,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":173,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6617,6620],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6617,6620],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has missing dependencies: 'clearError', 'detectMultipleBrands', and 'performFallbackDetection'. Either include them or remove the dependency array.","line":215,"column":6,"nodeType":"ArrayExpression","endLine":215,"endColumn":98,"suggestions":[{"desc":"Update the dependencies array to be: [cacheKey, cleanedResponse, allBrandCandidates, showHighlighting, response.detectionDetails, detectMultipleBrands, performFallbackDetection, clearError]","fix":{"range":[8032,8124],"text":"[cacheKey, cleanedResponse, allBrandCandidates, showHighlighting, response.detectionDetails, detectMultipleBrands, performFallbackDetection, clearError]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":239,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":239,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9031,9034],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9031,9034],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":242,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":242,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9135,9138],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9135,9138],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":244,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":244,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9313,9316],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9313,9316],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":259,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":259,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9854,9857],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9854,9857],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":261,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":261,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10045,10048],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10045,10048],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'highlightString' is assigned a value but never used.","line":340,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":340,"endColumn":24},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":351,"column":114,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[13672,13774],"text":" La détection intelligente des marques n&apos;est pas disponible. Utilisation d'une détection basique.\n    "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[13672,13774],"text":" La détection intelligente des marques n&lsquo;est pas disponible. Utilisation d'une détection basique.\n    "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[13672,13774],"text":" La détection intelligente des marques n&#39;est pas disponible. Utilisation d'une détection basique.\n    "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[13672,13774],"text":" La détection intelligente des marques n&rsquo;est pas disponible. Utilisation d'une détection basique.\n    "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":351,"column":148,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[13672,13774],"text":" La détection intelligente des marques n'est pas disponible. Utilisation d&apos;une détection basique.\n    "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[13672,13774],"text":" La détection intelligente des marques n'est pas disponible. Utilisation d&lsquo;une détection basique.\n    "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[13672,13774],"text":" La détection intelligente des marques n'est pas disponible. Utilisation d&#39;une détection basique.\n    "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[13672,13774],"text":" La détection intelligente des marques n'est pas disponible. Utilisation d&rsquo;une détection basique.\n    "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'detectMultipleBrands'. Either include it or remove the dependency array.","line":547,"column":6,"nodeType":"ArrayExpression","endLine":547,"endColumn":29,"suggestions":[{"desc":"Update the dependencies array to be: [brandCandidates, detectMultipleBrands, text]","fix":{"range":[21320,21343],"text":"[brandCandidates, detectMultipleBrands, text]"}}]}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport { AIResponse } from '@/lib/types';\nimport { useBrandDetection } from '@/hooks/useBrandDetection';\nimport type { BrandDetectionResult, BrandDetectionMatch } from '@/lib/brand-detection-service';\nimport { highlightBrandMentions, segmentsToReactElements, type HighlightedSegment } from '@/lib/text-highlighting-utils';\nimport { \n  highlightTextWithBrands, \n  highlightMarkdownChildren as highlightMarkdownChildrenUtil,\n  type BrandHighlightingConfig \n} from '@/lib/brand-highlighting-utils';\n\n// Simple in-memory cache to avoid redundant brand detection calls\n// Keyed by JSON.stringify of { text, brands }\nconst detectionResultsCache = new Map<string, Map<string, BrandDetectionResult>>();\n\ninterface HighlightedResponseProps {\n  response: AIResponse;\n  brandName: string;\n  competitors: string[];\n  showHighlighting?: boolean;\n  highlightClassName?: string;\n  renderMarkdown?: boolean;\n}\n\ntype DetectionMatch = {\n  text: string;\n  index: number;\n  confidence: number;\n  pattern?: string;\n};\n\nconst TARGET_HIGHLIGHT_CLASS = 'bg-orange-100 text-orange-900 font-semibold px-1 rounded-sm border border-orange-200';\nconst COMPETITOR_HIGHLIGHT_CLASS = 'bg-gray-200 text-gray-900 font-medium px-1 rounded-sm border border-gray-300';\nconst DEFAULT_HIGHLIGHT_CLASS = 'bg-gray-100 text-gray-900 px-1 rounded-sm';\n\n// Clean up response text by removing artifacts\nfunction cleanResponseText(text: string, providerName?: string): string {\n  let cleaned = text;\n  \n  // Remove standalone numbers at the beginning of lines (like \"0\\n\")\n  cleaned = cleaned.replace(/^\\d+\\n/gm, '');\n  \n  // Remove provider name at the beginning if it exists\n  if (providerName) {\n    const providerPattern = new RegExp(`^${providerName}\\\\s*\\n?`, 'i');\n    cleaned = cleaned.replace(providerPattern, '');\n  }\n  \n  // Remove common provider names at the beginning\n  const commonProviders = ['OpenAI', 'Anthropic', 'Google', 'Perplexity'];\n  commonProviders.forEach(provider => {\n    const pattern = new RegExp(`^${provider}\\\\s*\\n?`, 'i');\n    cleaned = cleaned.replace(pattern, '');\n  });\n  \n  // Remove HTML tags but preserve the content\n  cleaned = cleaned.replace(/<[^>]*>/g, '');\n  \n  // Remove inline \"Sources consultées\" section if present\n  cleaned = cleaned.replace(/\\n?Sources consultées?:[\\s\\S]*$/i, '').trim();\n\n  // Clean up extra whitespace\n  cleaned = cleaned.replace(/\\n\\s*\\n\\s*\\n/g, '\\n\\n');\n  \n  return cleaned.trim();\n}\n\nexport function HighlightedResponse({\n  response,\n  brandName,\n  competitors,\n  showHighlighting = true,\n  highlightClassName = DEFAULT_HIGHLIGHT_CLASS,\n  renderMarkdown = true\n}: HighlightedResponseProps) {\n  const cleanedResponse = cleanResponseText(response.response, response.provider);\n  const { detectMultipleBrands, isLoading: isDetectionLoading, error: detectionError, clearError } = useBrandDetection();\n  \n  // State for enhanced detection results\n  const [enhancedDetectionResults, setEnhancedDetectionResults] = React.useState<Map<string, BrandDetectionResult>>(new Map());\n  \n  // State for fallback detection (simple text matching)\n  const [fallbackDetectionResults, setFallbackDetectionResults] = React.useState<Map<string, BrandDetectionResult>>(new Map());\n  const [useFallback, setUseFallback] = React.useState(false);\n\n  const normalizedTargetBrand = React.useMemo(() => brandName.trim().toLowerCase(), [brandName]);\n\n  const competitorNameSet = React.useMemo(() => {\n    const set = new Set<string>();\n    competitors.forEach((competitor) => {\n      if (!competitor) return;\n      const normalized = competitor.trim().toLowerCase();\n      if (normalized) {\n        set.add(normalized);\n      }\n    });\n    return set;\n  }, [competitors]);\n\n  const allBrandCandidates = React.useMemo(() => {\n    const seen = new Set<string>();\n    const names = [brandName, ...competitors];\n\n    return names\n      .map((name) => (typeof name === 'string' ? name.trim() : ''))\n      .filter((name) => {\n        if (!name) return false;\n        const key = name.toLowerCase();\n        if (seen.has(key)) return false;\n        seen.add(key);\n        return true;\n      });\n  }, [brandName, competitors]);\n\n  // Fonction de fallback simple pour la détection de marques\n  const performFallbackDetection = React.useCallback((text: string, brands: string[]): Map<string, BrandDetectionResult> => {\n    const results = new Map<string, BrandDetectionResult>();\n    \n    brands.forEach(brand => {\n      const matches: BrandDetectionMatch[] = [];\n      const brandLower = brand.toLowerCase();\n      const textLower = text.toLowerCase();\n      \n      // Recherche simple insensible à la casse\n      let index = 0;\n      while ((index = textLower.indexOf(brandLower, index)) !== -1) {\n        // Vérifier que c'est un mot complet (pas une partie d'un autre mot)\n        const before = index > 0 ? textLower[index - 1] : ' ';\n        const after = index + brandLower.length < textLower.length ? textLower[index + brandLower.length] : ' ';\n        \n        if (!/[a-zA-Z0-9]/.test(before) && !/[a-zA-Z0-9]/.test(after)) {\n          matches.push({\n            text: text.substring(index, index + brandLower.length),\n            index,\n            brandName: brand,\n            variation: brand,\n            confidence: 0.5 // Confiance plus faible pour le fallback\n          });\n        }\n        index += brandLower.length;\n      }\n      \n      results.set(brand, {\n        mentioned: matches.length > 0,\n        matches,\n        confidence: matches.length > 0 ? 0.5 : 0\n      });\n    });\n    \n    console.log(`[Fallback Detection] Détection simple pour ${brands.length} marques: ${results.size} résultats`);\n    return results;\n  }, []);\n\n  // Enhanced detection with intelligent AI variations\n  const cacheKey = React.useMemo(() => {\n    // Stable cache key for this response + candidates\n    return JSON.stringify({ text: cleanedResponse, brands: allBrandCandidates });\n  }, [cleanedResponse, allBrandCandidates]);\n\n  React.useEffect(() => {\n    // Decide if we need enhanced detection:\n    // - No highlighting → skip\n    // - If provider supplied detection details AND competitor matches, skip\n    const hasProviderDetails = Boolean(response.detectionDetails);\n    const providerHasCompetitors = hasProviderDetails && Boolean(\n      (response.detectionDetails as any)?.competitorMatches &&\n      ((response.detectionDetails as any)?.competitorMatches instanceof Map\n        ? (response.detectionDetails as any)?.competitorMatches.size > 0\n        : Object.keys((response.detectionDetails as any)?.competitorMatches || {}).length > 0)\n    );\n\n    if (!showHighlighting || (hasProviderDetails && providerHasCompetitors)) {\n      // Skip if highlighting is disabled or provider already supplied competitor matches\n      return;\n    }\n\n    const performIntelligentDetection = async () => {\n      try {\n        // Use cache if available\n        const cached = detectionResultsCache.get(cacheKey);\n        if (cached) {\n          setEnhancedDetectionResults(cached);\n          setUseFallback(false);\n          return;\n        }\n\n        const results = await detectMultipleBrands(cleanedResponse, allBrandCandidates, {\n          caseSensitive: false,\n          excludeNegativeContext: false,\n          minConfidence: 0.3\n        });\n        \n        setEnhancedDetectionResults(results);\n        setUseFallback(false);\n        detectionResultsCache.set(cacheKey, results);\n      } catch (error) {\n        console.error('Intelligent brand detection failed, using fallback:', error);\n        \n        // Utiliser le fallback en cas d'erreur\n        const fallbackResults = performFallbackDetection(cleanedResponse, allBrandCandidates);\n        setFallbackDetectionResults(fallbackResults);\n        setUseFallback(true);\n        setEnhancedDetectionResults(new Map());\n        \n        // Effacer l'erreur après avoir activé le fallback\n        clearError();\n      }\n    };\n\n    performIntelligentDetection();\n  }, [cacheKey, cleanedResponse, allBrandCandidates, showHighlighting, response.detectionDetails]);\n\n  const detectionResults = React.useMemo(() => {\n    if (!showHighlighting) return new Map();\n\n    const results = new Map<string, BrandDetectionResult>();\n\n    // Seed from provider details if present\n    if (response.detectionDetails) {\n      if (response.detectionDetails.brandMatches && response.detectionDetails.brandMatches.length > 0) {\n        const convertedMatches: BrandDetectionMatch[] = response.detectionDetails.brandMatches.map(match => ({\n          text: match.text,\n          index: match.index,\n          brandName: brandName,\n          variation: brandName, // legacy\n          confidence: match.confidence\n        }));\n        results.set(brandName, {\n          mentioned: true,\n          matches: convertedMatches,\n          confidence: Math.max(...response.detectionDetails.brandMatches.map((m) => m.confidence))\n        });\n      }\n\n      const cm = (response.detectionDetails as any).competitorMatches;\n      if (cm) {\n        if (cm instanceof Map) {\n          cm.forEach((matches: any[], competitor: string) => {\n            if (Array.isArray(matches) && matches.length > 0) {\n              const convertedMatches: BrandDetectionMatch[] = matches.map((match: any) => ({\n                text: match.text,\n                index: match.index,\n                brandName: competitor,\n                variation: competitor, // legacy\n                confidence: match.confidence\n              }));\n              results.set(competitor, {\n                mentioned: true,\n                matches: convertedMatches,\n                confidence: Math.max(...convertedMatches.map((m) => m.confidence))\n              });\n            }\n          });\n        } else {\n          Object.entries(cm as Record<string, any[]>).forEach(([competitor, matches]) => {\n            if (Array.isArray(matches) && matches.length > 0) {\n              const convertedMatches: BrandDetectionMatch[] = matches.map((match: any) => ({\n                text: match.text,\n                index: match.index,\n                brandName: competitor,\n                variation: competitor, // legacy\n                confidence: match.confidence\n              }));\n              results.set(competitor, {\n                mentioned: true,\n                matches: convertedMatches,\n                confidence: Math.max(...convertedMatches.map((m) => m.confidence))\n              });\n            }\n          });\n        }\n      }\n    }\n\n    // Merge in enhanced results to fill missing competitors (e.g., Perplexity)\n    if (enhancedDetectionResults.size > 0) {\n      enhancedDetectionResults.forEach((enh, name) => {\n        const existing = results.get(name);\n        if (!existing || existing.matches.length === 0) {\n          results.set(name, enh);\n        }\n      });\n    }\n\n    // Si on utilise le fallback, fusionner les résultats de fallback\n    if (useFallback && fallbackDetectionResults.size > 0) {\n      fallbackDetectionResults.forEach((fallback, name) => {\n        const existing = results.get(name);\n        if (!existing || existing.matches.length === 0) {\n          results.set(name, fallback);\n        }\n      });\n    }\n\n    return results;\n  }, [brandName, response, showHighlighting, enhancedDetectionResults, useFallback, fallbackDetectionResults]);\n\n  const segments = React.useMemo(() => {\n    if (!showHighlighting || renderMarkdown) return [];\n    return highlightBrandMentions(cleanedResponse, detectionResults);\n  }, [cleanedResponse, detectionResults, showHighlighting, renderMarkdown]);\n\n  const highlightClassResolver = React.useCallback((segment: HighlightedSegment) => {\n    const matchedBrand = segment.brandName?.trim().toLowerCase();\n    if (!matchedBrand) return highlightClassName;\n\n    if (normalizedTargetBrand && matchedBrand === normalizedTargetBrand) {\n      return TARGET_HIGHLIGHT_CLASS;\n    }\n\n    if (competitorNameSet.has(matchedBrand)) {\n      return COMPETITOR_HIGHLIGHT_CLASS;\n    }\n\n    return highlightClassName;\n  }, [competitorNameSet, highlightClassName, normalizedTargetBrand]);\n\n  const highlightedElements = React.useMemo(() => {\n    if (!showHighlighting || renderMarkdown) return [];\n    return segmentsToReactElements(segments, highlightClassResolver);\n  }, [segments, showHighlighting, highlightClassResolver, renderMarkdown]);\n\n  const uniqueKeyRef = React.useRef(0);\n  uniqueKeyRef.current = 0;\n\n  // Configuration for brand highlighting\n  const highlightingConfig: BrandHighlightingConfig = React.useMemo(() => ({\n    targetBrand: brandName,\n    competitors,\n    targetHighlightClass: TARGET_HIGHLIGHT_CLASS,\n    competitorHighlightClass: COMPETITOR_HIGHLIGHT_CLASS,\n    defaultHighlightClass: highlightClassName\n  }), [brandName, competitors, highlightClassName]);\n\n  // Simplified highlighting functions using utilities\n  const highlightString = React.useCallback((text: string): React.ReactNode => {\n    return highlightTextWithBrands(text, detectionResults, highlightingConfig, showHighlighting);\n  }, [detectionResults, highlightingConfig, showHighlighting]);\n\n  const highlightMarkdownChildren = React.useCallback((children: React.ReactNode): React.ReactNode => {\n    return highlightMarkdownChildrenUtil(children, detectionResults, highlightingConfig, showHighlighting);\n  }, [detectionResults, highlightingConfig, showHighlighting]);\n\n  // Indicateur de mode fallback\n  const fallbackIndicator = useFallback && (\n    <div className=\"mb-2 p-2 bg-yellow-50 border border-yellow-200 rounded text-xs text-yellow-800\">\n      <span className=\"font-medium\">Mode de détection simplifiée :</span> La détection intelligente des marques n'est pas disponible. Utilisation d'une détection basique.\n    </div>\n  );\n\n  if (!showHighlighting) {\n    if (renderMarkdown) {\n      return (\n        <div>\n          {fallbackIndicator}\n          <ReactMarkdown\n            remarkPlugins={[remarkGfm]}\n            components={{\n              p: ({ children }) => <p className=\"mb-2\">{children}</p>,\n              ul: ({ children }) => <ul className=\"list-disc pl-4 mb-2\">{children}</ul>,\n              ol: ({ children }) => <ol className=\"list-decimal pl-4 mb-2\">{children}</ol>,\n              li: ({ children }) => <li className=\"mb-1\">{children}</li>,\n              strong: ({ children }) => <strong className=\"font-semibold\">{children}</strong>,\n              em: ({ children }) => <em className=\"italic\">{children}</em>,\n              table: ({ children }) => (\n                <div className=\"overflow-x-auto my-4 max-w-full\">\n                  <table className=\"w-full max-w-full border-collapse border border-gray-300 text-xs table-fixed\">\n                    {children}\n                  </table>\n                </div>\n              ),\n              thead: ({ children }) => <thead className=\"bg-gray-50\">{children}</thead>,\n              tbody: ({ children }) => <tbody>{children}</tbody>,\n              tr: ({ children }) => <tr className=\"border-b border-gray-200\">{children}</tr>,\n              th: ({ children }) => (\n                <th className=\"border border-gray-300 px-2 py-1 text-left font-semibold bg-gray-100\">\n                  {children}\n                </th>\n              ),\n              td: ({ children }) => (\n                <td className=\"border border-gray-300 px-2 py-1\">\n                  {children}\n                </td>\n              )\n            }}\n          >\n            {cleanedResponse}\n          </ReactMarkdown>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        {fallbackIndicator}\n        {cleanedResponse}\n      </div>\n    );\n  }\n\n  if (renderMarkdown) {\n    return (\n      <div className=\"prose prose-sm max-w-full prose-slate overflow-hidden\">\n        {fallbackIndicator}\n        <ReactMarkdown\n          remarkPlugins={[remarkGfm]}\n          components={{\n            p: ({ children }) => <p className=\"mb-3 leading-relaxed\">{highlightMarkdownChildren(children)}</p>,\n            ul: ({ children }) => <ul className=\"list-disc pl-5 mb-3 space-y-1\">{highlightMarkdownChildren(children)}</ul>,\n            ol: ({ children }) => <ol className=\"list-decimal pl-5 mb-3 space-y-1\">{highlightMarkdownChildren(children)}</ol>,\n            li: ({ children }) => <li className=\"text-sm\">{highlightMarkdownChildren(children)}</li>,\n            strong: ({ children }) => <strong className=\"font-semibold text-gray-900\">{highlightMarkdownChildren(children)}</strong>,\n            em: ({ children }) => <em className=\"italic\">{highlightMarkdownChildren(children)}</em>,\n            h1: ({ children }) => <h1 className=\"text-lg font-bold mb-3 text-gray-900\">{highlightMarkdownChildren(children)}</h1>,\n            h2: ({ children }) => <h2 className=\"text-base font-semibold mb-2 text-gray-900\">{highlightMarkdownChildren(children)}</h2>,\n            h3: ({ children }) => <h3 className=\"text-sm font-semibold mb-2 text-gray-900\">{highlightMarkdownChildren(children)}</h3>,\n            table: ({ children }) => (\n              <div className=\"overflow-x-auto my-4 max-w-full\">\n                <table className=\"w-full max-w-full border-collapse border border-gray-300 text-xs table-fixed\">\n                  {highlightMarkdownChildren(children)}\n                </table>\n              </div>\n            ),\n            thead: ({ children }) => <thead className=\"bg-gray-50\">{highlightMarkdownChildren(children)}</thead>,\n            tbody: ({ children }) => <tbody>{highlightMarkdownChildren(children)}</tbody>,\n            tr: ({ children }) => <tr className=\"border-b border-gray-200\">{highlightMarkdownChildren(children)}</tr>,\n            th: ({ children }) => (\n              <th className=\"border border-gray-300 px-2 py-1 text-left font-semibold bg-gray-100\">\n                {highlightMarkdownChildren(children)}\n              </th>\n            ),\n            td: ({ children }) => (\n              <td className=\"border border-gray-300 px-2 py-1\">\n                {highlightMarkdownChildren(children)}\n              </td>\n            ),\n            code: ({ children, className }) => {\n              if (className?.includes('language-')) {\n                return (\n                  <pre className=\"bg-gray-100 rounded p-2 text-xs overflow-x-auto mb-3\">\n                    <code>{children}</code>\n                  </pre>\n                );\n              }\n              return <code className=\"bg-gray-100 px-1 py-0.5 rounded text-xs\">{children}</code>;\n            },\n            blockquote: ({ children }) => (\n              <blockquote className=\"border-l-4 border-gray-300 pl-4 italic text-gray-600 mb-3\">\n                {highlightMarkdownChildren(children)}\n              </blockquote>\n            )\n          }}\n        >\n          {cleanedResponse}\n        </ReactMarkdown>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      {fallbackIndicator}\n      <div className=\"whitespace-pre-wrap\">{highlightedElements}</div>\n    </div>\n  );\n}\n\n// Export a simpler version for use in tooltips or previews\nexport function HighlightedText({\n  text,\n  brandName,\n  competitors = [],\n  highlightClassName = DEFAULT_HIGHLIGHT_CLASS\n}: {\n  text: string;\n  brandName: string;\n  competitors?: string[];\n  highlightClassName?: string;\n}) {\n  const { detectMultipleBrands } = useBrandDetection();\n  const normalizedTargetBrand = React.useMemo(() => brandName.trim().toLowerCase(), [brandName]);\n\n  const competitorNameSet = React.useMemo(() => {\n    const set = new Set<string>();\n    competitors.forEach((competitor) => {\n      if (!competitor) return;\n      const normalized = competitor.trim().toLowerCase();\n      if (normalized) {\n        set.add(normalized);\n      }\n    });\n    return set;\n  }, [competitors]);\n\n  const brandCandidates = React.useMemo(() => {\n    const seen = new Set<string>();\n    const candidates = [brandName, ...competitors];\n\n    return candidates\n      .map((candidate) => (typeof candidate === 'string' ? candidate.trim() : ''))\n      .filter((candidate) => {\n        if (!candidate) return false;\n        const key = candidate.toLowerCase();\n        if (seen.has(key)) return false;\n        seen.add(key);\n        return true;\n      });\n  }, [brandName, competitors]);\n\n  const highlightClassResolver = React.useCallback((segment: HighlightedSegment) => {\n    const matchedBrand = segment.brandName?.trim().toLowerCase();\n    if (!matchedBrand) return highlightClassName;\n\n    if (normalizedTargetBrand && matchedBrand === normalizedTargetBrand) {\n      return TARGET_HIGHLIGHT_CLASS;\n    }\n\n    if (competitorNameSet.has(matchedBrand)) {\n      return COMPETITOR_HIGHLIGHT_CLASS;\n    }\n\n    return highlightClassName;\n  }, [competitorNameSet, highlightClassName, normalizedTargetBrand]);\n\n  const [detectionResults, setDetectionResults] = React.useState<Map<string, BrandDetectionResult>>(new Map());\n\n  React.useEffect(() => {\n    const performDetection = async () => {\n      try {\n        const results = await detectMultipleBrands(text, brandCandidates, {\n          caseSensitive: false,\n          excludeNegativeContext: false,\n          minConfidence: 0.3\n        });\n        setDetectionResults(results);\n      } catch (error) {\n        console.error('Brand detection failed:', error);\n        setDetectionResults(new Map());\n      }\n    };\n\n    performDetection();\n  }, [brandCandidates, text]);\n\n  const segments = React.useMemo(() => highlightBrandMentions(text, detectionResults), [text, detectionResults]);\n\n  const elements = React.useMemo(\n    () => segmentsToReactElements(segments, highlightClassResolver),\n    [segments, highlightClassResolver]\n  );\n\n  return <>{elements}</>;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\components\\brand-monitor\\prompts-responses-tab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ReactMarkdown' is defined but never used.","line":8,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":21},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":134,"column":26,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5073,5208],"text":"\r\n            Les modèles d&apos;IA ont effectué des recherches en ligne pour obtenir des informations plus récentes et précises\r\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5073,5208],"text":"\r\n            Les modèles d&lsquo;IA ont effectué des recherches en ligne pour obtenir des informations plus récentes et précises\r\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5073,5208],"text":"\r\n            Les modèles d&#39;IA ont effectué des recherches en ligne pour obtenir des informations plus récentes et précises\r\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5073,5208],"text":"\r\n            Les modèles d&rsquo;IA ont effectué des recherches en ligne pour obtenir des informations plus récentes et précises\r\n          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":384,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":384,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18569,18572],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18569,18572],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":446,"column":42,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[22239,22333],"text":"\r\n                      Aucun fournisseur d&apos;IA n'a pu traiter ce prompt.\r\n                    "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[22239,22333],"text":"\r\n                      Aucun fournisseur d&lsquo;IA n'a pu traiter ce prompt.\r\n                    "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[22239,22333],"text":"\r\n                      Aucun fournisseur d&#39;IA n'a pu traiter ce prompt.\r\n                    "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[22239,22333],"text":"\r\n                      Aucun fournisseur d&rsquo;IA n'a pu traiter ce prompt.\r\n                    "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":446,"column":47,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[22239,22333],"text":"\r\n                      Aucun fournisseur d'IA n&apos;a pu traiter ce prompt.\r\n                    "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[22239,22333],"text":"\r\n                      Aucun fournisseur d'IA n&lsquo;a pu traiter ce prompt.\r\n                    "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[22239,22333],"text":"\r\n                      Aucun fournisseur d'IA n&#39;a pu traiter ce prompt.\r\n                    "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[22239,22333],"text":"\r\n                      Aucun fournisseur d'IA n&rsquo;a pu traiter ce prompt.\r\n                    "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":462,"column":66,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[22877,22899],"text":"No results found for &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[22877,22899],"text":"No results found for &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[22877,22899],"text":"No results found for &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[22877,22899],"text":"No results found for &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":462,"column":80,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[22912,22913],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[22912,22913],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[22912,22913],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[22912,22913],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":30,"column":9,"nodeType":"JSXOpeningElement","endLine":34,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":38,"column":9,"nodeType":"JSXOpeningElement","endLine":42,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":57,"column":9,"nodeType":"JSXOpeningElement","endLine":61,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\n/* eslint-disable @next/next/no-img-element */\r\n\r\nimport React, { useState } from 'react';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { ChevronDown, ChevronsDown, ChevronsUp } from 'lucide-react';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport { BrandPrompt, AIResponse } from '@/lib/types';\r\nimport { HighlightedResponse } from './highlighted-response';\r\nimport { useTranslations } from 'next-intl';\r\nimport { logger } from '@/lib/logger';\r\n\r\ninterface PromptsResponsesTabProps {\r\n  prompts: BrandPrompt[];\r\n  responses: AIResponse[];\r\n  expandedPromptIndex: number | null;\r\n  onToggleExpand: (index: number | null) => void;\r\n  brandName: string;\r\n  competitors: string[];\r\n  webSearchUsed?: boolean;\r\n  hideWebSearchSources?: boolean;\r\n}\r\n\r\n// Provider icon mapping\r\nconst getProviderIcon = (provider: string) => {\r\n  switch (provider) {\r\n    case 'OpenAI':\r\n      return (\r\n        <img \r\n          src=\"https://cdn.brandfetch.io/idR3duQxYl/theme/dark/symbol.svg?c=1dxbfHSJFAPEGdCLU4o5B\" \r\n          alt=\"OpenAI\" \r\n          className=\"w-6 h-6\"\r\n        />\r\n      );\r\n    case 'Anthropic':\r\n      return (\r\n        <img \r\n          src=\"https://cdn.brandfetch.io/idmJWF3N06/theme/dark/symbol.svg\" \r\n          alt=\"Anthropic\" \r\n          className=\"w-6 h-6\"\r\n        />\r\n      );\r\n    case 'Google':\r\n      return (\r\n        <div className=\"w-6 h-6 flex items-center justify-center\">\r\n          <svg viewBox=\"0 0 24 24\" className=\"w-6 h-6\">\r\n            <path fill=\"#4285F4\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\r\n            <path fill=\"#34A853\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\r\n            <path fill=\"#FBBC05\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\r\n            <path fill=\"#EA4335\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\r\n          </svg>\r\n        </div>\r\n      );\r\n    case 'Perplexity':\r\n      return (\r\n        <img \r\n          src=\"https://cdn.brandfetch.io/idNdawywEZ/w/800/h/800/theme/dark/icon.png?c=1dxbfHSJFAPEGdCLU4o5B\" \r\n          alt=\"Perplexity\" \r\n          className=\"w-6 h-6\"\r\n        />\r\n      );\r\n    default:\r\n      return <div className=\"w-6 h-6 bg-gray-400 rounded\" />;\r\n  }\r\n};\r\n\r\nexport function PromptsResponsesTab({\r\n  prompts,\r\n  responses,\r\n  expandedPromptIndex,\r\n  onToggleExpand,\r\n  brandName,\r\n  competitors,\r\n  webSearchUsed = false,\r\n  hideWebSearchSources = false\r\n}: PromptsResponsesTabProps) {\r\n  const t = useTranslations('brandMonitor');\r\n  const [allExpanded, setAllExpanded] = useState(false);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  // Track which (prompt, provider) sources list is expanded beyond 3\r\n  const [expandedSources, setExpandedSources] = useState<Record<string, boolean>>({});\r\n  \r\n  const handleExpandAll = () => {\r\n    if (allExpanded) {\r\n      // Collapse all\r\n      setAllExpanded(false);\r\n      onToggleExpand(null);\r\n    } else {\r\n      // Expand all - we'll use -1 as a special value to indicate all expanded\r\n      setAllExpanded(true);\r\n      onToggleExpand(-1);\r\n    }\r\n  };\r\n  \r\n  // Filter prompts based on search query\r\n  const filteredPromptIndices = prompts\r\n    .map((prompt, idx) => {\r\n      if (!searchQuery) return idx;\r\n      \r\n      const promptMatches = prompt.prompt.toLowerCase().includes(searchQuery.toLowerCase());\r\n      \r\n      // Check if any response contains the search query\r\n      const promptResponses = responses?.filter(response => \r\n        response.prompt === prompt.prompt\r\n      ) || [];\r\n      \r\n      const responseMatches = promptResponses.some(response => \r\n        response.response.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        response.provider.toLowerCase().includes(searchQuery.toLowerCase())\r\n      );\r\n      \r\n      return (promptMatches || responseMatches) ? idx : null;\r\n    })\r\n    .filter(idx => idx !== null);\r\n  \r\n  return (\r\n    <div className=\"space-y-2 max-w-full overflow-hidden\">\r\n      {/* Web Search Indicator */}\r\n      {webSearchUsed && !hideWebSearchSources && (\r\n        <div className=\"mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\r\n          <div className=\"flex items-center gap-2\">\r\n            <svg className=\"w-5 h-5 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\r\n            </svg>\r\n            <span className=\"text-sm font-medium text-blue-800\">\r\n              Recherche en ligne activée\r\n            </span>\r\n            <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800\">\r\n              Données récentes\r\n            </Badge>\r\n          </div>\r\n          <p className=\"text-xs text-blue-600 mt-1\">\r\n            Les modèles d'IA ont effectué des recherches en ligne pour obtenir des informations plus récentes et précises\r\n          </p>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Search and Controls */}\r\n      {prompts.length > 0 && (\r\n        <div className=\"flex flex-col gap-3 mb-4\">\r\n          <div className=\"flex items-center gap-4\">\r\n            {/* Search Input */}\r\n            <div className=\"flex-1 relative\">\r\n              <input\r\n                type=\"text\"\r\n                value={searchQuery}\r\n                onChange={(e) => setSearchQuery(e.target.value)}\r\n                placeholder={t('searchPromptsPlaceholder')}\r\n                className=\"w-full px-4 py-2 pl-10 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent text-sm\"\r\n              />\r\n              <svg \r\n                className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\"\r\n                fill=\"none\" \r\n                stroke=\"currentColor\" \r\n                viewBox=\"0 0 24 24\"\r\n              >\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\r\n              </svg>\r\n              {searchQuery && (\r\n                <button\r\n                  onClick={() => setSearchQuery('')}\r\n                  className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\r\n                >\r\n                  <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\r\n                  </svg>\r\n                </button>\r\n              )}\r\n            </div>\r\n            \r\n            {/* Expand/Collapse All Button */}\r\n            <button\r\n              onClick={handleExpandAll}\r\n              className=\"h-9 px-4 py-2 rounded-[10px] text-sm font-medium flex items-center gap-2 transition-all duration-200 bg-orange-500 text-white hover:bg-orange-600 [box-shadow:inset_0px_-2.108433723449707px_0px_0px_#c2410c,_0px_1.2048193216323853px_6.325301647186279px_0px_rgba(234,_88,_12,_58%)] hover:translate-y-[1px] hover:scale-[0.98] hover:[box-shadow:inset_0px_-1px_0px_0px_#c2410c,_0px_1px_3px_0px_rgba(234,_88,_12,_40%)] active:translate-y-[2px] active:scale-[0.97] active:[box-shadow:inset_0px_1px_1px_0px_#c2410c,_0px_1px_2px_0px_rgba(234,_88,_12,_30%)]\"\r\n            >\r\n              {allExpanded ? (\r\n                <>\r\n                  <ChevronsUp className=\"h-4 w-4\" />\r\n                  Collapse All\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <ChevronsDown className=\"h-4 w-4\" />\r\n                  Expand All\r\n                </>\r\n              )}\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"flex flex-wrap items-center gap-4 text-xs text-gray-600\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <span className=\"inline-flex h-3 w-3 rounded-sm border border-orange-300 bg-orange-200\" aria-hidden=\"true\" />\r\n              <span>{t('legendTargetBrand', { defaultMessage: 'Target brand mentions' })}</span>\r\n            </div>\r\n            <div className=\"flex items-center gap-2\">\r\n              <span className=\"inline-flex h-3 w-3 rounded-sm border border-gray-300 bg-gray-200\" aria-hidden=\"true\" />\r\n              <span>{t('legendCompetitorBrand', { defaultMessage: 'Competitor mentions' })}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {prompts.map((promptData, idx) => {\r\n        // Skip if filtered out\r\n        if (!filteredPromptIndices.includes(idx)) return null;\r\n        \r\n        // Find responses for this prompt\r\n        const promptResponses = responses?.filter(response => \r\n          response.prompt === promptData.prompt\r\n        ) || [];\r\n        \r\n        // Debug logging to identify prompt matching issues\r\n        logger.debug(`[PromptsResponsesTab] Prompt ${idx} - Expected: \"${promptData.prompt?.substring(0, 50)}...\"`);\r\n        logger.debug(`[PromptsResponsesTab] Total responses available: ${responses?.length || 0}`);\r\n        logger.debug(`[PromptsResponsesTab] Matched responses: ${promptResponses.length}`);\r\n        \r\n        if (responses && responses.length > 0) {\r\n          logger.debug(`[PromptsResponsesTab] Available response prompts:`, \r\n            responses.map((r, i) => `${i}: \"${r.prompt?.substring(0, 50)}...\"`));\r\n        }\r\n        \r\n        if (responses && responses.length > 0 && promptResponses.length === 0) {\r\n          logger.warn(`[PromptsResponsesTab] ❌ No responses matched for prompt ${idx}`);\r\n        }\r\n        \r\n        // Check if any provider mentioned the brand\r\n        const hasBrandMention = promptResponses.some(r => r.brandMentioned);\r\n        \r\n        // Check if this tile is expanded - auto-expand when searching\r\n        const isExpanded = searchQuery \r\n          ? true \r\n          : (expandedPromptIndex === -1 || expandedPromptIndex === idx);\r\n        \r\n        return (\r\n          <div\r\n            key={idx}\r\n            className={`\r\n              relative border rounded-lg transition-all duration-300 max-w-full overflow-hidden\r\n              ${isExpanded \r\n                ? 'border-orange-200 bg-white shadow-md' \r\n                : 'border-gray-200 bg-white hover:border-orange-100 hover:shadow-sm'\r\n              }\r\n            `}\r\n          >\r\n            {/* Tile Header - Compact single line */}\r\n            <div \r\n              className=\"px-3 py-4 cursor-pointer select-none\"\r\n              onClick={() => {\r\n                if (expandedPromptIndex === -1) {\r\n                  // If all are expanded, clicking one should collapse all and keep this one expanded\r\n                  setAllExpanded(false);\r\n                  onToggleExpand(idx);\r\n                } else {\r\n                  // Normal toggle behavior\r\n                  onToggleExpand(isExpanded ? null : idx);\r\n                }\r\n              }}\r\n            >\r\n              <div className=\"flex items-center justify-between gap-3\">\r\n                <div className=\"flex items-center gap-2 flex-1 min-w-0\">\r\n                  <p className=\"text-sm font-medium text-gray-900 truncate\">{promptData.prompt}</p>\r\n                  {hasBrandMention && (\r\n                    <Badge variant=\"default\" className=\"text-xs bg-green-100 text-green-800 shrink-0\">\r\n                      Brand Mentioned\r\n                    </Badge>\r\n                  )}\r\n                </div>\r\n                \r\n                {/* Provider icons preview - deduplicated and ordered */}\r\n                <div className=\"flex items-center gap-2 shrink-0\">\r\n                  {['OpenAI', 'Anthropic', 'Google', 'Perplexity'].map((providerName) => {\r\n                    const providerResponse = promptResponses.find(r => r.provider === providerName);\r\n                    if (!providerResponse) return null;\r\n                    \r\n                    // Check if response failed (empty response text)\r\n                    const isFailed = !providerResponse.response || providerResponse.response.trim().length === 0;\r\n                    \r\n                    return (\r\n                      <div key={providerName} className=\"relative flex items-center\">\r\n                        <div className=\"w-6 h-6 flex items-center justify-center\">\r\n                          {getProviderIcon(providerName)}\r\n                        </div>\r\n                        {isFailed ? (\r\n                          <div className=\"absolute -top-0.5 -right-0.5 w-3 h-3 flex items-center justify-center bg-red-500 rounded-full border border-white\">\r\n                            <span className=\"text-white text-xs font-bold leading-none\">×</span>\r\n                          </div>\r\n                        ) : providerResponse.brandMentioned ? (\r\n                          <div className=\"absolute -top-0.5 -right-0.5 w-1.5 h-1.5 bg-green-500 rounded-full border border-white\" />\r\n                        ) : null}\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n                \r\n                {/* Expand/Collapse indicator */}\r\n                <div className={`transition-transform duration-300 shrink-0 ${isExpanded ? 'rotate-180' : ''}`}>\r\n                  <ChevronDown className=\"h-4 w-4 text-gray-400\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            {/* Expandable content */}\r\n            <div\r\n              className={`\r\n                overflow-hidden transition-all duration-300\r\n                ${isExpanded ? 'max-h-[4000px] opacity-100' : 'max-h-0 opacity-0'}\r\n              `}\r\n              onClick={(e) => e.stopPropagation()}\r\n            >\r\n              <div className=\"border-t border-gray-100 px-3 py-3\">\r\n                {promptResponses.length > 0 ? (\r\n                  <div className=\"space-y-4\">\r\n                    {['OpenAI', 'Anthropic', 'Google', 'Perplexity'].map((providerName) => {\r\n                      const response = promptResponses.find(r => r.provider === providerName);\r\n                      if (!response) return null;\r\n                      \r\n                      // Check if response failed (empty response text)\r\n                      const isFailed = !response.response || response.response.trim().length === 0;\r\n                      \r\n                      return (\r\n                      <div key={providerName} className=\"space-y-1\">\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <div className=\"flex items-center gap-1\">\r\n                            {getProviderIcon(response.provider)}\r\n                            <span className=\"font-medium text-sm text-gray-900\">{response.provider}</span>\r\n                          </div>\r\n                          {isFailed ? (\r\n                            <Badge variant=\"destructive\" className=\"text-xs bg-red-100 text-red-800\">\r\n                              Failed ×\r\n                            </Badge>\r\n                          ) : response.brandMentioned ? (\r\n                            <Badge variant=\"default\" className=\"text-xs bg-green-100 text-green-800\">\r\n                              Brand Mentioned\r\n                            </Badge>\r\n                          ) : null}\r\n                          {response.brandPosition && response.brandPosition > 0 && (\r\n                            <Badge variant=\"outline\" className=\"text-xs\">\r\n                              Position #{response.brandPosition}\r\n                            </Badge>\r\n                          )}\r\n                        </div>\r\n                        <div className=\"bg-gray-50 rounded-md p-3 text-sm text-gray-700 select-text cursor-text max-w-full overflow-hidden\">\r\n                          {isFailed ? (\r\n                            <div className=\"text-red-600 italic\">\r\n                              Response failed or returned empty content\r\n                            </div>\r\n                          ) : (\r\n                            <HighlightedResponse\r\n                              response={response}\r\n                              brandName={brandName}\r\n                              competitors={competitors}\r\n                              showHighlighting={true}\r\n                              renderMarkdown={true}\r\n                            />\r\n                          )}\r\n                        </div>\r\n                        \r\n                        {/* Web Search Sources */}\r\n                        {!hideWebSearchSources && response.webSearchSources && response.webSearchSources.length > 0 && (\r\n                          <div className=\"mt-2 p-2 bg-blue-50 border border-blue-200 rounded-md\">\r\n                            <div className=\"flex items-center gap-1 mb-2\">\r\n                              <svg className=\"w-4 h-4 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\r\n                              </svg>\r\n                              <span className=\"text-xs font-medium text-blue-800\">Sources consultées</span>\r\n                            </div>\r\n                            <div className=\"space-y-1\">\r\n                              {(() => {\r\n                                const expandKey = `${idx}-${providerName}`;\r\n                                const toDomain = (input: string): string | null => {\r\n                                  if (!input) return null;\r\n                                  try {\r\n                                    const maybeUrl = /^(https?:)?\\/\\//i.test(input) ? input : `https://${input}`;\r\n                                    const { hostname } = new URL(maybeUrl);\r\n                                    return hostname.replace(/^www\\./i, '');\r\n                                  } catch {\r\n                                    // Fallback: strip path if any\r\n                                    return input.split('/')[0].replace(/^www\\./i, '').trim() || null;\r\n                                  }\r\n                                };\r\n                                const domains = Array.from(new Set(\r\n                                  (response.webSearchSources || [])\r\n                                    .map((s: any) => toDomain(\r\n                                      typeof s?.domain === 'string' && s.domain.trim()\r\n                                        ? s.domain\r\n                                        : (typeof s?.url === 'string' ? s.url : '')\r\n                                    ))\r\n                                    .filter(Boolean)\r\n                                )) as string[];\r\n\r\n                                const showAll = !!expandedSources[expandKey];\r\n                                const visible = showAll ? domains : domains.slice(0, 3);\r\n                                return (\r\n                                  <>\r\n                                    {visible.map((domain) => (\r\n                                      <div key={domain} className=\"text-xs text-blue-700\">\r\n                                        <a\r\n                                          href={`https://${domain}`}\r\n                                          target=\"_blank\"\r\n                                          rel=\"noopener noreferrer\"\r\n                                          className=\"hover:text-blue-900 underline\"\r\n                                        >\r\n                                          {domain}\r\n                                        </a>\r\n                                      </div>\r\n                                    ))}\r\n                                    {domains.length > 3 && (\r\n                                      showAll ? (\r\n                                        <button\r\n                                          type=\"button\"\r\n                                          onClick={() => setExpandedSources(prev => ({ ...prev, [expandKey]: false }))}\r\n                                          className=\"text-xs text-blue-600 italic underline\"\r\n                                        >\r\n                                          {t('sourcesTab.showLess')}\r\n                                        </button>\r\n                                      ) : (\r\n                                        <button\r\n                                          type=\"button\"\r\n                                          onClick={() => setExpandedSources(prev => ({ ...prev, [expandKey]: true }))}\r\n                                          className=\"text-xs text-blue-600 italic underline\"\r\n                                        >\r\n                                          +{domains.length - 3} {t('sourcesTab.showMore')}\r\n                                        </button>\r\n                                      )\r\n                                    )}\r\n                                  </>\r\n                                );\r\n                              })()}\r\n                            </div>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"text-center py-6 bg-red-50 border border-red-200 rounded-lg\">\r\n                    <div className=\"flex items-center justify-center gap-2 mb-2\">\r\n                      <svg className=\"w-5 h-5 text-red-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\r\n                      </svg>\r\n                      <span className=\"text-red-800 font-medium\">Aucune réponse disponible</span>\r\n                    </div>\r\n                    <p className=\"text-red-700 text-sm mb-2\">\r\n                      Aucun fournisseur d'IA n'a pu traiter ce prompt.\r\n                    </p>\r\n                    <p className=\"text-red-600 text-xs\">\r\n                      Vérifiez que les clés API sont configurées (OpenAI, Anthropic, Google, ou Perplexity).\r\n                    </p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n      \r\n      {/* No results message */}\r\n      {searchQuery && filteredPromptIndices.length === 0 && (\r\n        <div className=\"text-center py-8 bg-gray-50 rounded-lg\">\r\n          <p className=\"text-gray-600 mb-2\">No results found for \"{searchQuery}\"</p>\r\n          <p className=\"text-gray-500 text-sm\">Try searching for different keywords</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\components\\brand-monitor\\provider-rankings-tabs.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'weeklyChange' is defined but never used.","line":130,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":130,"endColumn":15}],"suppressedMessages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":19,"column":9,"nodeType":"JSXOpeningElement","endLine":23,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":27,"column":9,"nodeType":"JSXOpeningElement","endLine":31,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":46,"column":9,"nodeType":"JSXOpeningElement","endLine":50,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/* eslint-disable @next/next/no-img-element */\n\nimport React, { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Badge } from '@/components/ui/badge';\nimport { ProviderSpecificRanking } from '@/lib/types';\nimport { TrendingUp, TrendingDown, Minus } from 'lucide-react';\nimport Image from 'next/image';\nimport { useTranslations } from 'next-intl';\n\r\n// Provider icon mapping\r\nconst getProviderIcon = (provider: string) => {\r\n  switch (provider) {\r\n    case 'OpenAI':\r\n      return (\r\n        <img \r\n          src=\"https://cdn.brandfetch.io/idR3duQxYl/theme/dark/symbol.svg?c=1dxbfHSJFAPEGdCLU4o5B\" \r\n          alt=\"OpenAI\" \r\n          className=\"w-7 h-7\"\r\n        />\r\n      );\r\n    case 'Anthropic':\r\n      return (\r\n        <img \r\n          src=\"https://cdn.brandfetch.io/idmJWF3N06/theme/dark/symbol.svg\" \r\n          alt=\"Anthropic\" \r\n          className=\"w-6 h-6\"\r\n        />\r\n      );\r\n    case 'Google':\r\n      return (\r\n        <div className=\"w-7 h-7 flex items-center justify-center\">\r\n          <svg viewBox=\"0 0 24 24\" className=\"w-7 h-7\">\r\n            <path fill=\"#4285F4\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\r\n            <path fill=\"#34A853\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\r\n            <path fill=\"#FBBC05\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\r\n            <path fill=\"#EA4335\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\r\n          </svg>\r\n        </div>\r\n      );\r\n    case 'Perplexity':\r\n      return (\r\n        <img \r\n          src=\"https://cdn.brandfetch.io/idNdawywEZ/w/800/h/800/theme/dark/icon.png?c=1dxbfHSJFAPEGdCLU4o5B\" \r\n          alt=\"Perplexity\" \r\n          className=\"w-6 h-6\"\r\n        />\r\n      );\r\n    default:\r\n      return <div className=\"w-7 h-7 bg-gray-400 rounded\" />;\r\n  }\r\n};\r\n\r\ninterface ProviderRankingsTabsProps {\r\n  providerRankings: ProviderSpecificRanking[];\r\n  brandName: string;\r\n  shareOfVoice?: number;\r\n  averagePosition?: number;\r\n  sentimentScore?: number;\r\n  weeklyChange?: number;\r\n}\r\n\r\n// Company cell component with favicon support\r\nconst CompanyCell = ({ \r\n  name, \r\n  isOwn, \r\n  url \r\n}: { \r\n  name: string; \r\n  isOwn?: boolean; \r\n  url?: string;\r\n}) => {\r\n  const [faviconError, setFaviconError] = useState(false);\r\n  \r\n  // Generate favicon URL using Google's favicon service\r\n  const faviconUrl = url ? `https://www.google.com/s2/favicons?domain=${url}&sz=64` : null;\r\n  \r\n  return (\r\n    <div className=\"flex items-center gap-2\">\r\n      <div className=\"w-5 h-5 flex items-center justify-center rounded overflow-hidden flex-shrink-0\">\r\n        {faviconUrl && !faviconError ? (\r\n          <Image\r\n            src={faviconUrl}\r\n            alt={`${name} logo`}\r\n            width={20}\r\n            height={20}\r\n            className=\"object-contain\"\r\n            onError={() => setFaviconError(true)}\r\n          />\r\n        ) : (\r\n          <div className=\"w-5 h-5 bg-gray-200 rounded flex items-center justify-center\">\r\n            <span className=\"text-gray-600 font-semibold text-[10px]\">\r\n              {name.charAt(0).toUpperCase()}\r\n            </span>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <span className={`text-sm ${\r\n        isOwn ? 'font-semibold text-black' : 'text-black'\r\n      }`}>\r\n        {name}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Generate a fallback URL from competitor name\r\nconst generateFallbackUrl = (competitorName: string): string | undefined => {\r\n  const cleanName = competitorName.toLowerCase()\r\n    .replace(/[^a-z0-9\\s]/g, '')\r\n    .replace(/\\s+/g, '')\r\n    .trim();\r\n  \r\n  if (cleanName.length < 3 || ['inc', 'llc', 'corp', 'company', 'the'].includes(cleanName)) {\r\n    return undefined;\r\n  }\r\n  \r\n  return `${cleanName}.com`;\r\n};\r\n\r\nexport function ProviderRankingsTabs({ \r\n  providerRankings, \r\n  brandName,\r\n  shareOfVoice,\r\n  averagePosition,\r\n  sentimentScore,\r\n  weeklyChange\r\n}: ProviderRankingsTabsProps) {\r\n  const t = useTranslations('brandMonitor.providerRankings');\r\n  const [selectedProvider, setSelectedProvider] = useState(\r\n    providerRankings?.[0]?.provider || 'OpenAI'\r\n  );\r\n\r\n  if (!providerRankings || providerRankings.length === 0) return null;\r\n\r\n  const getSentimentBadge = (sentiment: string) => {\r\n    switch (sentiment) {\r\n      case 'positive':\r\n        return <Badge variant=\"secondary\" className=\"bg-green-50 text-black text-xs\">{t('positive')}</Badge>;\r\n      case 'negative':\r\n        return <Badge variant=\"secondary\" className=\"bg-red-50 text-black text-xs\">{t('negative')}</Badge>;\r\n      default:\r\n        return <Badge variant=\"secondary\" className=\"bg-gray-50 text-black text-xs\">{t('neutral')}</Badge>;\r\n    }\r\n  };\r\n\r\n  const getChangeIcon = (change: number | undefined) => {\r\n    if (!change) return <Minus className=\"h-3 w-3 text-gray-400\" />;\r\n    if (change > 0) return <TrendingUp className=\"h-3 w-3 text-black\" />;\r\n    return <TrendingDown className=\"h-3 w-3 text-black\" />;\r\n  };\r\n\r\n  // Get the selected provider's data\r\n  const selectedProviderData = providerRankings.find(p => p.provider === selectedProvider);\r\n  const competitors = selectedProviderData?.competitors || [];\r\n  const brandRank = competitors.findIndex(c => c.isOwn) + 1;\r\n  const brandVisibility = competitors.find(c => c.isOwn)?.visibilityScore || 0;\r\n\r\n  return (\r\n    <Card className=\"p-2 bg-card text-card-foreground gap-6 rounded-xl border py-6 shadow-sm border-gray-200 h-full flex flex-col\">\r\n      <CardHeader className=\"border-b\">\r\n        <div className=\"flex justify-between items-center\">\r\n          <div>\r\n            <CardTitle className=\"text-xl font-semibold\">{t('title')}</CardTitle>\r\n            <CardDescription className=\"text-sm text-gray-600 mt-1\">\r\n              {t('description')}\r\n            </CardDescription>\r\n          </div>\r\n          <div className=\"text-right\">\r\n            <p className=\"text-2xl font-bold text-orange-600\">#{brandRank}</p>\r\n            <p className=\"text-xs text-gray-500 mt-1\">{t('averageRank')}</p>\r\n          </div>\r\n        </div>\r\n      </CardHeader>\r\n      <CardContent className=\"pt-6 pb-2 flex-1 flex flex-col\">\r\n        <Tabs value={selectedProvider} onValueChange={setSelectedProvider} className=\"flex-1 flex flex-col\">\r\n          <TabsList className={`grid w-full mb-2 h-14 ${providerRankings.length === 2 ? 'grid-cols-2' : providerRankings.length === 3 ? 'grid-cols-3' : 'grid-cols-4'}`}>\r\n            {providerRankings.map(({ provider }) => {\r\n              // Provider info is now handled by icon mapping directly\r\n              return (\r\n                <TabsTrigger \r\n                  key={provider} \r\n                  value={provider} \r\n                  className=\"text-sm flex items-center justify-center h-full\"\r\n                  title={provider}\r\n                >\r\n                  {getProviderIcon(provider)}\r\n                </TabsTrigger>\r\n              );\r\n            })}\r\n          </TabsList>\r\n\r\n          {providerRankings.map(({ provider, competitors }) => (\r\n            <TabsContent key={provider} value={provider} className=\"mt-0\">\r\n              <div className=\"overflow-x-auto rounded-lg border border-gray-200\">\r\n                <table className=\"w-full border-collapse\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th className=\"bg-gray-50 border-b border-r border-gray-200 text-left p-3 text-xs font-medium text-gray-900 w-8\">#</th>\r\n                      <th className=\"bg-gray-50 border-b border-r border-gray-200 text-left p-3 text-xs font-medium text-gray-900 w-[200px]\">{t('company')}</th>\r\n                      <th className=\"bg-gray-50 border-b border-r border-gray-200 text-right p-3 text-xs font-medium text-gray-900\">{t('visibility')}</th>\r\n                      <th className=\"bg-gray-50 border-b border-r border-gray-200 text-right p-3 text-xs font-medium text-gray-900\">{t('shareOfVoice')}</th>\r\n                      <th className=\"bg-gray-50 border-b border-gray-200 text-right p-3 text-xs font-medium text-gray-900\">{t('sentiment')}</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {competitors.map((competitor, idx) => {\r\n                      const competitorUrl = generateFallbackUrl(competitor.name);\r\n                      \r\n                      return (\r\n                        <tr \r\n                          key={idx} \r\n                          className={`\r\n                            ${idx > 0 ? 'border-t border-gray-200' : ''}\r\n                            ${competitor.isOwn \r\n                              ? 'bg-orange-50' \r\n                              : 'hover:bg-gray-50 transition-colors'\r\n                            }\r\n                          `}\r\n                        >\r\n                          <td className=\"border-r border-gray-200 p-3 text-xs text-black\">\r\n                            {idx + 1}\r\n                          </td>\r\n                          <td className=\"border-r border-gray-200 p-3\">\r\n                            <CompanyCell \r\n                              name={competitor.name}\r\n                              isOwn={competitor.isOwn}\r\n                              url={competitorUrl}\r\n                            />\r\n                          </td>\r\n                          <td className=\"border-r border-gray-200 p-3 text-right\">\r\n                            <div className=\"flex items-center justify-end gap-1\">\r\n                              <span className=\"text-sm font-medium text-black\">\r\n                                {competitor.visibilityScore}%\r\n                              </span>\r\n                              {competitor.weeklyChange !== undefined && competitor.weeklyChange !== 0 && (\r\n                                getChangeIcon(competitor.weeklyChange)\r\n                              )}\r\n                            </div>\r\n                          </td>\r\n                          <td className=\"border-r border-gray-200 p-3 text-right\">\r\n                            <span className=\"text-sm text-black\">\r\n                              {competitor.shareOfVoice}%\r\n                            </span>\r\n                          </td>\r\n                          <td className=\"p-3 text-right\">\r\n                            {getSentimentBadge(competitor.sentiment)}\r\n                          </td>\r\n                        </tr>\r\n                      );\r\n                    })}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </TabsContent>\r\n          ))}\r\n        </Tabs>\r\n        \r\n        {/* Metrics Row at Bottom */}\r\n        <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-3 mt-6 pt-6 border-t\">\r\n          <div className=\"bg-gray-50 rounded-lg p-4 text-center\">\r\n            <p className=\"text-xs text-gray-500 mb-1\">{t('competitors')}</p>\r\n            <p className=\"text-lg font-semibold text-black\">{competitors.length}</p>\r\n          </div>\r\n          <div className=\"bg-orange-50 rounded-lg p-4 text-center\">\r\n            <p className=\"text-xs text-gray-500 mb-1\">{brandName} {t('rank')}</p>\r\n            <p className=\"text-lg font-semibold text-black\">\r\n              #{brandRank}\r\n            </p>\r\n          </div>\r\n          <div className=\"bg-gray-50 rounded-lg p-4 text-center\">\r\n            <p className=\"text-xs text-gray-500 mb-1\">{brandName} {t('visibility')}</p>\r\n            <p className=\"text-lg font-semibold text-black\">\r\n              {brandVisibility}%\r\n            </p>\r\n          </div>\r\n          <div className=\"bg-gray-50 rounded-lg p-4 text-center\">\r\n            <p className=\"text-xs text-gray-500 mb-1\">{t('shareOfVoice')}</p>\r\n            <p className=\"text-lg font-semibold text-black\">{shareOfVoice}%</p>\r\n          </div>\r\n          <div className=\"bg-gray-50 rounded-lg p-4 text-center\">\r\n            <p className=\"text-xs text-gray-500 mb-1\">{t('averagePosition')}</p>\r\n            <p className=\"text-lg font-semibold text-black\">#{averagePosition}</p>\r\n          </div>\r\n          <div className=\"bg-gray-50 rounded-lg p-4 text-center\">\r\n            <p className=\"text-xs text-gray-500 mb-1\">{t('sentimentScore')}</p>\r\n            <p className=\"text-lg font-semibold text-black\">{sentimentScore}%</p>\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\components\\brand-monitor\\visibility-score-tab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Badge' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":15},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":145,"column":27,"nodeType":"JSXOpeningElement","endLine":154,"endColumn":29}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { PieChart, Pie, Cell, Tooltip, ResponsiveContainer } from 'recharts';\r\nimport { CompetitorRanking } from '@/lib/types';\r\nimport { IdentifiedCompetitor } from '@/lib/brand-monitor-reducer';\r\nimport { useTranslations } from 'next-intl';\r\n\r\ninterface VisibilityScoreTabProps {\r\n  competitors: CompetitorRanking[];\r\n  brandData: CompetitorRanking;\r\n  identifiedCompetitors: IdentifiedCompetitor[];\r\n}\r\n\r\nexport function VisibilityScoreTab({\r\n  competitors,\r\n  brandData,\r\n  identifiedCompetitors\r\n}: VisibilityScoreTabProps) {\r\n  const t = useTranslations('brandMonitor.visibilityScore');\r\n  const topCompetitor = competitors.filter(c => !c.isOwn)[0];\r\n  const brandRank = competitors.findIndex(c => c.isOwn) + 1;\r\n  const difference = topCompetitor ? brandData.visibilityScore - topCompetitor.visibilityScore : 0;\r\n  \r\n  return (\r\n    <div className=\"flex flex-col h-full\">\r\n      {/* Main Content Card */}\r\n      <Card className=\"p-2 bg-card text-card-foreground gap-6 rounded-xl border py-6 shadow-sm border-gray-200 h-full flex flex-col\">\r\n        <CardHeader className=\"border-b\">\r\n          <div className=\"flex justify-between items-center\">\r\n            <div>\r\n              <CardTitle className=\"text-xl font-semibold\">{t('title')}</CardTitle>\r\n              <CardDescription className=\"text-sm text-gray-600 mt-1\">\r\n                {t('description')}\r\n              </CardDescription>\r\n            </div>\r\n            {/* Visibility Score in top right */}\r\n            <div className=\"text-right\">\r\n              <p className=\"text-3xl font-bold text-orange-600\">{brandData.visibilityScore}%</p>\r\n              <p className=\"text-xs text-gray-500 mt-1\">{t('overallScore')}</p>\r\n            </div>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent className=\"pt-6 flex-1\">\r\n          <div className=\"flex gap-8\">\r\n            {/* Left side - Pie Chart */}\r\n            <div className=\"flex-1\">\r\n              <div className=\"h-80 relative\">\r\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                  <PieChart>\r\n                    <defs>\r\n                      <linearGradient id=\"orangeGradient\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"1\">\r\n                        <stop offset=\"0%\" stopColor=\"#fb923c\" />\r\n                        <stop offset=\"100%\" stopColor=\"#ea580c\" />\r\n                      </linearGradient>\r\n                      <filter id=\"shadow\" x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\r\n                        <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"3\"/>\r\n                        <feOffset dx=\"0\" dy=\"2\" result=\"offsetblur\"/>\r\n                        <feFlood floodColor=\"#000000\" floodOpacity=\"0.1\"/>\r\n                        <feComposite in2=\"offsetblur\" operator=\"in\"/>\r\n                        <feMerge>\r\n                          <feMergeNode/>\r\n                          <feMergeNode in=\"SourceGraphic\"/>\r\n                        </feMerge>\r\n                      </filter>\r\n                    </defs>\r\n                    <Pie\r\n                      data={competitors.slice(0, 8).map((competitor) => ({\r\n                        name: competitor.name,\r\n                        value: competitor.visibilityScore,\r\n                        isOwn: competitor.isOwn\r\n                      }))}\r\n                      cx=\"50%\"\r\n                      cy=\"50%\"\r\n                      innerRadius={70}\r\n                      outerRadius={110}\r\n                      paddingAngle={1}\r\n                      dataKey=\"value\"\r\n                      startAngle={90}\r\n                      endAngle={-270}\r\n                      animationBegin={0}\r\n                      animationDuration={800}\r\n                      filter=\"url(#shadow)\"\r\n                    >\r\n                      {competitors.slice(0, 8).map((competitor, idx) => (\r\n                        <Cell \r\n                          key={`cell-${idx}`} \r\n                          fill={competitor.isOwn ? 'url(#orangeGradient)' : \r\n                            ['#3b82f6', '#8b5cf6', '#ec4899', '#10b981', '#f59e0b', '#6366f1', '#14b8a6', '#f43f5e'][idx % 8]}\r\n                          stroke={competitor.isOwn ? '#ea580c' : 'none'}\r\n                          strokeWidth={competitor.isOwn ? 2 : 0}\r\n                        />\r\n                      ))}\r\n                    </Pie>\r\n                    <Tooltip \r\n                      contentStyle={{ \r\n                        backgroundColor: 'rgba(255, 255, 255, 0.95)', \r\n                        border: '1px solid #e5e7eb',\r\n                        borderRadius: '8px',\r\n                        fontSize: '14px',\r\n                        padding: '8px 12px',\r\n                        boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'\r\n                      }}\r\n                      formatter={(value: number, name: string) => [`${value}% ${t('visibilityTooltip')}`, name]}\r\n                      labelStyle={{ fontWeight: 600 }}\r\n                    />\r\n                  </PieChart>\r\n                </ResponsiveContainer>\r\n                \r\n                {/* Center text showing relative performance */}\r\n                <div className=\"absolute top-[50%] left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-center\">\r\n                  <p className=\"text-3xl font-bold text-gray-900\">#{brandRank}</p>\r\n                  <p className=\"text-sm text-gray-500 mt-1\">{t('rank')}</p>\r\n                  {difference !== 0 && (\r\n                    <p className={`text-xs mt-2 font-medium ${difference > 0 ? 'text-green-600' : 'text-red-600'}`}>\r\n                      {difference > 0 ? '+' : ''}{Math.abs(difference).toFixed(1)}% vs #1\r\n                    </p>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            {/* Right side - Legend */}\r\n            <div className=\"w-80 space-y-2\">\r\n              {competitors.slice(0, 8).map((competitor, idx) => {\r\n                const competitorData = identifiedCompetitors.find(c => \r\n                  c.name === competitor.name || \r\n                  c.name.toLowerCase() === competitor.name.toLowerCase()\r\n                );\r\n                const faviconUrl = competitorData?.url ? \r\n                  `https://www.google.com/s2/favicons?domain=${competitorData.url}&sz=64` : null;\r\n                \r\n                const color = competitor.isOwn ? '#ea580c' : \r\n                  ['#3b82f6', '#8b5cf6', '#ec4899', '#10b981', '#f59e0b', '#6366f1', '#14b8a6', '#f43f5e'][idx % 8];\r\n                \r\n                return (\r\n                  <div key={idx} className=\"flex items-center gap-2\">\r\n                    <div \r\n                      className=\"w-3 h-3 rounded-full flex-shrink-0\" \r\n                      style={{ backgroundColor: color }}\r\n                    />\r\n                    <div className=\"flex items-center gap-2 min-w-0\">\r\n                      <div className=\"w-5 h-5 rounded flex items-center justify-center bg-gray-100 flex-shrink-0\">\r\n                        {faviconUrl ? (\r\n                          <img \r\n                            src={faviconUrl}\r\n                            alt={competitor.name}\r\n                            className=\"w-4 h-4 object-contain\"\r\n                            onError={(e) => {\r\n                              e.currentTarget.style.display = 'none';\r\n                              const fallback = e.currentTarget.nextSibling as HTMLDivElement;\r\n                              if (fallback) fallback.style.display = 'flex';\r\n                            }}\r\n                          />\r\n                        ) : null}\r\n                        <div className={`w-full h-full ${\r\n                          competitor.isOwn ? 'bg-orange-500' : 'bg-gray-300'\r\n                        } flex items-center justify-center text-white text-[8px] font-bold rounded`} \r\n                        style={{ display: faviconUrl ? 'none' : 'flex' }}>\r\n                          {competitor.name.charAt(0)}\r\n                        </div>\r\n                      </div>\r\n                      <span className={`text-sm truncate ${\r\n                        competitor.isOwn ? 'font-semibold text-orange-600' : 'text-gray-700'\r\n                      }`}>\r\n                        {competitor.name}\r\n                      </span>\r\n                      <span className=\"text-sm font-medium text-gray-900 ml-auto\">\r\n                        {competitor.visibilityScore}%\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\components\\brand-monitor\\web-search-toggle.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'X' is defined but never used.","line":4,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React from 'react';\r\nimport { Globe, X } from 'lucide-react';\r\nimport { CREDIT_COST_PER_PROMPT_ANALYSIS_WEB, CREDIT_COST_PER_PROMPT_ANALYSIS_NO_WEB } from '@/config/constants';\r\n\r\ninterface WebSearchToggleProps {\r\n  enabled: boolean;\r\n  onChange: (enabled: boolean) => void;\r\n  disabled?: boolean;\r\n}\r\n\r\nexport function WebSearchToggle({ enabled, onChange, disabled }: WebSearchToggleProps) {\r\n  return (\r\n    <button\r\n      onClick={() => onChange(!enabled)}\r\n      disabled={disabled}\r\n      className={`\r\n        flex items-center gap-2 px-3 py-1.5 rounded-lg text-sm font-medium transition-all\r\n        ${enabled \r\n          ? 'bg-blue-100 text-blue-700 hover:bg-blue-200' \r\n          : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\r\n        }\r\n        ${disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}\r\n      `}\r\n      title={`${enabled ? CREDIT_COST_PER_PROMPT_ANALYSIS_WEB : CREDIT_COST_PER_PROMPT_ANALYSIS_NO_WEB} ${ (enabled ? CREDIT_COST_PER_PROMPT_ANALYSIS_WEB : CREDIT_COST_PER_PROMPT_ANALYSIS_NO_WEB) > 1 ? 'crédits' : 'crédit' } / prompt analysé`}\r\n    >\r\n      {enabled ? (\r\n        <>\r\n          <Globe className=\"w-4 h-4\" />\r\n          Web Search On\r\n        </>\r\n      ) : (\r\n        <>\r\n          <Globe className=\"w-4 h-4 opacity-50\" />\r\n          Web Search Off\r\n        </>\r\n      )}\r\n    </button>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\components\\interactive-demo.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[926,929],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[926,929],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[943,946],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[943,946],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState } from 'react';\r\nimport Image from 'next/image';\r\nimport { useTranslations } from 'next-intl';\r\nimport { Card, CardContent } from '@/components/ui/card';\r\nimport { Eye, Target, Heart } from 'lucide-react';\r\n\r\n// Images: utilisez des images libres existantes (public/) ou remplacez ces placeholders\r\n// Pour l'instant, on pointe vers un SVG déjà présent; vous pouvez remplacer par vos captures dashboard_*.jpg dans /public\r\nimport prompts from '@/public/prompts.jpg';\r\nimport sentiment from '@/public/sentiment.jpg';\r\nimport visibility from '@/public/visibility.jpg';\r\n\r\ntype DemoId = 'visibility' | 'prompts' | 'sentiment';\r\n\r\nexport default function InteractiveDemo() {\r\n  const t = useTranslations('home.demo');\r\n  const [activeDemo, setActiveDemo] = useState<DemoId>('visibility');\r\n\r\n  const demoContent: Array<{\r\n    id: DemoId;\r\n    title: string;\r\n    description: string;\r\n    icon: any;\r\n    image: any;\r\n  }> = [\r\n    {\r\n      id: 'visibility',\r\n      title: t('items.visibility.title'),\r\n      description: t('items.visibility.description'),\r\n      icon: Eye,\r\n      image: visibility,\r\n    },\r\n    {\r\n      id: 'prompts',\r\n      title: t('items.prompts.title'),\r\n      description: t('items.prompts.descrition'),\r\n      icon: Target,\r\n      image: prompts,\r\n    },\r\n    {\r\n      id: 'sentiment',\r\n      title: t('items.sentiment.title'),\r\n      description: t('items.sentiment.description'),\r\n      icon: Heart,\r\n      image: sentiment,\r\n    },\r\n  ];\r\n\r\n  const activeDemoContent = demoContent.find((d) => d.id === activeDemo);\r\n\r\n  return (\r\n    <section className=\"py-20 lg:py-32 bg-muted/30\">\r\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n        <div className=\"text-center mb-16\">\r\n          <h2 className=\"text-3xl md:text-4xl lg:text-5xl font-bold tracking-tight mb-4\">\r\n            {t('title')}\r\n          </h2>\r\n          <p className=\"text-lg md:text-xl text-muted-foreground max-w-3xl mx-auto\">\r\n            {t('description')}\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\r\n          {/* Côté gauche - Cartes */}\r\n          <div className=\"space-y-4\">\r\n            {demoContent.map((demo) => {\r\n              const Icon = demo.icon;\r\n              const isActive = activeDemo === demo.id;\r\n              return (\r\n                <Card\r\n                  key={demo.id}\r\n                  className={`cursor-pointer transition-all duration-300 hover:shadow-md ${\r\n                    isActive\r\n                      ? 'border-orange-500 shadow-lg bg-card'\r\n                      : 'border-border hover:border-orange-400/50'\r\n                  }`}\r\n                  onClick={() => setActiveDemo(demo.id)}\r\n                >\r\n                  <CardContent className=\"p-6\">\r\n                    <div className=\"flex items-start gap-4\">\r\n                      <div\r\n                        className={`p-2 rounded-lg ${\r\n                          isActive\r\n                            ? 'bg-orange-500 text-white'\r\n                            : 'bg-muted text-muted-foreground'\r\n                        }`}\r\n                      >\r\n                        <Icon className=\"w-5 h-5\" />\r\n                      </div>\r\n                      <div className=\"flex-1\">\r\n                        <h3\r\n                          className={`text-lg font-semibold mb-2 ${\r\n                            isActive ? 'text-foreground' : 'text-muted-foreground'\r\n                          }`}\r\n                        >\r\n                          {demo.title}\r\n                        </h3>\r\n                        <p className=\"text-sm text-muted-foreground leading-relaxed\">\r\n                          {demo.description}\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n              );\r\n            })}\r\n          </div>\r\n\r\n          {/* Côté droit - Image tableau de bord */}\r\n          <div className=\"relative\">\r\n            <div className=\"relative rounded-xl overflow-hidden shadow-[0_10px_40px_rgba(0,0,0,0.15)] bg-card\">\r\n              {activeDemoContent && (\r\n                <Image\r\n                  src={activeDemoContent.image}\r\n                  alt={activeDemoContent.title}\r\n                  className=\"w-full h-auto\"\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\components\\navbar.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[586,589],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[586,589],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[616,619],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[616,619],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":88,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":91,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[644,647],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[644,647],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useCustomer\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":22,"column":24,"nodeType":"Identifier","endLine":22,"endColumn":35},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useTranslations\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":23,"column":13,"nodeType":"Identifier","endLine":23,"endColumn":28},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":25,"column":47,"nodeType":"Identifier","endLine":25,"endColumn":55},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useEffect\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":28,"column":3,"nodeType":"Identifier","endLine":28,"endColumn":12},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useEffect\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":42,"column":3,"nodeType":"Identifier","endLine":42,"endColumn":12}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport Image from 'next/image';\nimport { useSession, signOut } from '@/lib/auth-client';\nimport { useEffect, useState } from 'react';\nimport { useCustomer } from '@/hooks/useAutumnCustomer';\nimport { useLocale, useTranslations } from 'next-intl';\nimport { Link, useRouter } from '@/i18n/routing';\n\n// Separate component that only renders when Autumn is available\nfunction UserCredits() {\n  const { data: session } = useSession();\n  \n  // Ne pas utiliser useCustomer si l'utilisateur n'est pas connecté\n  if (!session) {\n    return null;\n  }\n\n  const userId = (session as any)?.user?.id || (session as any)?.userId || (session as any)?.user?.email;\n  const storageKey = userId ? `autumn_credits_${userId}` : undefined;\n\n  const { customer } = useCustomer();\n  const t = useTranslations('common');\n\n  const [displayCredits, setDisplayCredits] = useState<number | null>(null);\n\n  // 1) Lecture initiale depuis le cache local si disponible\n  useEffect(() => {\n    if (!storageKey) return;\n    try {\n      const cached = localStorage.getItem(storageKey);\n      if (cached != null) {\n        const parsed = Number(cached);\n        if (!Number.isNaN(parsed)) {\n          setDisplayCredits(parsed);\n        }\n      }\n    } catch {}\n  }, [storageKey]);\n\n  // 2) Quand Autumn répond, on met à jour l'état et le cache\n  useEffect(() => {\n    const creditsUsage = customer?.features?.credits;\n    const balance = creditsUsage?.balance;\n    if (typeof balance === 'number' && balance >= 0) {\n      setDisplayCredits(balance);\n      if (storageKey) {\n        try {\n          localStorage.setItem(storageKey, String(balance));\n        } catch {}\n      }\n    }\n  }, [customer, storageKey]);\n\n  // 3) Si aucune valeur (ni cache ni Autumn), masquer pour éviter clignotement à 0\n  if (displayCredits == null) {\n    return null;\n  }\n\n  return (\n    <div className=\"flex items-center text-sm font-medium text-gray-700\">\n      <span>{displayCredits}</span>\n      <span className=\"ml-1\">{t('credits')}</span>\n    </div>\n  );\n}\n\nexport function Navbar() {\n  const { data: session, isPending } = useSession();\n  const [isLoggingOut, setIsLoggingOut] = useState(false);\n  const [isClient, setIsClient] = useState(false);\n  const router = useRouter();\n  const t = useTranslations();\n  const locale = useLocale();\n\n  // Éviter l'erreur d'hydratation en s'assurant que le rendu côté client\n  // correspond au rendu côté serveur\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n\n  const handleLogout = async () => {\n    setIsLoggingOut(true);\n    try {\n      await signOut();\n      // Rediriger vers la page de connexion après déconnexion\n      router.replace('/login');\n      setIsLoggingOut(false);\n    } catch (error) {\n      console.error('Logout error:', error);\n      setIsLoggingOut(false);\n    }\n  };\n\n  return (\n    <nav className=\"sticky top-0 z-50 bg-white/90 backdrop-blur supports-[backdrop-filter]:bg-white/60 shadow-sm border-b\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between h-16\">\n          <div className=\"flex items-center\">\n            <Link href={isClient && session ? `/brand-monitor` : `/`} locale={locale} className=\"flex items-center\">\n              <Image\n                src=\"/logo_voxum.svg\"\n                alt=\"VOXUM\"\n                width={120}\n                height={25}\n                priority\n              />\n            </Link>\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            {isClient && session && (\n              <>\n                {/* <Link\n                  href={`/chat`}\n                  locale={locale}\n                  className=\"px-4 py-2 text-sm font-medium text-gray-700 hover:text-gray-900\"\n                >\n                  {t('common.chat')}\n                </Link> */}\n                <Link\n                  href={`/brand-monitor`}\n                  locale={locale}\n                  className=\"px-4 py-2 text-sm font-medium text-gray-700 hover:text-gray-900\"\n                >\n                  {t('common.brandMonitor')}\n                </Link>\n              </>\n            )}\n            {!(isClient && session) && (\n              <Link\n                href={`/plans`}\n                locale={locale}\n                className=\"px-4 py-2 text-sm font-medium text-gray-700 hover:text-gray-900\"\n              >\n                {t('common.pricing')}\n              </Link>\n            )}\n            {isClient && session && (\n              <UserCredits />\n            )}\n            {isPending ? (\n              <div className=\"text-sm text-gray-400\">{t('common.loading')}</div>\n            ) : isClient && session ? (\n              <>\n                <Link\n                  href={`/dashboard`}\n                  locale={locale}\n                  className=\"btn-firecrawl-orange inline-flex items-center justify-center whitespace-nowrap rounded-[10px] text-sm font-medium transition-all duration-200 h-8 px-3\"\n                >\n                  {t('common.dashboard')}\n                </Link>\n                <button\n                  onClick={handleLogout}\n                  disabled={isLoggingOut}\n                  className=\"btn-firecrawl-default inline-flex items-center justify-center whitespace-nowrap rounded-[10px] text-sm font-medium transition-all duration-200 disabled:pointer-events-none disabled:opacity-50 h-8 px-3\"\n                >\n                  {isLoggingOut ? t('auth.signingOut') : t('common.logout')}\n                </button>\n              </>\n            ) : (\n              <>\n                <Link \n                  href={`/login`}\n                  locale={locale}\n                  className=\"bg-black text-white hover:bg-gray-800 inline-flex items-center justify-center whitespace-nowrap rounded-[10px] text-sm font-medium transition-all duration-200 h-8 px-3 shadow-sm hover:shadow-md\"\n                >\n                  {t('common.login')}\n                </Link>\n                <Link \n                  href={`/register`}\n                  locale={locale}\n                  className=\"btn-firecrawl-orange inline-flex items-center justify-center whitespace-nowrap rounded-[10px] text-sm font-medium transition-all duration-200 h-8 px-3\"\n                >\n                  {t('common.register')}\n                </Link>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\components\\public-pricing-table.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setError' is assigned a value but never used.","line":30,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":25}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { Link } from \"@/i18n/routing\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Loader2 } from \"lucide-react\";\r\nimport { useTranslations } from 'next-intl';\r\n\r\ninterface Product {\r\n  id: string;\r\n  name: string;\r\n  display?: {\r\n    name?: string;\r\n    description?: string;\r\n    recommend_text?: string;\r\n  };\r\n  properties?: {\r\n    is_free?: boolean;\r\n  };\r\n  items: Array<{\r\n    display?: {\r\n      primary_text?: string;\r\n      secondary_text?: string;\r\n    };\r\n  }>;\r\n}\r\n\r\nexport function PublicPricingTable() {\r\n  const [products, setProducts] = useState<Product[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const t = useTranslations();\r\n\r\n  useEffect(() => {\r\n    fetch('/api/autumn/products', {\r\n      credentials: 'include',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    })\r\n      .then(res => {\r\n        if (!res.ok) {\r\n          // If we get a 401, just show static pricing silently\r\n          return null;\r\n        }\r\n        return res.json();\r\n      })\r\n      .then(data => {\r\n        if (data && data.products) {\r\n          setProducts(data.products);\r\n        }\r\n        setLoading(false);\r\n      })\r\n      .catch(() => {\r\n        // Silently fall back to static pricing\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex justify-center items-center min-h-[400px]\">\r\n        <Loader2 className=\"w-8 h-8 animate-spin text-zinc-400\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // If we can't fetch products (user not logged in), show static pricing\r\n  if (error || products.length === 0) {\r\n    return (\r\n      <div className=\"grid md:grid-cols-3 gap-8 max-w-5xl mx-auto\">\r\n        {/* Starter */}\r\n        <div className=\"bg-white p-8 rounded-[20px] border border-zinc-200\">\r\n          <h3 className=\"text-2xl font-bold mb-2\">{t('publicPricing.starter.name')}</h3>\r\n          <p className=\"text-zinc-600 mb-6\">{t('publicPricing.starter.description')}</p>\r\n          <div className=\"mb-6\">\r\n            <span className=\"text-4xl font-bold\">{t('publicPricing.starter.price')}</span>\r\n            <span className=\"text-zinc-600\">{t('publicPricing.starter.priceDesc')}</span>\r\n          </div>\r\n          <ul className=\"space-y-3 mb-8\">\r\n            <li className=\"flex items-center\">\r\n              <svg className=\"w-5 h-5 text-green-500 mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\r\n              </svg>\r\n              {t('publicPricing.starter.feature1')}\r\n            </li>\r\n            <li className=\"flex items-center\">\r\n              <svg className=\"w-5 h-5 text-green-500 mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\r\n              </svg>\r\n              {t('publicPricing.starter.feature2')}\r\n            </li>\r\n            <li className=\"flex items-center\">\r\n              <svg className=\"w-5 h-5 text-green-500 mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\r\n              </svg>\r\n              {t('publicPricing.starter.feature3')}\r\n            </li>\r\n          </ul>\r\n          <Link\r\n            href={`/register`}\r\n            className=\"btn-firecrawl-outline w-full inline-flex items-center justify-center whitespace-nowrap rounded-[10px] text-sm font-medium transition-all duration-200 h-10 px-4\"\r\n          >\r\n            {t('publicPricing.starter.button')}\r\n          </Link>\r\n        </div>\r\n\r\n        {/* Pro - Featured */}\r\n        <div className=\"bg-white p-8 rounded-[20px] border-2 border-orange-500 relative\">\r\n          <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2 bg-black text-white px-4 py-1 rounded-full text-sm font-medium\">\r\n            {t('publicPricing.mostPopular')}\r\n          </div>\r\n          <h3 className=\"text-2xl font-bold mb-2\">{t('publicPricing.pro.name')}</h3>\r\n          <p className=\"text-zinc-600 mb-6\">{t('publicPricing.pro.description')}</p>\r\n          <div className=\"mb-6\">\r\n            <span className=\"text-4xl font-bold\">{t('publicPricing.pro.price')}</span>\r\n            <span className=\"text-zinc-600\">{t('publicPricing.pro.priceDesc')}</span>\r\n          </div>\r\n          <ul className=\"space-y-3 mb-8\">\r\n            <li className=\"flex items-center\">\r\n              <svg className=\"w-5 h-5 text-green-500 mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\r\n              </svg>\r\n              {t('publicPricing.pro.feature1')}\r\n            </li>\r\n            <li className=\"flex items-center\">\r\n              <svg className=\"w-5 h-5 text-green-500 mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\r\n              </svg>\r\n              {t('publicPricing.pro.feature2')}\r\n            </li>\r\n            <li className=\"flex items-center\">\r\n              <svg className=\"w-5 h-5 text-green-500 mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\r\n              </svg>\r\n              {t('publicPricing.pro.feature3')}\r\n            </li>\r\n          </ul>\r\n          <Link\r\n            href={`/register`}\r\n            className=\"btn-firecrawl-orange w-full inline-flex items-center justify-center whitespace-nowrap rounded-[10px] text-sm font-medium transition-all duration-200 h-10 px-4\"\r\n          >\r\n            {t('publicPricing.pro.button')}\r\n          </Link>\r\n        </div>\r\n\r\n        {/* Enterprise */}\r\n        <div className=\"bg-white p-8 rounded-[20px] border border-zinc-200\">\r\n          <h3 className=\"text-2xl font-bold mb-2\">{t('publicPricing.enterprise.name')}</h3>\r\n          <p className=\"text-zinc-600 mb-6\">{t('publicPricing.enterprise.description')}</p>\r\n          <div className=\"mb-6\">\r\n            <span className=\"text-4xl font-bold\">{t('publicPricing.enterprise.price')}</span>\r\n          </div>\r\n          <ul className=\"space-y-3 mb-8\">\r\n            <li className=\"flex items-center\">\r\n              <svg className=\"w-5 h-5 text-green-500 mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\r\n              </svg>\r\n              {t('publicPricing.enterprise.feature1')}\r\n            </li>\r\n            <li className=\"flex items-center\">\r\n              <svg className=\"w-5 h-5 text-green-500 mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\r\n              </svg>\r\n              {t('publicPricing.enterprise.feature2')}\r\n            </li>\r\n            <li className=\"flex items-center\">\r\n              <svg className=\"w-5 h-5 text-green-500 mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\r\n              </svg>\r\n              {t('publicPricing.enterprise.feature3')}\r\n            </li>\r\n          </ul>\r\n          <Link\r\n            href={`/contact`}\r\n            className=\"btn-firecrawl-outline w-full inline-flex items-center justify-center whitespace-nowrap rounded-[10px] text-sm font-medium transition-all duration-200 h-10 px-4\"\r\n          >\r\n            {t('publicPricing.enterprise.button')}\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // If we have products, render them dynamically\r\n  return (\r\n    <div className=\"grid md:grid-cols-3 gap-8 max-w-5xl mx-auto\">\r\n      {products.map((product) => {\r\n        const isRecommended = !!product.display?.recommend_text;\r\n        const mainPrice = product.properties?.is_free\r\n          ? { primary_text: t('publicPricing.free') }\r\n          : product.items[0]?.display;\r\n\r\n        return (\r\n          <div\r\n            key={product.id}\r\n            className={`bg-white p-8 rounded-[20px] border ${\r\n              isRecommended ? 'border-2 border-orange-500 relative' : 'border-zinc-200'\r\n            }`}\r\n          >\r\n            {isRecommended && product.display?.recommend_text && (\r\n              <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2 bg-black text-white px-4 py-1 rounded-full text-sm font-medium\">\r\n                {product.display.recommend_text}\r\n              </div>\r\n            )}\r\n            <h3 className=\"text-2xl font-bold mb-2\">\r\n              {product.display?.name || product.name}\r\n            </h3>\r\n            {product.display?.description && (\r\n              <p className=\"text-zinc-600 mb-6\">{product.display.description}</p>\r\n            )}\r\n            <div className=\"mb-6\">\r\n              <span className=\"text-4xl font-bold\">\r\n                {mainPrice?.primary_text || '$0'}\r\n              </span>\r\n              {mainPrice?.secondary_text && (\r\n                <span className=\"text-zinc-600\">{mainPrice.secondary_text}</span>\r\n              )}\r\n            </div>\r\n            <ul className=\"space-y-3 mb-8\">\r\n              {product.items.slice(product.properties?.is_free ? 0 : 1).map((item, index) => (\r\n                <li key={index} className=\"flex items-center\">\r\n                  <svg className=\"w-5 h-5 text-green-500 mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\r\n                  </svg>\r\n                  {item.display?.primary_text}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n            <Link\r\n              href={`/register`}\r\n              className={`${\r\n                isRecommended ? 'btn-firecrawl-orange' : 'btn-firecrawl-outline'\r\n              } w-full inline-flex items-center justify-center whitespace-nowrap rounded-[10px] text-sm font-medium transition-all duration-200 h-10 px-4`}\r\n            >\r\n              {product.properties?.is_free ? t('publicPricing.startFree') : t('publicPricing.getStarted')}\r\n            </Link>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\components\\ui\\input.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":5,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":5,"endColumn":28,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[77,155],"text":"type InputProps = React.InputHTMLAttributes<HTMLInputElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nexport interface InputProps\r\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\r\n\r\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\r\n  ({ className, type, ...props }, ref) => {\r\n    return (\r\n      <input\r\n        type={type}\r\n        className={cn(\r\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\r\n          className\r\n        )}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    )\r\n  }\r\n)\r\nInput.displayName = \"Input\"\r\n\r\nexport { Input }","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\lib\\ai-utils-enhanced.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Company' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BrandPrompt' is defined but never used.","line":3,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CompanyRanking' is defined but never used.","line":3,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CompetitorRanking' is defined but never used.","line":3,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":77},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ProviderSpecificRanking' is defined but never used.","line":3,"column":79,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":102},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ProviderComparisonData' is defined but never used.","line":3,"column":104,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":126},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ProgressCallback' is defined but never used.","line":3,"column":128,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":144},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CompetitorFoundData' is defined but never used.","line":3,"column":146,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":165},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isProviderConfigured' is defined but never used.","line":4,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":71},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PROVIDER_CONFIGS' is defined but never used.","line":4,"column":92,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":108},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'analyzeWithAnthropicWebSearch' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'detectBrandMentions' is defined but never used.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":121,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4428,4431],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4428,4431],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":125,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4477,4480],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4477,4480],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":144,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":144,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5191,5194],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5191,5194],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":171,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":171,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6567,6570],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6567,6570],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'brandNameLower' is assigned a value but never used.","line":189,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":189,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":234,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":234,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9134,9137],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9134,9137],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":265,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":265,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10191,10194],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10191,10194],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'textLower' is assigned a value but never used.","line":369,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":369,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'brandNameLower' is assigned a value but never used.","line":370,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":370,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":439,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":439,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17109,17112],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17109,17112],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'locale' is defined but never used.","line":498,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":498,"endColumn":9}],"suppressedMessages":[],"errorCount":23,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { generateText, generateObject } from 'ai';\nimport { z } from 'zod';\nimport { Company, BrandPrompt, AIResponse, CompanyRanking, CompetitorRanking, ProviderSpecificRanking, ProviderComparisonData, ProgressCallback, CompetitorFoundData } from './types';\nimport { getProviderModel, normalizeProviderName, isProviderConfigured, getProviderConfig, PROVIDER_CONFIGS } from './provider-config';\nimport { analyzeWithAnthropicWebSearch } from './anthropic-web-search';\nimport { analyzePromptWithOpenAIWebSearch, isOpenAIWebSearchAvailable } from './openai-web-search';\nimport { getLanguageName } from './locale-utils';\nimport { apiUsageTracker, extractTokensFromUsage, estimateCost } from './api-usage-tracker';\nimport { detectBrandMentions, detectMultipleBrands, BrandDetectionMatch } from './brand-detection-service';\n\n/**\n * Extract brand name from complex brand strings\n * Focus on the actual brand, not the product\n */\nfunction extractBrandName(brandString: string): string {\n  let brand = brandString.trim();\n  \n  // Handle parentheses format like \"Citroën (Ami)\" -> \"Citroën\"\n  const parenthesesMatch = brand.match(/^([^(]+)\\s*\\(/);\n  if (parenthesesMatch) {\n    brand = parenthesesMatch[1].trim();\n  }\n  \n  // Handle comma format like \"Renault, Twizy\" -> \"Renault\"\n  const commaMatch = brand.match(/^([^,]+),/);\n  if (commaMatch) {\n    brand = commaMatch[1].trim();\n  }\n  \n  return brand;\n}\n\n/**\n * Create simple variations for basic brand names (case, accents)\n * For complex multi-word brands, use AI-powered detection\n */\nfunction createSimpleBrandVariations(brandString: string): string[] {\n  const coreBrand = extractBrandName(brandString);\n  const variations = new Set<string>();\n  \n  // Add original\n  variations.add(coreBrand);\n  \n  // Add lowercase\n  const lower = coreBrand.toLowerCase();\n  variations.add(lower);\n  \n  // Add without accents\n  const normalized = lower\n    .normalize('NFD')\n    .replace(/[\\u0300-\\u036f]/g, '');\n  if (normalized !== lower) {\n    variations.add(normalized);\n  }\n  \n  // Add uppercase version of normalized\n  if (normalized !== lower) {\n    variations.add(normalized.charAt(0).toUpperCase() + normalized.slice(1));\n  }\n  \n  const list = Array.from(variations).filter(v => v.length > 1);\n  return filterBrandVariations(coreBrand, list);\n}\n\n/**\n * Create smart variations of a brand name for better detection\n * Uses simple variations for basic brands, AI for complex ones\n */\nasync function createSmartBrandVariations(brandString: string, locale?: string): Promise<string[]> {\n  const coreBrand = extractBrandName(brandString);\n  \n  // For simple brands (1-2 words), use deterministic approach\n  if (!coreBrand.includes(' ') || coreBrand.split(/\\s+/).length <= 2) {\n    return createSimpleBrandVariations(brandString);\n  }\n  \n  // For complex multi-word brands, delegate to OpenAI web search module\n  const { createAIBrandVariations } = await import('./openai-web-search');\n  const aiVars = await createAIBrandVariations(brandString, locale);\n  return filterBrandVariations(coreBrand, aiVars);\n}\n\nconst RankingSchema = z.object({\n  rankings: z.array(z.object({\n    position: z.number().nullable(),\n    company: z.string(),\n    reason: z.string().optional(),\n    sentiment: z.enum(['positive', 'neutral', 'negative']).optional(),\n  })),\n  analysis: z.object({\n    brandMentioned: z.boolean(),\n    brandPosition: z.number().nullable().optional(),\n    competitors: z.array(z.string()),\n    overallSentiment: z.enum(['positive', 'neutral', 'negative']),\n    confidence: z.number().min(0).max(1),\n  }),\n});\n\n// Enhanced version with web search grounding\nexport async function analyzePromptWithProviderEnhanced(\n  prompt: string,\n  provider: string,\n  brandName: string,\n  competitors: string[],\n  useMockMode: boolean = false,\n  useWebSearch: boolean = true, // New parameter\n  locale?: string // Locale parameter\n): Promise<AIResponse> {\n  const trimmedPrompt = prompt.trim();\n  // Mock mode for demo/testing without API keys\n  if (useMockMode || provider === 'Mock') {\n    return generateMockResponse(trimmedPrompt, provider, brandName, competitors);\n  }\n\n  // Normalize provider name for consistency\n  const normalizedProvider = normalizeProviderName(provider);\n  const providerConfig = getProviderConfig(normalizedProvider);\n  \n  if (!providerConfig || !providerConfig.isConfigured()) {\n    console.warn(`Provider ${provider} not configured, skipping provider`);\n    return null as any;\n  }\n  \n  let model;\n  const generateConfig: any = {};\n  \n  // Handle provider-specific web search configurations\n  if (normalizedProvider === 'openai' && useWebSearch) {\n    // Use the new OpenAI web search implementation\n    if (!isOpenAIWebSearchAvailable()) {\n      console.warn('OpenAI web search not available, falling back to standard OpenAI');\n      model = getProviderModel('openai');\n    } else {\n      // We'll handle OpenAI web search separately, so just mark it\n      model = 'openai-web-search';\n    }\n  } else {\n    // Get model with web search options if supported\n    model = getProviderModel(normalizedProvider, undefined, { useWebSearch });\n  }\n  \n  if (!model) {\n    console.warn(`Failed to get model for ${provider}`);\n    return null as any;\n  }\n\n  const languageName = locale ? getLanguageName(locale) : 'English';\n  \n  const systemPrompt = `You are an AI assistant analyzing brand visibility and rankings.\nWhen responding to prompts about tools, platforms, or services:\n1. Provide rankings with specific positions (1st, 2nd, etc.)\n2. Focus on the companies mentioned in the prompt\n3. Be objective and factual${useWebSearch ? ', using current web information when available' : ''}\n4. Explain briefly why each tool is ranked where it is\n5. If you don't have enough information about a specific company, you can mention that\n6. ${useWebSearch ? 'Prioritize recent, factual information from web searches' : 'Use your knowledge base'}\n7. Return the content in ${languageName} language\n8. IMPORTANT: Keep your response concise and under 800 tokens. Prioritize the most important information and rankings.`;\n\n  // Enhanced prompt for web search - more explicit instruction\n  const enhancedPrompt = useWebSearch \n    ? `IMPORTANT: You must search the web for current, factual information to answer this question. Do not rely on your training data alone.\n\nQuestion: ${trimmedPrompt}\n\nPlease search for recent information, current rankings, and up-to-date data to provide an accurate and current response. Focus on recent data and real user opinions.`\n    : trimmedPrompt;\n\n  try {\n    let text: string;\n    let sources: any[] = [];\n\n    // Handle OpenAI web search separately using the new implementation\n    if (normalizedProvider === 'openai' && useWebSearch && model === 'openai-web-search') {\n      console.log(`[${provider}] Using OpenAI web search implementation`);\n      \n      // Use the dedicated OpenAI web search function\n      const openaiResult = await analyzePromptWithOpenAIWebSearch(\n        trimmedPrompt,\n        brandName,\n        competitors,\n        locale\n      );\n      \n      // Enhanced brand detection fallback for web search results\n      // Apply the same robust detection logic as the non-web search version\n      const text = openaiResult.response;\n      const textLower = text.toLowerCase();\n      const brandNameLower = brandName.toLowerCase();\n      \n      // Enhanced brand detection with smart variations\n      const brandVariations = await createSmartBrandVariations(brandName, locale);\n      const enhancedBrandMentioned = openaiResult.brandMentioned || \n        brandVariations.some(variation => textLower.includes(variation));\n        \n      // Add any missed competitors from text search with smart variations\n      const aiCompetitors = new Set(openaiResult.competitors);\n      const allMentionedCompetitors = new Set([...aiCompetitors]);\n      \n      for (const competitor of competitors) {\n        const competitorVariations = await createSmartBrandVariations(competitor, locale);\n        const found = competitorVariations.some(variation => textLower.includes(variation));\n        \n        if (found) {\n          allMentionedCompetitors.add(competitor);\n        }\n      }\n\n      // Filter competitors to only include the ones we're tracking\n      const relevantCompetitors = Array.from(allMentionedCompetitors).filter(c => \n        competitors.includes(c) && c !== brandName\n      );\n      \n      // Return enhanced result with improved brand detection\n      return {\n        ...openaiResult,\n        brandMentioned: enhancedBrandMentioned,\n        competitors: relevantCompetitors,\n      };\n    } else {\n      // Log web search configuration for debugging\n      if (useWebSearch) {\n        console.log(`[${provider}] Web search enabled with config:`, {\n          model: typeof model === 'string' ? model : 'LanguageModelV1',\n          include: generateConfig.include,\n          tools: generateConfig.tools,\n          prompt: enhancedPrompt.substring(0, 100) + '...'\n        });\n      }\n      \n      // Track API call for analysis\n      const callId = apiUsageTracker.trackCall({\n        provider: normalizedProvider,\n        model: (model as any).id || 'unknown',\n        operation: 'analysis',\n        success: true,\n        metadata: { \n          prompt: enhancedPrompt.substring(0, 100) + '...',\n          brandName,\n          competitorsCount: competitors.length,\n          locale,\n          useWebSearch\n        }\n      });\n\n      const startTime = Date.now();\n      // First, get the response with potential web search for other providers\n      const result = await generateText({\n        model,\n        system: systemPrompt,\n        prompt: enhancedPrompt,\n        temperature: 0.7,\n        maxTokens: 800,\n        ...generateConfig, // Spread generation configuration (includes tools for other providers)\n      });\n      const duration = Date.now() - startTime;\n\n      // Extract tokens from usage\n      const tokens = extractTokensFromUsage(result.usage);\n      \n      // Update API call with actual usage\n      apiUsageTracker.updateCall(callId, {\n        inputTokens: tokens.inputTokens,\n        outputTokens: tokens.outputTokens,\n        cost: estimateCost(normalizedProvider, (model as any).id || 'unknown', tokens.inputTokens, tokens.outputTokens),\n        duration\n      });\n      \n      text = result.text;\n      sources = result.sources || [];\n    }\n\n    // Then analyze it with structured output\n    const analysisPrompt = `Analyze this AI response about ${brandName} and its competitors:\n\nResponse: \"${text}\"\n\nYour task:\n1. Look for ANY mention of ${brandName} anywhere in the response (even if not ranked)\n2. Look for ANY mention of these competitors: ${competitors.join(', ')}\n3. For each mentioned company, determine if it has a specific ranking position\n4. Identify the sentiment towards each mentioned company\n5. Rate your confidence in this analysis (0-1)\n\nIMPORTANT: A company is \"mentioned\" if it appears anywhere in the response text, even without a specific ranking. Count ALL mentions, not just ranked ones. Return the analysis in ${languageName} language.\n\nBe very thorough in detecting company names - they might appear in different contexts (listed, compared, recommended, etc.)`;\n\n    let object;\n    try {\n      // Use a fast model for structured output\n      const analysisModel = getProviderModel('openai', 'gpt-4o');\n      if (!analysisModel) {\n        throw new Error('Analysis model not available');\n      }\n      \n      // Track API call for structured analysis\n      const analysisCallId = apiUsageTracker.trackCall({\n        provider: 'openai',\n        model: 'gpt-4o',\n        operation: 'structured_analysis',\n        success: true,\n        metadata: { \n          step: 'structured_analysis',\n          brandName,\n          competitorsCount: competitors.length,\n          locale,\n          // Lier le coût structuré au prompt source (aperçu)\n          prompt: (analysisPrompt || '').substring(0, 120) + '...'\n        }\n      });\n\n      const analysisStartTime = Date.now();\n      console.log('SELECTED MODEL (analyzePromptWithProviderEnhanced.generateObject structured):', typeof analysisModel === 'string' ? analysisModel : analysisModel);\n      const result = await generateObject({\n        model: analysisModel,\n        system: 'You are an expert at analyzing text and extracting structured information about companies and rankings.',\n        prompt: analysisPrompt,\n        schema: RankingSchema,\n        temperature: 0.3,\n      });\n      const analysisDuration = Date.now() - analysisStartTime;\n\n      // Extract tokens from usage\n      const analysisTokens = extractTokensFromUsage(result.usage);\n      \n      // Update API call with actual usage\n      apiUsageTracker.updateCall(analysisCallId, {\n        inputTokens: analysisTokens.inputTokens,\n        outputTokens: analysisTokens.outputTokens,\n        cost: estimateCost('openai', 'gpt-4o', analysisTokens.inputTokens, analysisTokens.outputTokens),\n        duration: analysisDuration\n      });\n\n      object = result.object;\n    } catch (error) {\n      console.error('Structured analysis failed:', error);\n      // Fallback to basic analysis\n      const textLower = text.toLowerCase();\n      const brandNameLower = brandName.toLowerCase();\n      \n      // More robust brand detection\n      const mentioned = textLower.includes(brandNameLower) ||\n        textLower.includes(brandNameLower.replace(/\\s+/g, '')) ||\n        textLower.includes(brandNameLower.replace(/[^a-z0-9]/g, ''));\n        \n      // More robust competitor detection\n      const detectedCompetitors = competitors.filter(c => {\n        const cLower = c.toLowerCase();\n        return textLower.includes(cLower) ||\n          textLower.includes(cLower.replace(/\\s+/g, '')) ||\n          textLower.includes(cLower.replace(/[^a-z0-9]/g, ''));\n      });\n      \n      object = {\n        rankings: [],\n        analysis: {\n          brandMentioned: mentioned,\n          brandPosition: undefined,\n          competitors: detectedCompetitors,\n          overallSentiment: 'neutral' as const,\n          confidence: 0.5,\n        },\n      };\n    }\n\n    // Fallback: simple text-based mention detection \n    // This complements the AI analysis in case it misses obvious mentions\n    const textLower = text.toLowerCase();\n    const brandNameLower = brandName.toLowerCase();\n    \n    // Use centralized brand detection service for accurate detection\n    let detectionResult;\n    try {\n      detectionResult = await detectBrandsInResponse(text, brandName, competitors, locale);\n    } catch (error) {\n      console.error('Brand detection failed, using AI analysis only:', error);\n      // If brand detection fails, use only AI analysis\n      detectionResult = {\n        brandMentioned: false,\n        competitors: [],\n        sentiment: 'neutral' as const,\n        confidence: 0\n      };\n    }\n    \n    const brandMentioned = object.analysis.brandMentioned || detectionResult.brandMentioned;\n    \n    // Combine AI-detected competitors with centralized detection\n    const aiCompetitors = new Set(object.analysis.competitors);\n    const allMentionedCompetitors = new Set([...aiCompetitors, ...detectionResult.competitors]);\n\n    // Filter competitors to only include the ones we're tracking\n    const relevantCompetitors = Array.from(allMentionedCompetitors).filter(c => \n      competitors.includes(c) && c !== brandName\n    );\n\n    // Get the proper display name for the provider\n    const providerDisplayName = provider === 'openai' ? 'OpenAI' :\n                               provider === 'anthropic' ? 'Anthropic' :\n                               provider === 'google' ? 'Google' :\n                               provider === 'perplexity' ? 'Perplexity' :\n                               provider; // fallback to original\n\n    return {\n      provider: providerDisplayName,\n      prompt: trimmedPrompt, // ensure trimmed\n      response: text,\n      rankings: object.rankings,\n      competitors: relevantCompetitors,\n      brandMentioned,\n      brandPosition: object.analysis.brandPosition ?? undefined,\n      sentiment: object.analysis.overallSentiment,\n      confidence: object.analysis.confidence,\n      timestamp: new Date(),\n      webSearchSources: (sources || []).map(s => ({\n        ...s,\n        // Ensure prompt linkage is present for display\n        // snippet field removed from database schema\n      })),\n      detectionDetails: detectionResult.detectionDetails,\n    };\n  } catch (error) {\n    console.error(`Error with ${provider}:`, error);\n    \n    // Check if it's an authentication error\n    const isAuthError = error instanceof Error && (\n      error.message.includes('401') || \n      error.message.includes('invalid_api_key') ||\n      error.message.includes('invalid x-api-key') ||\n      error.message.includes('Authorization Required') ||\n      error.message.includes('Unauthorized') ||\n      error.message.includes('authentication_error') ||\n      error.message.includes('Incorrect API key')\n    );\n    \n    if (isAuthError) {\n      console.log(`Authentication error with ${provider} - returning null to skip this provider`);\n      return null as any; // Return null to indicate this provider should be skipped\n    }\n    \n    // For other errors, log detailed information\n    console.error(`Non-auth error with ${provider}:`, {\n      message: error instanceof Error ? error.message : 'Unknown error',\n      type: typeof error,\n      name: error instanceof Error ? error.name : undefined,\n      stack: error instanceof Error ? error.stack : undefined\n    });\n    \n    throw error;\n  }\n}\n\n// Helper function to generate mock responses\nfunction generateMockResponse(\n  prompt: string,\n  provider: string,\n  brandName: string,\n  competitors: string[]\n): AIResponse {\n  const mentioned = Math.random() > 0.3;\n  const position = mentioned ? Math.floor(Math.random() * 5) + 1 : undefined;\n  \n  // Get the proper display name for the provider\n  const providerDisplayName = provider === 'openai' ? 'OpenAI' :\n                             provider === 'anthropic' ? 'Anthropic' :\n                             provider === 'google' ? 'Google' :\n                             provider === 'perplexity' ? 'Perplexity' :\n                             provider; // fallback to original\n  \n  return {\n    provider: providerDisplayName,\n    prompt,\n    response: `Mock response for ${prompt}`,\n    rankings: competitors.slice(0, 5).map((comp, idx) => ({\n      position: idx + 1,\n      company: comp,\n      reason: 'Mock reason',\n      sentiment: 'neutral' as const,\n    })),\n    competitors: competitors.slice(0, 3),\n    brandMentioned: mentioned,\n    brandPosition: position,\n    sentiment: mentioned ? 'positive' : 'neutral',\n    confidence: 0.8,\n    timestamp: new Date(),\n  };\n}\n\n/**\n * Enhanced brand detection using the centralized service\n * This replaces the old brand detection logic with intelligent AI-based detection\n */\nexport async function detectBrandsInResponse(\n  text: string,\n  brandName: string,\n  competitors: string[],\n  locale?: string\n): Promise<{\n  brandMentioned: boolean;\n  brandPosition?: number;\n  competitors: string[];\n  sentiment: 'positive' | 'neutral' | 'negative';\n  confidence: number;\n  detectionDetails?: {\n    brandMatches?: BrandDetectionMatch[];\n    competitorMatches?: Map<string, BrandDetectionMatch[]>;\n  };\n}> {\n  try {\n    // Detect all brands using the centralized service\n    const allBrands = [brandName, ...competitors];\n    const detectionResults = await detectMultipleBrands(text, allBrands, {\n      caseSensitive: false,\n      excludeNegativeContext: false,\n      minConfidence: 0.3\n    });\n\n    // Check if target brand is mentioned\n    const brandResult = detectionResults.get(brandName);\n    const brandMentioned = brandResult?.mentioned || false;\n    const brandConfidence = brandResult?.confidence || 0;\n\n    // Find mentioned competitors\n    const mentionedCompetitors: string[] = [];\n    const competitorMatches = new Map<string, BrandDetectionMatch[]>();\n    \n    competitors.forEach(competitor => {\n      const result = detectionResults.get(competitor);\n      if (result?.mentioned) {\n        mentionedCompetitors.push(competitor);\n        competitorMatches.set(competitor, result.matches);\n      }\n    });\n\n    // Simple sentiment analysis (can be enhanced later)\n    const sentiment: 'positive' | 'neutral' | 'negative' = 'neutral';\n    \n    // Simple position detection (can be enhanced later)\n    const brandPosition = brandResult?.matches.length ? 1 : undefined;\n\n    return {\n      brandMentioned,\n      brandPosition,\n      competitors: mentionedCompetitors,\n      sentiment,\n      confidence: brandConfidence,\n      detectionDetails: {\n        brandMatches: brandResult?.matches || [],\n        competitorMatches\n      }\n    };\n  } catch (error) {\n    console.error('Brand detection in response failed:', error);\n    // Re-throw the error instead of returning empty result\n    throw new Error(`Brand detection failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\n// Export the enhanced function as the default\nexport { analyzePromptWithProviderEnhanced as analyzePromptWithProvider };\n\n// Filtre générique similaire à openai-web-search.ts pour éviter des faux positifs\nfunction filterBrandVariations(coreBrand: string, variations: string[]): string[] {\n  const coreWords = coreBrand.trim().split(/\\s+/).filter(Boolean);\n  const isMultiWord = coreWords.length >= 2;\n  const coreLower = coreBrand.toLowerCase();\n  const genericSingles = new Set<string>([\n    'the','and','of','for','group','international','global','worldwide','inc','llc','corp','corporation','ltd','limited','sa','sas','gmbh','plc','bv','ag',\n    'urban','mobility','ecomobility','systems','solutions','technologies','technology'\n  ]);\n\n  const keep = new Set<string>();\n  for (const v of (variations || [])) {\n    if (!v || typeof v !== 'string') continue;\n    const vv = v.trim();\n    if (vv.length <= 1) continue;\n\n    const vvLower = vv.toLowerCase();\n    if (vvLower === coreLower) { keep.add(vv); continue; }\n\n    const wordCount = vv.split(/\\s+/).filter(Boolean).length;\n    if (isMultiWord) {\n      if (wordCount === 1) {\n        const isAcronym = /^[A-Z0-9]{2,5}$/.test(vv);\n        if (!isAcronym) continue;\n        if (genericSingles.has(vvLower)) continue;\n      }\n    }\n\n    if (wordCount === 1 && genericSingles.has(vvLower)) continue;\n\n    keep.add(vv);\n  }\n\n  if (![...keep].some(x => x.toLowerCase() === coreLower)) {\n    keep.add(coreBrand);\n  }\n  return Array.from(keep);\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\lib\\ai-utils.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isProviderConfigured' is defined but never used.","line":5,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":71},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PROVIDER_CONFIGS' is defined but never used.","line":5,"column":97,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":113},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":206,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":206,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8648,8651],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8648,8651],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":230,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":230,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9657,9660],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9657,9660],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":263,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":263,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10696,10699],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10696,10699],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":327,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":327,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13396,13399],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13396,13399],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":329,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":329,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13489,13492],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13489,13492],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":330,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":330,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13525,13528],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13525,13528],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":331,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":331,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13562,13565],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13562,13565],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":413,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":413,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16580,16583],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16580,16583],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":479,"column":91,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":479,"endColumn":94,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19088,19091],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19088,19091],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":595,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":595,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":598,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":598,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23325,23328],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23325,23328],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":613,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":613,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23758,23761],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23758,23761],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":614,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":614,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23797,23800],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23797,23800],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":615,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":615,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23833,23836],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23833,23836],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":616,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":616,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23869,23872],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23869,23872],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":826,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":826,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[31578,31581],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[31578,31581],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'mentioned' is assigned a value but never used.","line":957,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":957,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'delay' is assigned a value but never used.","line":1071,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":1071,"endColumn":14}],"suppressedMessages":[],"errorCount":20,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { generateText, generateObject } from 'ai';\nimport { z } from 'zod';\nimport { Company, BrandPrompt, AIResponse, CompanyRanking, CompetitorRanking, ProviderSpecificRanking, ProviderComparisonData, ProgressCallback, CompetitorFoundData } from './types';\nimport { getProviderModel, normalizeProviderName, isProviderConfigured, getConfiguredProviders, PROVIDER_CONFIGS } from './provider-config';\nimport { detectBrandMentions, detectMultipleBrands } from './brand-detection-service';\nimport { getMessages, getTranslation, getLanguageName } from './locale-utils';\nimport { apiUsageTracker, extractTokensFromUsage, estimateCost } from './api-usage-tracker';\nimport { generateBrandQueryPrompts } from './prompt-generation';\nimport { createFallbackBrandPrompts } from './prompt-fallbacks';\nimport { logger } from './logger';\n\n\nconst RankingSchema = z.object({\n  rankings: z.array(z.object({\n    position: z.number(),\n    company: z.string(),\n    reason: z.string().optional(),\n    sentiment: z.enum(['positive', 'neutral', 'negative']).optional(),\n  })),\n  analysis: z.object({\n    brandMentioned: z.boolean(),\n    brandPosition: z.number().optional(),\n    competitors: z.array(z.string()),\n    overallSentiment: z.enum(['positive', 'neutral', 'negative']),\n    confidence: z.number().min(0).max(1),\n  }),\n});\n\nconst CompetitorSchema = z.object({\n  competitors: z.array(z.object({\n    name: z.string(),\n    description: z.string(),\n    isDirectCompetitor: z.boolean(),\n    marketOverlap: z.enum(['high', 'medium', 'low']),\n    businessModel: z.string().describe('e.g., DTC brand, SaaS, API service, marketplace'),\n    competitorType: z.enum(['direct', 'indirect', 'retailer', 'platform']).describe('direct = same products, indirect = adjacent products, retailer = sells products, platform = aggregates'),\n  })),\n});\n\nconst PROMPT_CATEGORY_SEQUENCE: BrandPrompt['category'][] = ['ranking', 'comparison', 'alternatives', 'recommendations'];\n\nexport async function identifyCompetitors(company: Company, progressCallback?: ProgressCallback): Promise<string[]> {\n  try {\n    // Use AI to identify real competitors - find first available provider\n    const configuredProviders = getConfiguredProviders();\n    if (configuredProviders.length === 0) {\n      throw new Error('No AI providers configured and enabled');\n    }\n    \n    // Use the first available provider\n    const provider = configuredProviders[0];\n    const model = getProviderModel(provider.id, provider.defaultModel);\n    if (!model) {\n      throw new Error(`${provider.name} model not available`);\n    }\n    \n    const prompt = `Identify maximum 9 real, established competitors of ${company.name} in the ${company.industry || 'technology'} industry.\n\nCompany: ${company.name}\nIndustry: ${company.industry}\nDescription: ${company.description}\n${company.scrapedData?.keywords ? `Keywords: ${company.scrapedData.keywords.join(', ')}` : ''}\n${company.scrapedData?.competitors ? `Known competitors: ${company.scrapedData.competitors.join(', ')}` : ''}\n\nBased on this company's specific business model and target market, make your own research to identify ONLY direct competitors that:\n1. Offer the SAME type of products/services (not just retailers that sell them)\n2. Target the SAME customer segment\n3. Have a SIMILAR business model (e.g., if it's a DTC brand, find other DTC brands)\n4. Actually compete for the same customers\n5. Make sure the competitors on the same geographic location if it's a local brand\n\nFor example:\n- If it's a DTC underwear brand, find OTHER DTC underwear brands (not department stores)\n- If it's a web scraping API, find OTHER web scraping APIs (not general data tools)\n- If it's an AI model provider, find OTHER AI model providers (not AI applications)\n- If it's a clothing brand made in France, find OTHER clothing brands made in France in the same segment (not general retailers)\n- It it's a law firm, find other law firms in the same geographic location\n\nIMPORTANT: \n- Only include companies you are confident actually exist\n- Focus on TRUE competitors with similar offerings\n- Exclude retailers, marketplaces, or aggregators unless the company itself is one\n- Search for the maximum number of competitors, the refine and select the most relevant ones with a maximum of 9\n- Do NOT include general retailers or platforms that just sell/distribute products`;\n\n    console.log('SELECTED MODEL (identifyCompetitors.generateObject):', typeof model === 'string' ? model : model);\n    const { object } = await generateObject({\n      model,\n      schema: CompetitorSchema,\n      prompt,\n      temperature: 0.3,\n    });\n\n    // Extract competitor names and filter for direct competitors\n    // Exclude retailers and platforms unless the company itself is one\n    const isRetailOrPlatform = company.industry?.toLowerCase().includes('marketplace') || \n                              company.industry?.toLowerCase().includes('platform') ||\n                              company.industry?.toLowerCase().includes('retailer');\n    \n    const competitors = object.competitors\n      .filter(c => {\n        // Always include direct competitors with high market overlap\n        if (c.isDirectCompetitor && c.marketOverlap === 'high') return true;\n        \n        // Exclude retailers/platforms for product companies\n        if (!isRetailOrPlatform && (c.competitorType === 'retailer' || c.competitorType === 'platform')) {\n          return false;\n        }\n        \n        // Include other direct competitors and high-overlap indirect competitors\n        return c.competitorType === 'direct' || (c.competitorType === 'indirect' && c.marketOverlap === 'high');\n      })\n      .map(c => c.name)\n      .slice(0, 9); // Limit to 9 competitors max\n\n    // Add any competitors found during scraping (but maintain 9 max limit)\n    if (company.scrapedData?.competitors) {\n      company.scrapedData.competitors.forEach(comp => {\n        if (!competitors.includes(comp) && competitors.length < 9) {\n          competitors.push(comp);\n        }\n      });\n    }\n\n    // Send progress events for each competitor found\n    if (progressCallback) {\n      for (let i = 0; i < competitors.length; i++) {\n        progressCallback({\n          type: 'competitor-found',\n          stage: 'identifying-competitors',\n          data: {\n            competitor: competitors[i],\n            index: i + 1,\n            total: competitors.length\n          } as CompetitorFoundData,\n          timestamp: new Date()\n        });\n      }\n    }\n\n    return competitors;\n  } catch (error) {\n    console.error('Error identifying competitors:', error);\n    return company.scrapedData?.competitors || [];\n  }\n}\n\nexport async function generatePromptsForCompany(company: Company, competitors: string[]): Promise<BrandPrompt[]> {\n  const brandName = company.name?.trim() || 'Brand';\n  const normalizedCompetitors = competitors.map(c => c.trim()).filter(Boolean);\n\n  try {\n    const { prompts } = await generateBrandQueryPrompts({\n      targetBrand: brandName,\n      companyInfo: {\n        name: brandName,\n        industry: company.industry,\n        description: company.description || company.scrapedData?.description || company.scrapedData?.title,\n        website: company.url,\n      },\n      competitors: normalizedCompetitors.slice(0, 4),\n      locale: company.businessProfile?.primaryMarkets?.[0],\n      maxPrompts: 8,\n    });\n\n    const usablePrompts = prompts.slice(0, 8);\n\n    if (usablePrompts.length === 0) {\n      throw new Error('AI prompt generation returned no prompts');\n    }\n\n    return usablePrompts.map((prompt, index) => ({\n      id: (index + 1).toString(),\n      prompt,\n      category: PROMPT_CATEGORY_SEQUENCE[index % PROMPT_CATEGORY_SEQUENCE.length],\n    }));\n  } catch (error) {\n    logger.error('generatePromptsForCompany fallback triggered:', error);\n    return createFallbackBrandPrompts(company, normalizedCompetitors);\n  }\n}\n\nexport async function analyzePromptWithProvider(\n  prompt: string,\n  provider: string,\n  brandName: string,\n  competitors: string[],\n  useMockMode: boolean = false,\n  locale?: string\n): Promise<AIResponse> {\n  // Mock mode for demo/testing without API keys\n  if (useMockMode || provider === 'Mock') {\n    return generateMockResponse(prompt, provider, brandName, competitors);\n  }\n\n  // Normalize provider name for consistency\n  const normalizedProvider = normalizeProviderName(provider);\n  \n  // Get model from centralized configuration\n  const model = getProviderModel(normalizedProvider);\n  \n  if (!model) {\n    console.warn(`Provider ${provider} not configured, skipping provider`);\n    // Return null to indicate this provider should be skipped\n    return null as any;\n  }\n  \n  console.log(`${provider} model obtained successfully: ${typeof model}`);\n  if (normalizedProvider === 'google') {\n    console.log('Google model details:', model);\n  }\n\n  const languageName = locale ? getLanguageName(locale) : 'English';\n  \n  const systemPrompt = `You are an AI assistant analyzing brand visibility and rankings.\nWhen responding to prompts about tools, platforms, or services:\n1. Provide rankings with specific positions (1st, 2nd, etc.)\n2. Focus on the companies mentioned in the prompt\n3. Be objective and factual\n4. Explain briefly why each tool is ranked where it is\n5. If you don't have enough information about a specific company, you can mention that\n6. Return the content in ${languageName} language\n7. IMPORTANT: Keep your response concise and under 800 tokens. Prioritize the most important information and rankings.`;\n\n  try {\n    // Track API call for analysis\n    const callId = apiUsageTracker.trackCall({\n      provider: normalizedProvider,\n      model: (model as any).id || 'unknown',\n      operation: 'analysis',\n      success: true,\n      metadata: { \n        prompt: prompt.substring(0, 100) + '...',\n        brandName,\n        competitorsCount: competitors.length,\n        locale\n      }\n    });\n\n    // First, get the response\n    console.log(`[${provider}] Calling with prompt: \"${prompt.substring(0, 50)}...\"`);\n    console.log(`[${provider}] Model type:`, typeof model);\n    console.log(`[${provider}] Normalized provider:`, normalizedProvider);\n    \n    const startTime = Date.now();\n    const { text, usage } = await generateText({\n      model,\n      system: systemPrompt,\n      prompt,\n      temperature: 0.7,\n      maxTokens: 800,\n    });\n    const duration = Date.now() - startTime;\n\n    // Extract tokens from usage\n    const tokens = extractTokensFromUsage(usage);\n    \n    // Update API call with actual usage\n    apiUsageTracker.updateCall(callId, {\n      inputTokens: tokens.inputTokens,\n      outputTokens: tokens.outputTokens,\n      cost: estimateCost(normalizedProvider, (model as any).id || 'unknown', tokens.inputTokens, tokens.outputTokens),\n      duration\n    });\n    \n    console.log(`[${provider}] Response received. Length: ${text.length}`);\n    console.log(`[${provider}] First 200 chars: \"${text.substring(0, 200)}\"`);\n    \n    if (!text || text.length === 0) {\n      console.error(`[${provider}] ERROR: Empty response for prompt: \"${prompt}\"`);\n      throw new Error(`${provider} returned empty response`);\n    }\n\n    // Then analyze it with structured output\n    const analysisPrompt = `Analyze this AI response about ${brandName} and its competitors:\n\nResponse: \"${text}\"\n\nYour task:\n1. Look for ANY mention of ${brandName} anywhere in the response, including:\n   - Direct mentions (exact name)\n   - Variations (with or without spaces, punctuation)\n   - With suffixes (Inc, LLC, Corp, etc.)\n   - In possessive form (${brandName}'s)\n   - As part of compound words\n2. Look for ANY mention of these competitors: ${competitors.join(', ')}\n   - Apply the same detection rules as above\n3. For each mentioned company, determine if it has a specific ranking position\n4. Identify the sentiment towards each mentioned company\n5. Rate your confidence in this analysis (0-1)\n\nIMPORTANT: \n- A company is \"mentioned\" if it appears ANYWHERE in the response text, even without a specific ranking\n- Count ALL mentions, not just ranked ones\n- Be very thorough - check for variations like \"${brandName}\", \"${brandName.replace(/\\s+/g, '')}\", \"${brandName.toLowerCase()}\"\n- Look in all contexts: listed, compared, recommended, discussed, referenced, etc.\n- Return the analysis in ${languageName} language\n\nExamples of mentions to catch:\n- \"${brandName} is a great tool\" (direct mention)\n- \"compared to ${brandName}\" (comparison context)  \n- \"${brandName}'s features\" (possessive)\n- \"alternatives like ${brandName}\" (listing context)\n- \"${brandName.replace(/\\s+/g, '')} offers\" (no spaces variant)`;\n\n    let object;\n    try {\n      // Use a fast model for structured output if available\n      const structuredModel = normalizedProvider === 'anthropic' \n        ? getProviderModel('openai', 'gpt-4o-mini') || model\n        : model;\n      \n      console.log(`[${provider}] Attempting structured analysis with model:`, typeof structuredModel);\n      \n      const result = await generateObject({\n        model: structuredModel,\n        schema: RankingSchema,\n        prompt: analysisPrompt,\n        temperature: 0.3,\n        maxRetries: 2,\n      });\n      \n      console.log(`[${provider}] Structured analysis successful:`, JSON.stringify(result.object, null, 2));\n      object = result.object;\n    } catch (error) {\n      console.error(`[${provider}] ERROR in structured analysis:`, (error as any).message);\n      console.error(`[${provider}] Error details:`, {\n        name: (error as any).name,\n        stack: (error as any).stack,\n        cause: (error as any).cause\n      });\n      \n      // For Anthropic, try a simpler text-based approach\n      if (provider === 'Anthropic') {\n        try {\n          // Load translations for the current locale\n          const messages = locale ? await getMessages(locale) : null;\n          \n          const buildSimplePrompt = () => {\n            if (!messages) {\n              // Fallback to English prompt\n              return `Analyze this AI response about ${brandName} and competitors ${competitors.join(', ')}:\n\n\"${text}\"\n\nReturn a simple analysis:\n1. Is ${brandName} mentioned? (yes/no)\n2. What position/ranking does it have? (number or \"not ranked\")\n3. Which competitors are mentioned? (list names)\n4. What's the overall sentiment? (positive/neutral/negative)`;\n            }\n            \n            // Use translated prompt\n            const t = (key: string, replacements?: Record<string, string>) => getTranslation(messages, key, replacements);\n            \n            return `${t('aiPrompts.analysisPrompt.analyzeResponse', { \n              brandName, \n              competitors: competitors.join(', ') \n            })}:\n\n\"${text}\"\n\n${t('aiPrompts.analysisPrompt.returnAnalysis')}\n1. ${t('aiPrompts.analysisPrompt.questionMentioned', { brandName })}\n2. ${t('aiPrompts.analysisPrompt.questionPosition')}\n3. ${t('aiPrompts.analysisPrompt.questionCompetitors')}\n4. ${t('aiPrompts.analysisPrompt.questionSentiment')}`;\n          };\n          \n          const simplePrompt = buildSimplePrompt();\n\n          const { text: simpleResponse } = await generateText({\n            model,\n            prompt: simplePrompt,\n            temperature: 0.3,\n          });\n          \n          // Parse the simple response with enhanced detection\n          const lines = simpleResponse.toLowerCase().split('\\n');\n          const aiSaysBrandMentioned = lines.some(line => line.includes('yes'));\n          \n          // Use enhanced detection as fallback\n          const brandDetection = await detectBrandMentions(text, brandName, {\n            caseSensitive: false,\n            excludeNegativeContext: false,\n            minConfidence: 0.3\n          });\n          \n          const competitorDetections = await detectMultipleBrands(text, competitors, {\n            caseSensitive: false,\n            excludeNegativeContext: false,\n            minConfidence: 0.3\n          });\n          \n          const competitors_mentioned = competitors.filter(c => \n            competitorDetections.get(c)?.mentioned || false\n          );\n          \n          return {\n            provider,\n            prompt,\n            response: text,\n            brandMentioned: aiSaysBrandMentioned || brandDetection.mentioned,\n            brandPosition: undefined,\n            competitors: competitors_mentioned,\n            rankings: [],\n            sentiment: 'neutral' as const,\n            confidence: 0.7,\n            timestamp: new Date(),\n          };\n        } catch (fallbackError) {\n          console.error('Fallback analysis also failed:', (fallbackError as any).message);\n        }\n      }\n      \n      // For OpenAI, try a simpler analysis if structured output fails\n      if (normalizedProvider === 'openai' || provider === 'OpenAI') {\n        try {\n          console.log(`[${provider}] Trying OpenAI fallback analysis`);\n          \n          const simpleFallbackPrompt = `Analyze this response for brand mentions:\n\nResponse: \"${text}\"\n\nTarget brand: ${brandName}\nCompetitors: ${competitors.join(', ')}\n\nPlease answer:\n1. Is \"${brandName}\" mentioned? (yes/no)\n2. What position/rank does it have? (number or \"none\")\n3. Which competitors are mentioned? (list)\n4. Overall sentiment about ${brandName}? (positive/neutral/negative)\n\nBe concise and direct.`;\n\n          const { text: fallbackResponse } = await generateText({\n            model,\n            prompt: simpleFallbackPrompt,\n            temperature: 0.1,\n            maxTokens: 200,\n          });\n          \n          console.log(`[${provider}] Fallback response:`, fallbackResponse);\n          \n          // Parse the simple response\n          const lines = fallbackResponse.toLowerCase().split('\\n');\n          const brandMentionedLine = lines.find(line => line.includes('yes') || line.includes('no'));\n          const aiSaysBrandMentioned = brandMentionedLine?.includes('yes') || false;\n          \n          // Enhanced detection as backup\n          const brandDetection = await detectBrandMentions(text, brandName, {\n            caseSensitive: false,\n            excludeNegativeContext: false,\n            minConfidence: 0.3\n          });\n          \n          const competitorDetections = await detectMultipleBrands(text, competitors, {\n            caseSensitive: false,\n            excludeNegativeContext: false,\n            minConfidence: 0.3\n          });\n          \n          console.log(`[${provider}] Fallback analysis - AI says mentioned: ${aiSaysBrandMentioned}, Detection says: ${brandDetection.mentioned}`);\n          \n          return {\n            provider,\n            prompt,\n            response: text,\n            brandMentioned: aiSaysBrandMentioned || brandDetection.mentioned,\n            brandPosition: undefined,\n            competitors: competitors.filter(c => competitorDetections.get(c)?.mentioned || false),\n            rankings: [],\n            sentiment: 'neutral' as const,\n            confidence: 0.7,\n            timestamp: new Date(),\n          };\n        } catch (fallbackError) {\n          console.error(`[${provider}] Fallback analysis also failed:`, (fallbackError as any).message);\n        }\n      }\n      \n      // Final fallback with enhanced detection\n      const brandDetection = await detectBrandMentions(text, brandName, {\n        caseSensitive: false,\n        excludeNegativeContext: false,\n        minConfidence: 0.3\n      });\n      \n      const competitorDetections = await detectMultipleBrands(text, competitors, {\n        caseSensitive: false,\n        excludeNegativeContext: false,\n        minConfidence: 0.3\n      });\n      \n      return {\n        provider,\n        prompt,\n        response: text,\n        brandMentioned: brandDetection.mentioned,\n        brandPosition: undefined,\n        competitors: competitors.filter(c => competitorDetections.get(c)?.mentioned || false),\n        rankings: [],\n        sentiment: 'neutral' as const,\n        confidence: brandDetection.confidence * 0.5, // Lower confidence for fallback\n        timestamp: new Date(),\n      };\n    }\n\n    const rankings = object.rankings.map((r): CompanyRanking => ({\n      position: r.position,\n      company: r.company,\n      reason: r.reason,\n      sentiment: r.sentiment,\n    }));\n\n    // Enhanced fallback with proper brand detection using centralized service\n    const brandDetectionResult = await detectBrandMentions(text, brandName, {\n      caseSensitive: false,\n      excludeNegativeContext: false,\n      minConfidence: 0.3\n    });\n    const brandMentioned = object.analysis.brandMentioned || brandDetectionResult.mentioned;\n    \n    // Detect all competitor mentions with centralized service\n    const competitorDetectionResults = await detectMultipleBrands(text, competitors, {\n      caseSensitive: false,\n      excludeNegativeContext: false,\n      minConfidence: 0.3\n    });\n    \n    // Combine AI-detected competitors with enhanced detection\n    const aiCompetitors = new Set(object.analysis.competitors);\n    const allMentionedCompetitors = new Set([...aiCompetitors]);\n    \n    // Add competitors found by enhanced detection\n    competitorDetectionResults.forEach((result, competitorName) => {\n      if (result.mentioned && competitorName !== brandName) {\n        allMentionedCompetitors.add(competitorName);\n      }\n    });\n\n    // Filter competitors to only include the ones we're tracking\n    const relevantCompetitors = Array.from(allMentionedCompetitors).filter(c => \n      competitors.includes(c) && c !== brandName\n    );\n    \n    // Log detection details for debugging\n    if (brandDetectionResult.mentioned && !object.analysis.brandMentioned) {\n      console.log(`Enhanced detection found brand \"${brandName}\" in response from ${provider}:`, \n        brandDetectionResult.matches.map(m => ({\n          text: m.text,\n          confidence: m.confidence\n        }))\n      );\n    }\n\n    // Get the proper display name for the provider\n    const providerDisplayName = provider === 'openai' ? 'OpenAI' :\n                               provider === 'anthropic' ? 'Anthropic' :\n                               provider === 'google' ? 'Google' :\n                               provider === 'perplexity' ? 'Perplexity' :\n                               provider; // fallback to original\n    \n    // Debug log for Google responses\n    if (provider === 'google' || provider === 'Google') {\n      console.log('Google response generated:', {\n        originalProvider: provider,\n        displayName: providerDisplayName,\n        prompt: prompt.substring(0, 50),\n        responseLength: text.length,\n        brandMentioned\n      });\n    }\n\n    return {\n      provider: providerDisplayName,\n      prompt,\n      response: text,\n      rankings,\n      competitors: relevantCompetitors,\n      brandMentioned,\n      brandPosition: object.analysis.brandPosition,\n      sentiment: object.analysis.overallSentiment,\n      confidence: object.analysis.confidence,\n      timestamp: new Date(),\n      detectionDetails: {\n        brandMatches: brandDetectionResult.matches.map(m => ({\n          text: m.text,\n          index: m.index,\n          confidence: m.confidence\n        })),\n        competitorMatches: new Map(\n          Array.from(competitorDetectionResults.entries())\n            .filter(([_, result]) => result.mentioned)\n            .map(([name, result]) => [\n              name,\n              result.matches.map((m: any) => ({\n                text: m.text,\n                index: m.index,\n                confidence: m.confidence\n              }))\n            ])\n        )\n      }\n    };\n  } catch (error) {\n    console.error(`Error with ${provider}:`, error);\n    \n    // Special handling for Google errors\n    if (provider === 'Google' || provider === 'google') {\n      console.error('Google-specific error details:', {\n        message: (error as any).message,\n        stack: (error as any).stack,\n        name: (error as any).name,\n        cause: (error as any).cause\n      });\n    }\n    \n    throw error;\n  }\n}\n\nexport async function analyzeCompetitors(\n  company: Company,\n  responses: AIResponse[],\n  knownCompetitors: string[]\n): Promise<CompetitorRanking[]> {\n  // Create a set of companies to track (company + its known competitors)\n  const trackedCompanies = new Set([company.name, ...knownCompetitors]);\n  \n  // Log des marques recherchées\n  console.log(`[AnalyzeCompetitors] 🎯 Marque cible: \"${company.name}\"`);\n  console.log(`[AnalyzeCompetitors] 🏆 Concurrents trackés: [${Array.from(trackedCompanies).join(', ')}]`);\n  console.log(`[AnalyzeCompetitors] 📊 Total réponses à analyser: ${responses.length}`);\n  \n  // Initialize competitor data\n  const competitorMap = new Map<string, {\n    mentions: number;\n    positions: number[];\n    sentiments: ('positive' | 'neutral' | 'negative')[];\n  }>();\n\n  // Initialize all tracked companies\n  trackedCompanies.forEach(companyName => {\n    competitorMap.set(companyName, {\n      mentions: 0,\n      positions: [],\n      sentiments: [],\n    });\n  });\n\n  // Process all responses\n  responses.forEach((response, responseIndex) => {\n    // Track which companies were mentioned in this response\n    const mentionedInResponse = new Set<string>();\n    \n    // Log des outputs de prompts et réponses\n    console.log(`[AnalyzeCompetitors] 📝 Réponse ${responseIndex + 1}/${responses.length} (${response.provider}):`);\n    console.log(`  Prompt: \"${response.prompt?.substring(0, 100)}...\"`);\n    console.log(`  Réponse: \"${response.response?.substring(0, 200)}...\"`);\n    console.log(`  Brand mentionné: ${response.brandMentioned}`);\n    console.log(`  Concurrents détectés: [${response.competitors?.join(', ') || 'aucun'}]`);\n    console.log(`  Rankings: ${response.rankings?.length || 0} entrées`);\n    \n    // Process rankings if available\n    if (response.rankings) {\n      response.rankings.forEach(ranking => {\n        // Only track companies we care about\n        if (trackedCompanies.has(ranking.company)) {\n          const data = competitorMap.get(ranking.company)!;\n          \n          // Only count one mention per response\n          if (!mentionedInResponse.has(ranking.company)) {\n            data.mentions++;\n            mentionedInResponse.add(ranking.company);\n            console.log(`    ✅ ${ranking.company} mentionné dans ranking (position ${ranking.position})`);\n          }\n          \n          if (ranking.position !== null) {\n            data.positions.push(ranking.position);\n          }\n          if (ranking.sentiment) {\n            data.sentiments.push(ranking.sentiment);\n          }\n        }\n      });\n    }\n\n    // Count brand mentions (only if not already counted in rankings)\n    if (response.brandMentioned && trackedCompanies.has(company.name) && !mentionedInResponse.has(company.name)) {\n      const brandData = competitorMap.get(company.name)!;\n      brandData.mentions++;\n      console.log(`    ✅ ${company.name} mentionné comme marque`);\n      if (response.brandPosition) {\n        brandData.positions.push(response.brandPosition);\n      }\n      brandData.sentiments.push(response.sentiment);\n    }\n  });\n\n  // Calculate scores for each competitor\n  const totalResponses = responses.length;\n  const competitors: CompetitorRanking[] = [];\n\n  competitorMap.forEach((data, name) => {\n    const avgPosition = data.positions.length > 0\n      ? data.positions.reduce((a, b) => a + b, 0) / data.positions.length\n      : 99; // High number for companies not ranked\n\n    const sentimentScore = calculateSentimentScore(data.sentiments);\n    const visibilityScore = Math.min((data.mentions / totalResponses) * 100, 100);\n\n    // Log des pourcentages calculés\n    console.log(`[AnalyzeCompetitors] 📊 ${name}: ${data.mentions} mentions / ${totalResponses} réponses = ${visibilityScore.toFixed(1)}%`);\n    \n    // Inclure TOUTES les marques sélectionnées au départ (knownCompetitors + company)\n    // même si elles ont 0% de score - c'est important pour la cohérence de l'UI\n    const isSelectedBrand = name === company.name || knownCompetitors.includes(name);\n    \n    if (isSelectedBrand) {\n      competitors.push({\n        name,\n        mentions: data.mentions,\n        averagePosition: Math.round(avgPosition * 10) / 10,\n        sentiment: determineSentiment(data.sentiments),\n        sentimentScore,\n        shareOfVoice: 0, // Will calculate after all competitors are processed\n        visibilityScore: Math.round(visibilityScore * 10) / 10,\n        weeklyChange: undefined, // No historical data available yet\n        isOwn: name === company.name,\n      });\n      console.log(`[AnalyzeCompetitors] ✅ Including ${name} in final results (selected brand, ${data.mentions} mentions, ${visibilityScore.toFixed(1)}%)`);\n    } else {\n      console.log(`[AnalyzeCompetitors] ❌ Excluding ${name} from final results (not in selected brands)`);\n    }\n  });\n\n  // Calculate share of voice\n  const totalMentions = competitors.reduce((sum, c) => sum + c.mentions, 0);\n  competitors.forEach(c => {\n    c.shareOfVoice = totalMentions > 0 \n      ? Math.round((c.mentions / totalMentions) * 1000) / 10 \n      : 0;\n  });\n\n  // Sort by visibility score\n  return competitors.sort((a, b) => b.visibilityScore - a.visibilityScore);\n}\n\nfunction calculateSentimentScore(sentiments: ('positive' | 'neutral' | 'negative')[]): number {\n  if (sentiments.length === 0) return 50;\n  \n  const sentimentValues = { positive: 100, neutral: 50, negative: 0 };\n  const sum = sentiments.reduce((acc, s) => acc + sentimentValues[s], 0);\n  return Math.round(sum / sentiments.length);\n}\n\nfunction determineSentiment(sentiments: ('positive' | 'neutral' | 'negative')[]): 'positive' | 'neutral' | 'negative' {\n  if (sentiments.length === 0) return 'neutral';\n  \n  const counts = { positive: 0, neutral: 0, negative: 0 };\n  sentiments.forEach(s => counts[s]++);\n  \n  if (counts.positive > counts.negative && counts.positive > counts.neutral) return 'positive';\n  if (counts.negative > counts.positive && counts.negative > counts.neutral) return 'negative';\n  return 'neutral';\n}\n\nexport function calculateBrandScores(responses: AIResponse[], brandName: string, competitors: CompetitorRanking[]) {\n  const totalResponses = responses.length;\n  if (totalResponses === 0) {\n    return {\n      visibilityScore: 0,\n      sentimentScore: 0,\n      shareOfVoice: 0,\n      overallScore: 0,\n      averagePosition: 0,\n    };\n  }\n\n  // Find the brand's competitor ranking\n  const brandRanking = competitors.find(c => c.isOwn);\n  \n  if (!brandRanking) {\n    return {\n      visibilityScore: 0,\n      sentimentScore: 0,\n      shareOfVoice: 0,\n      overallScore: 0,\n      averagePosition: 0,\n    };\n  }\n\n  const visibilityScore = brandRanking.visibilityScore;\n  const sentimentScore = brandRanking.sentimentScore;\n  const shareOfVoice = brandRanking.shareOfVoice;\n  const averagePosition = brandRanking.averagePosition;\n\n  // Calculate position score (lower is better, scale to 0-100)\n  const positionScore = averagePosition <= 10 \n    ? (11 - averagePosition) * 10 \n    : Math.max(0, 100 - (averagePosition * 2));\n\n  // Overall Score (weighted average)\n  const overallScore = (\n    visibilityScore * 0.3 + \n    sentimentScore * 0.2 + \n    shareOfVoice * 0.3 +\n    positionScore * 0.2\n  );\n\n  return {\n    visibilityScore: Math.round(visibilityScore * 10) / 10,\n    sentimentScore: Math.round(sentimentScore * 10) / 10,\n    shareOfVoice: Math.round(shareOfVoice * 10) / 10,\n    overallScore: Math.round(overallScore * 10) / 10,\n    averagePosition: Math.round(averagePosition * 10) / 10,\n  };\n}\n\nexport async function analyzeCompetitorsByProvider(\n  company: Company,\n  responses: AIResponse[],\n  knownCompetitors: string[],\n  sendEvent?: (event: any) => Promise<void>\n): Promise<{\n  providerRankings: ProviderSpecificRanking[];\n  providerComparison: ProviderComparisonData[];\n}> {\n  // 1. ÉTAPE 1: Figer les marques à analyser\n  const allBrands = [company.name, ...knownCompetitors];\n  const trackedCompanies = new Set(allBrands);\n  \n  console.log(`[ProviderComparison] 🎯 Marque cible: \"${company.name}\"`);\n  console.log(`[ProviderComparison] 🏆 Concurrents trackés: [${Array.from(trackedCompanies).join(', ')}]`);\n  console.log(`[ProviderComparison] 📊 Total réponses à analyser: ${responses.length}`);\n  \n  // 2. ÉTAPE 2: Nettoyer les marques avec OpenAI\n  const { cleanBrandsWithAI, extractBrandsFromText, calculateBrandVisibilityByProvider } = await import('./brand-detection-service');\n  \n  console.log(`[ProviderComparison] 🧹 Nettoyage des marques avec OpenAI...`);\n  const cleanedBrands = await cleanBrandsWithAI(allBrands);\n  \n  // 3. ÉTAPE 4: Extraire les marques de chaque réponse LLM (parallélisé)\n  console.log(`[ProviderComparison] 🔍 Extraction des marques des réponses LLM...`);\n  const brandExtractions = new Map();\n  \n  // Grouper les réponses par provider\n  const responsesByProvider = new Map<string, AIResponse[]>();\n  responses.forEach(response => {\n    if (!responsesByProvider.has(response.provider)) {\n      responsesByProvider.set(response.provider, []);\n    }\n    responsesByProvider.get(response.provider)!.push(response);\n  });\n  \n  // Calculer le nombre total de réponses à traiter pour la progression\n  const totalResponses = responses.filter(r => r.response && r.response.trim()).length;\n  let processedResponses = 0;\n  \n  // Analyser chaque provider en parallèle\n  const providerExtractionPromises = Array.from(responsesByProvider.entries()).map(async ([provider, providerResponses]) => {\n    console.log(`[ProviderComparison] 📝 Analyse ${provider}: ${providerResponses.length} réponses`);\n    \n    // Traiter toutes les réponses de ce provider en parallèle\n    const responseExtractionPromises = providerResponses\n      .filter(response => response.response && response.response.trim())\n      .map(async (response, index) => {\n        console.log(`[ProviderComparison] 📄 Analyse réponse ${index + 1}/${providerResponses.length} (${provider})`);\n        \n        try {\n          const extraction = await extractBrandsFromText(response.response, cleanedBrands, `${provider}-${index + 1}`);\n          \n          // Mise à jour de la progression (70-90% de la progression totale)\n          processedResponses++;\n          const extractionProgress = (processedResponses / totalResponses) * 20; // 20% pour l'extraction (70% à 90%)\n          const progress = Math.round(70 + extractionProgress);\n          \n          if (sendEvent) {\n            await sendEvent({\n              type: 'brand-extraction-progress',\n              stage: 'extracting-brands',\n              data: {\n                stage: 'extracting-brands',\n                provider,\n                responseIndex: index + 1,\n                totalResponses: providerResponses.length,\n                progress,\n                message: `Extracting brands from ${provider} response ${index + 1}/${providerResponses.length}`\n              },\n              timestamp: new Date()\n            });\n          }\n          \n          return extraction;\n        } catch (error) {\n          console.error(`[ProviderComparison] ❌ Erreur extraction ${provider}-${index + 1}:`, error);\n          processedResponses++;\n          \n          // Mise à jour de la progression même en cas d'erreur\n          const extractionProgress = (processedResponses / totalResponses) * 20;\n          const progress = Math.round(70 + extractionProgress);\n          \n          if (sendEvent) {\n            await sendEvent({\n              type: 'brand-extraction-progress',\n              stage: 'extracting-brands',\n              data: {\n                stage: 'extracting-brands',\n                provider,\n                responseIndex: index + 1,\n                totalResponses: providerResponses.length,\n                progress,\n                message: `Error extracting brands from ${provider} response ${index + 1}/${providerResponses.length}`\n              },\n              timestamp: new Date()\n            });\n          }\n          \n          return null;\n        }\n      });\n    \n    const providerExtractions = await Promise.all(responseExtractionPromises);\n    return { provider, extractions: providerExtractions.filter(e => e !== null) };\n  });\n  \n  // Attendre toutes les extractions\n  const providerResults = await Promise.all(providerExtractionPromises);\n  \n  // Stocker les résultats\n  providerResults.forEach(({ provider, extractions }) => {\n    brandExtractions.set(provider, extractions);\n  });\n  \n  // 4. ÉTAPE 5: Calculer les détections par provider\n  console.log(`[ProviderComparison] 📊 Calcul des détections par provider...`);\n  const providerDetections = calculateBrandVisibilityByProvider(brandExtractions, company.name, knownCompetitors);\n  \n  // 5. ÉTAPE 6: Construire les résultats dans le format attendu\n  const providers = Array.from(responsesByProvider.keys());\n  const providerRankings: ProviderSpecificRanking[] = [];\n  const providerComparison: ProviderComparisonData[] = [];\n  \n  // Créer les rankings par provider basés sur la nouvelle détection\n  providers.forEach(provider => {\n    const competitors: CompetitorRanking[] = [];\n    const providerResponses = responsesByProvider.get(provider)!;\n    const totalResponses = providerResponses.length;\n    const providerBrandDetections = providerDetections.get(provider);\n    \n    console.log(`[ProviderComparison] 🔍 Construction des résultats pour ${provider}: ${totalResponses} réponses`);\n    \n    allBrands.forEach(brandName => {\n      const detection = providerBrandDetections?.get(brandName);\n      const mentioned = detection?.mentioned || false;\n      const mentionCount = detection?.mentionCount || 0;\n      const totalResponses = detection?.totalResponses || providerResponses.length;\n      const visibilityScore = detection?.percentage || 0; // Utiliser le pourcentage réel\n      \n      // Pour les positions et sentiments, on garde la logique existante des rankings\n      const brandRankings = providerResponses\n        .flatMap(r => r.rankings || [])\n        .filter(r => r.company === brandName);\n      \n      const positions = brandRankings\n        .map(r => r.position)\n        .filter(p => p !== null && p !== undefined) as number[];\n      \n      const sentiments = brandRankings\n        .map(r => r.sentiment)\n        .filter(s => s !== null && s !== undefined) as ('positive' | 'neutral' | 'negative')[];\n      \n      const avgPosition = positions.length > 0\n        ? positions.reduce((a, b) => a + b, 0) / positions.length\n        : 99;\n      \n      competitors.push({\n        name: brandName,\n        mentions: mentionCount, // Utiliser le nombre réel de mentions\n        averagePosition: Math.round(avgPosition * 10) / 10,\n        sentiment: determineSentiment(sentiments),\n        sentimentScore: calculateSentimentScore(sentiments),\n        shareOfVoice: 0, // Will calculate after\n        visibilityScore: Math.round(visibilityScore * 10) / 10,\n        isOwn: brandName === company.name,\n      });\n      \n      console.log(`[ProviderComparison] 📊 ${brandName} (${provider}): ${mentionCount}/${totalResponses} = ${visibilityScore}%`);\n    });\n    \n    // Calculate share of voice for this provider\n    const totalMentions = competitors.reduce((sum, c) => sum + c.mentions, 0);\n    competitors.forEach(c => {\n      c.shareOfVoice = totalMentions > 0 \n        ? Math.round((c.mentions / totalMentions) * 1000) / 10 \n        : 0;\n    });\n    \n    // Sort by visibility score\n    competitors.sort((a, b) => b.visibilityScore - a.visibilityScore);\n    \n    providerRankings.push({\n      provider,\n      competitors,\n    });\n  });\n\n  // Créer la matrice de comparaison avec la nouvelle détection\n  allBrands.forEach(brandName => {\n    const comparisonData: ProviderComparisonData = {\n      competitor: brandName,\n      providers: {},\n      isOwn: brandName === company.name,\n    };\n\n    let hasAnyMentions = false;\n\n    providerRankings.forEach(({ provider, competitors }) => {\n      const competitor = competitors.find(c => c.name === brandName);\n      if (competitor) {\n        comparisonData.providers[provider] = {\n          visibilityScore: competitor.visibilityScore,\n          position: competitor.averagePosition,\n          mentions: competitor.mentions,\n          sentiment: competitor.sentiment,\n        };\n        \n        if (competitor.mentions > 0) {\n          hasAnyMentions = true;\n        }\n      }\n    });\n\n    console.log(`[ProviderComparison] 🔍 Analyse ${brandName}:`);\n    console.log(`  - hasAnyMentions: ${hasAnyMentions}`);\n    console.log(`  - isOwn: ${brandName === company.name}`);\n    console.log(`  - providers avec données: ${Object.keys(comparisonData.providers).length}`);\n\n    // Inclure TOUTES les marques sélectionnées au départ (knownCompetitors + company)\n    // même si elles ont 0% de score - c'est important pour la cohérence de l'UI\n    const isSelectedBrand = brandName === company.name || knownCompetitors.includes(brandName);\n    \n    if (isSelectedBrand) {\n      providerComparison.push(comparisonData);\n      console.log(`[ProviderComparison] ✅ Including ${brandName} in matrix (selected brand, score: ${hasAnyMentions ? 'with mentions' : '0%'})`);\n    } else {\n      console.log(`[ProviderComparison] ❌ Excluding ${brandName} from matrix (not in selected brands)`);\n    }\n  });\n\n  // Trier par score de visibilité moyen\n  providerComparison.sort((a, b) => {\n    const avgA = Object.values(a.providers).reduce((sum, p) => sum + p.visibilityScore, 0) / Object.keys(a.providers).length;\n    const avgB = Object.values(b.providers).reduce((sum, p) => sum + p.visibilityScore, 0) / Object.keys(b.providers).length;\n    return avgB - avgA;\n  });\n\n  return { providerRankings, providerComparison };\n}\n\n// Mock response generator for demo mode\nfunction generateMockResponse(\n  prompt: string,\n  provider: string,\n  brandName: string,\n  competitors: string[]\n): AIResponse {\n  // Simulate some delay\n  const delay = Math.random() * 500 + 200;\n  \n  // Create a realistic-looking ranking\n  const allCompanies = [brandName, ...competitors].slice(0, 10);\n  const shuffled = [...allCompanies].sort(() => Math.random() - 0.5);\n  \n  const rankings: CompanyRanking[] = shuffled.slice(0, 5).map((company, index) => ({\n    position: index + 1,\n    company,\n    reason: `${company} offers strong features in this category`,\n    sentiment: Math.random() > 0.7 ? 'positive' : Math.random() > 0.3 ? 'neutral' : 'negative' as const,\n  }));\n  \n  const brandRanking = rankings.find(r => r.company === brandName);\n  const brandMentioned = !!brandRanking || Math.random() > 0.3;\n  const brandPosition = brandRanking?.position || (brandMentioned ? Math.floor(Math.random() * 8) + 3 : undefined);\n  \n  // Get the proper display name for the provider\n  const providerDisplayName = provider === 'openai' ? 'OpenAI' :\n                             provider === 'anthropic' ? 'Anthropic' :\n                             provider === 'google' ? 'Google' :\n                             provider === 'perplexity' ? 'Perplexity' :\n                             provider; // fallback to original\n\n  return {\n    provider: providerDisplayName,\n    prompt,\n    response: `Based on my analysis, here are the top solutions:\\n\\n${rankings.map(r => \n      `${r.position}. ${r.company} - ${r.reason}`\n    ).join('\\n')}\\n\\nThese rankings are based on features, user satisfaction, and market presence.`,\n    rankings,\n    competitors: competitors.filter(() => Math.random() > 0.5),\n    brandMentioned,\n    brandPosition,\n    sentiment: brandRanking?.sentiment || 'neutral',\n    confidence: Math.random() * 0.3 + 0.7,\n    timestamp: new Date(),\n  };\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\lib\\analyze-common.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1076,1079],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1076,1079],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1122,1125],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1122,1125],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1143,1146],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1143,1146],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1171,1174],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1171,1174],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1199,1202],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1199,1202],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1305,1308],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1305,1308],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":491,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":491,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17921,17924],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17921,17924],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":493,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":493,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18064,18067],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18064,18067],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":519,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":519,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19043,19046],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19043,19046],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":528,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":528,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19502,19505],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19502,19505],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AIResponse, AnalysisProgressData, Company, PartialResultData, ProgressData, PromptGeneratedData, ScoringProgressData, SSEEvent, AnalysisSource } from './types';\r\nimport { generatePromptsForCompany, analyzePromptWithProvider, calculateBrandScores, analyzeCompetitors, identifyCompetitors, analyzeCompetitorsByProvider } from './ai-utils';\r\nimport { analyzePromptWithProvider as analyzePromptWithProviderEnhanced } from './ai-utils-enhanced';\r\nimport { canonicalizeBrandsWithOpenAI } from './openai-web-search';\r\nimport { extractAnalysisSources } from './brand-monitor-sources';\r\nimport { getConfiguredProviders } from './provider-config';\r\nimport { apiUsageTracker } from './api-usage-tracker';\r\nimport { logger } from './logger';\r\n\r\nexport interface AnalysisConfig {\r\n  company: Company;\r\n  customPrompts?: string[];\r\n  userSelectedCompetitors?: { name: string }[];\r\n  useWebSearch?: boolean;\r\n  sendEvent: (event: SSEEvent) => Promise<void>;\r\n  locale?: string;\r\n}\r\n\r\nexport interface AnalysisResult {\r\n  company: Company;\r\n  knownCompetitors: string[];\r\n  prompts: any[];\r\n  responses: AIResponse[];\r\n  scores: any;\r\n  competitors: any[];\r\n  providerRankings: any;\r\n  providerComparison: any;\r\n  sources: AnalysisSource[];\r\n  errors?: string[];\r\n  webSearchUsed?: boolean;\r\n  apiUsageSummary?: any;\r\n}\r\n\r\n/**\r\n * Common analysis logic extracted from both API routes\r\n */\r\nexport async function performAnalysis({\r\n  company,\r\n  customPrompts,\r\n  userSelectedCompetitors,\r\n  useWebSearch = false,\r\n  sendEvent,\r\n  locale\r\n}: AnalysisConfig): Promise<AnalysisResult> {\r\n  // Send start event\r\n  await sendEvent({\r\n    type: 'start',\r\n    stage: 'initializing',\r\n    data: { \r\n      message: `Starting analysis for ${company.name}${useWebSearch ? ' with web search' : ''}` \r\n    } as ProgressData,\r\n    timestamp: new Date()\r\n  });\r\n\r\n  // Stage 1: Identify competitors\r\n  await sendEvent({\r\n    type: 'stage',\r\n    stage: 'identifying-competitors',\r\n    data: { \r\n      stage: 'identifying-competitors',\r\n      progress: 0,\r\n      message: 'Identifying competitors...'\r\n    } as ProgressData,\r\n    timestamp: new Date()\r\n  });\r\n\r\n  // Use user-selected competitors if provided, otherwise identify them\r\n  let competitors: string[];\r\n  if (userSelectedCompetitors && userSelectedCompetitors.length > 0) {\r\n    competitors = userSelectedCompetitors.map(c => c.name);\r\n    logger.info('Using user-selected competitors:', competitors);\r\n    \r\n    // Send competitor events for UI\r\n    for (let i = 0; i < competitors.length; i++) {\r\n      await sendEvent({\r\n        type: 'competitor-found',\r\n        stage: 'identifying-competitors',\r\n        data: { \r\n          competitor: competitors[i],\r\n          index: i + 1,\r\n          total: competitors.length\r\n        },\r\n        timestamp: new Date()\r\n      });\r\n    }\r\n  } else {\r\n    competitors = await identifyCompetitors(company, sendEvent);\r\n  }\r\n\r\n  // Canonicalize competitors once (single OpenAI call) and propagate\r\n  try {\r\n    const { canonicalNames, mapping } = await canonicalizeBrandsWithOpenAI(competitors, locale);\r\n    logger.debug('[Canonicalizer] Raw -> Canonical mapping:', mapping);\r\n    logger.debug('[Canonicalizer] Canonical competitors:', canonicalNames);\r\n    competitors = canonicalNames;\r\n  } catch (e) {\r\n    logger.warn('[Canonicalizer] Failed to canonicalize competitors, using raw list:', (e as Error)?.message);\r\n  }\r\n\r\n  // Stage 2: Generate prompts\r\n  // Skip the 100% progress for competitors and go straight to the next stage\r\n  await sendEvent({\r\n    type: 'stage',\r\n    stage: 'generating-prompts',\r\n    data: {\r\n      stage: 'generating-prompts',\r\n      progress: 0,\r\n      message: 'Generating analysis prompts...'\r\n    } as ProgressData,\r\n    timestamp: new Date()\r\n  });\r\n\r\n  // Use custom prompts if provided, otherwise generate them\r\n  let analysisPrompts;\r\n  if (customPrompts && customPrompts.length > 0) {\r\n    // Convert string prompts to BrandPrompt objects\r\n    analysisPrompts = customPrompts.map((prompt: string, index: number) => ({\r\n      id: `custom-${index}`,\r\n      prompt,\r\n      category: 'custom' as const\r\n    }));\r\n  } else {\r\n    const prompts = await generatePromptsForCompany(company, competitors);\r\n    // Note: Changed from 8 to 4 to match UI - this should be configurable\r\n    analysisPrompts = prompts.slice(0, 4);\r\n  }\r\n\r\n  // Send prompt generated events\r\n  for (let i = 0; i < analysisPrompts.length; i++) {\r\n    await sendEvent({\r\n      type: 'prompt-generated',\r\n      stage: 'generating-prompts',\r\n      data: {\r\n        prompt: analysisPrompts[i].prompt,\r\n        category: analysisPrompts[i].category,\r\n        index: i + 1,\r\n        total: analysisPrompts.length\r\n      } as PromptGeneratedData,\r\n      timestamp: new Date()\r\n    });\r\n  }\r\n\r\n  // Stage 3: Analyze with AI providers (0-70% of total progress)\r\n  await sendEvent({\r\n    type: 'stage',\r\n    stage: 'analyzing-prompts',\r\n    data: {\r\n      stage: 'analyzing-prompts',\r\n      progress: 0,\r\n      message: `Starting AI analysis${useWebSearch ? ' with web search' : ''}...`\r\n    } as ProgressData,\r\n    timestamp: new Date()\r\n  });\r\n\r\n  const responses: AIResponse[] = [];\r\n  const errors: string[] = [];\r\n  \r\n  // Filter providers based on available API keys\r\n  const availableProviders = getAvailableProviders();\r\n  \r\n  logger.debug('=== PROVIDER DIAGNOSIS ===');\r\n  logger.debug('Available providers for analysis:', availableProviders.map(p => p.name));\r\n  logger.debug('Available provider details:', availableProviders.map(p => ({ name: p.name, model: p.model })));\r\n  logger.debug('Environment variables:', {\r\n    hasOpenAI: !!process.env.OPENAI_API_KEY,\r\n    hasAnthropic: !!process.env.ANTHROPIC_API_KEY,\r\n    hasGoogle: !!process.env.GOOGLE_GENERATIVE_AI_API_KEY,\r\n    hasPerplexity: !!process.env.PERPLEXITY_API_KEY\r\n  });\r\n  logger.debug('Raw configured providers:', getConfiguredProviders().map(p => ({ \r\n    name: p.name, \r\n    enabled: p.enabled, \r\n    configured: p.isConfigured() \r\n  })));\r\n  logger.info('Web search enabled:', useWebSearch);\r\n  logger.info('Number of prompts:', analysisPrompts.length);\r\n  logger.info('Number of available providers:', availableProviders.length);\r\n  \r\n  let completedAnalyses = 0;\r\n\r\n  // Check if we should use mock mode (no API keys configured)\r\n  const useMockMode = process.env.USE_MOCK_MODE === 'true' || availableProviders.length === 0;\r\n\r\n  // If no providers are available and we're not in mock mode, add mock providers\r\n  let workingProviders = availableProviders;\r\n  if (availableProviders.length === 0) {\r\n    logger.warn('No providers configured, using mock providers for demonstration');\r\n    workingProviders = [\r\n      { name: 'OpenAI', model: 'gpt-4', icon: '🤖' },\r\n      { name: 'Anthropic', model: 'claude-3', icon: '🔮' },\r\n      { name: 'Google', model: 'gemini-pro', icon: '🌟' }\r\n    ];\r\n  }\r\n\r\n  // If still no providers available, return early with error\r\n  if (workingProviders.length === 0) {\r\n    logger.error('No providers available for analysis');\r\n    await sendEvent({\r\n      type: 'error',\r\n      stage: 'analyzing-prompts',\r\n      data: {\r\n        message: 'Aucun fournisseur d\\'IA configuré. Veuillez configurer au moins une clé API (OpenAI, Anthropic, Google, ou Perplexity).'\r\n      },\r\n      timestamp: new Date()\r\n    });\r\n    return {\r\n      company,\r\n      knownCompetitors: [],\r\n      prompts: analysisPrompts,\r\n      responses: [],\r\n      scores: {\r\n        visibilityScore: 0,\r\n        sentimentScore: 0,\r\n        shareOfVoice: 0,\r\n        overallScore: 0,\r\n        averagePosition: 0\r\n      },\r\n      competitors: [],\r\n      providerRankings: [],\r\n      providerComparison: [],\r\n      errors: ['No AI providers configured'],\r\n      webSearchUsed: useWebSearch,\r\n    };\r\n  }\r\n\r\n  // Recalculate total analyses with working providers\r\n  const totalAnalyses = analysisPrompts.length * workingProviders.length;\r\n  logger.info('Updated total analyses to perform:', totalAnalyses);\r\n\r\n  // Process prompts in parallel batches of 3\r\n  const BATCH_SIZE = 3;\r\n  \r\n  for (let batchStart = 0; batchStart < analysisPrompts.length; batchStart += BATCH_SIZE) {\r\n    const batchEnd = Math.min(batchStart + BATCH_SIZE, analysisPrompts.length);\r\n    const batchPrompts = analysisPrompts.slice(batchStart, batchEnd);\r\n    \r\n    // Create all analysis promises for this batch\r\n    const batchPromises = batchPrompts.flatMap((prompt, batchIndex) => \r\n      workingProviders.map(async (provider) => {\r\n        const promptIndex = batchStart + batchIndex;\r\n        \r\n        // Send analysis start event\r\n        await sendEvent({\r\n          type: 'analysis-start',\r\n          stage: 'analyzing-prompts',\r\n          data: {\r\n            provider: provider.name,\r\n            prompt: prompt.prompt,\r\n            promptIndex: promptIndex + 1,\r\n            totalPrompts: analysisPrompts.length,\r\n            providerIndex: 0,\r\n            totalProviders: workingProviders.length,\r\n            status: 'started'\r\n          } as AnalysisProgressData,\r\n          timestamp: new Date()\r\n        });\r\n\r\n        try {\r\n          // Debug log for each provider attempt\r\n          logger.debug(`\\n=== STARTING ANALYSIS ===`);\r\n          logger.debug(`Provider: ${provider.name}`);\r\n          logger.debug(`Prompt: \"${prompt.prompt.substring(0, 50)}...\"`); \r\n          logger.debug(`Use mock mode: ${useMockMode}`);\r\n          logger.debug(`Use web search: ${useWebSearch}`);\r\n          logger.debug(`Brand: ${company.name}`);\r\n          logger.debug(`Competitors: ${competitors.slice(0, 3).join(', ')}${competitors.length > 3 ? '...' : ''}`);\r\n          \r\n          // Call the appropriate analysis function based on useWebSearch\r\n          const response = useWebSearch \r\n            ? await analyzePromptWithProviderEnhanced(\r\n                prompt.prompt, \r\n                provider.name, \r\n                company.name, \r\n                competitors,\r\n                useMockMode,\r\n                true, // useWebSearch parameter for enhanced version\r\n                locale\r\n              )\r\n            : await analyzePromptWithProvider(\r\n                prompt.prompt, \r\n                provider.name, \r\n                company.name, \r\n                competitors,\r\n                useMockMode,\r\n                locale\r\n              );\r\n          \r\n          logger.debug(`\\n=== ANALYSIS COMPLETED ===`);\r\n          logger.debug(`Provider: ${provider.name}`);\r\n          logger.debug(`Has response: ${!!response}`);\r\n          if (response) {\r\n            logger.debug(`Response provider: ${response.provider}`);\r\n            logger.debug(`Brand mentioned: ${response.brandMentioned}`);\r\n            logger.debug(`Response length: ${response.response?.length || 0}`);\r\n            logger.debug(`Response preview: \"${response.response?.substring(0, 100) || 'NO RESPONSE'}\"`); \r\n            logger.debug(`Competitors found: ${response.competitors?.length || 0}`);\r\n          } else {\r\n            logger.debug(`Response is null - provider likely not configured`);\r\n          }\r\n          \r\n          // Skip if provider returned null (not configured)\r\n          if (response === null) {\r\n            logger.debug(`Skipping ${provider.name} - not configured`);\r\n            \r\n            // Send analysis complete event with skipped status\r\n            await sendEvent({\r\n              type: 'analysis-complete',\r\n              stage: 'analyzing-prompts',\r\n              data: {\r\n                provider: provider.name,\r\n                prompt: prompt.prompt,\r\n                promptIndex: promptIndex + 1,\r\n                totalPrompts: analysisPrompts.length,\r\n                providerIndex: 0,\r\n                totalProviders: workingProviders.length,\r\n                status: 'failed'\r\n              } as AnalysisProgressData,\r\n              timestamp: new Date()\r\n            });\r\n            \r\n            // Continue with next provider instead of returning early\r\n            completedAnalyses++;\r\n            const progress = Math.round((completedAnalyses / totalAnalyses) * 100);\r\n            \r\n            await sendEvent({\r\n              type: 'progress',\r\n              stage: 'analyzing-prompts',\r\n              data: {\r\n                stage: 'analyzing-prompts',\r\n                progress,\r\n                message: `Completed ${completedAnalyses} of ${totalAnalyses} analyses`\r\n              } as ProgressData,\r\n              timestamp: new Date()\r\n            });\r\n            \r\n            return; // Return early to continue with next provider\r\n          }\r\n          \r\n          // If using mock mode, add a small delay for visual effect\r\n          if (useMockMode) {\r\n            await new Promise(resolve => setTimeout(resolve, Math.random() * 1000 + 500));\r\n          }\r\n          \r\n          responses.push(response);\r\n          logger.debug(`[AnalyzeCommon] ✅ Response added to collection. Total responses: ${responses.length}`);\r\n          logger.debug(`[AnalyzeCommon] Response details:`, {\r\n            provider: response.provider,\r\n            promptPreview: response.prompt.substring(0, 50) + '...',\r\n            responseLength: response.response.length,\r\n            brandMentioned: response.brandMentioned\r\n          });\r\n\r\n          // Send partial result\r\n          await sendEvent({\r\n            type: 'partial-result',\r\n            stage: 'analyzing-prompts',\r\n            data: {\r\n              provider: provider.name,\r\n              prompt: prompt.prompt,\r\n              response: {\r\n                provider: response.provider,\r\n                brandMentioned: response.brandMentioned,\r\n                brandPosition: response.brandPosition,\r\n                sentiment: response.sentiment\r\n              }\r\n            } as PartialResultData,\r\n            timestamp: new Date()\r\n          });\r\n\r\n          // Send analysis complete event\r\n          await sendEvent({\r\n            type: 'analysis-complete',\r\n            stage: 'analyzing-prompts',\r\n            data: {\r\n              provider: provider.name,\r\n              prompt: prompt.prompt,\r\n              promptIndex: promptIndex + 1,\r\n              totalPrompts: analysisPrompts.length,\r\n              providerIndex: 0,\r\n              totalProviders: workingProviders.length,\r\n              status: 'completed'\r\n            } as AnalysisProgressData,\r\n            timestamp: new Date()\r\n          });\r\n\r\n        } catch (error) {\r\n          logger.error(`Error with ${provider.name} for prompt \"${prompt.prompt}\":`, error);\r\n          \r\n          // Check if it's an authentication error\r\n          const isAuthError = error instanceof Error && (\r\n            error.message.includes('401') || \r\n            error.message.includes('invalid') || \r\n            error.message.includes('Authorization Required') ||\r\n            error.message.includes('authentication_error')\r\n          );\r\n          \r\n          if (isAuthError) {\r\n            logger.warn(`Skipping ${provider.name} - authentication error (API key issue)`);\r\n            errors.push(`${provider.name}: API key not configured or invalid`);\r\n          } else {\r\n            errors.push(`${provider.name}: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n          }\r\n          \r\n          // Send analysis failed event\r\n          await sendEvent({\r\n            type: 'analysis-complete',\r\n            stage: 'analyzing-prompts',\r\n            data: {\r\n              provider: provider.name,\r\n              prompt: prompt.prompt,\r\n              promptIndex: promptIndex + 1,\r\n              totalPrompts: analysisPrompts.length,\r\n              providerIndex: 0,\r\n              totalProviders: workingProviders.length,\r\n              status: 'failed'\r\n            } as AnalysisProgressData,\r\n            timestamp: new Date()\r\n          });\r\n        }\r\n\r\n        completedAnalyses++;\r\n        const progress = Math.round((completedAnalyses / totalAnalyses) * 100);\r\n        \r\n        await sendEvent({\r\n          type: 'progress',\r\n          stage: 'analyzing-prompts',\r\n          data: {\r\n            stage: 'analyzing-prompts',\r\n            progress,\r\n            message: `Completed ${completedAnalyses} of ${totalAnalyses} analyses`\r\n          } as ProgressData,\r\n          timestamp: new Date()\r\n        });\r\n      })\r\n    );\r\n    \r\n    // Wait for all promises in this batch to complete\r\n    await Promise.all(batchPromises);\r\n  }\r\n\r\n  // Stage 4: Extract brands from responses (70-90% of total progress)\r\n  await sendEvent({\r\n    type: 'stage',\r\n    stage: 'extracting-brands',\r\n    data: {\r\n      stage: 'extracting-brands',\r\n      progress: 70,\r\n      message: 'Extracting brand mentions from AI responses...'\r\n    } as ProgressData,\r\n    timestamp: new Date()\r\n  });\r\n\r\n  // Analyze competitors by provider with progress tracking\r\n  const { providerRankings, providerComparison } = await analyzeCompetitorsByProvider(\r\n    company, \r\n    responses, \r\n    competitors,\r\n    sendEvent\r\n  );\r\n\r\n  await sendEvent({\r\n    type: 'progress',\r\n    stage: 'extracting-brands',\r\n    data: {\r\n      stage: 'extracting-brands',\r\n      progress: 90,\r\n      message: 'Brand extraction complete'\r\n    } as ProgressData,\r\n    timestamp: new Date()\r\n  });\r\n\r\n  // Stage 5: Calculate scores (90-100% of total progress)\r\n  await sendEvent({\r\n    type: 'stage',\r\n    stage: 'calculating-scores',\r\n    data: {\r\n      stage: 'calculating-scores',\r\n      progress: 90,\r\n      message: 'Calculating brand visibility scores...'\r\n    } as ProgressData,\r\n    timestamp: new Date()\r\n  });\r\n\r\n  // Analyze competitors from all responses\r\n  let competitorRankings = await analyzeCompetitors(company, responses, competitors);\r\n\r\n  // Harmonize with provider-level detections: if a brand has 0 mentions across all providers,\r\n  // force its visibility score to 0% to avoid discrepancies (e.g., 0 mentions showing ~6%).\r\n  try {\r\n    const zeroMentionBrands = new Set<string>();\r\n    providerComparison.forEach((row: any) => {\r\n      const providersData = row?.providers || {};\r\n      const totalMentions = Object.values(providersData).reduce((sum: number, p: any) => sum + (p?.mentions || 0), 0);\r\n      if (totalMentions === 0) {\r\n        zeroMentionBrands.add(row.competitor);\r\n      }\r\n    });\r\n\r\n    if (zeroMentionBrands.size > 0) {\r\n      competitorRankings = competitorRankings.map(r =>\r\n        zeroMentionBrands.has(r.name)\r\n          ? { ...r, mentions: 0, visibilityScore: 0 }\r\n          : r\r\n      );\r\n    }\r\n  } catch (e) {\r\n    logger.warn('[AnalyzeCommon] Failed to harmonize zero-mention brands:', (e as Error)?.message);\r\n  }\r\n\r\n  // Recompute global visibility as average of provider scores for consistency\r\n  try {\r\n    competitorRankings = competitorRankings.map(r => {\r\n      // Find this brand in providerComparison\r\n      const providerRow = providerComparison.find(row => row.competitor === r.name);\r\n      if (!providerRow || !providerRow.providers) return r;\r\n\r\n      // Calculate average visibility score across all providers\r\n      const providerScores = Object.values(providerRow.providers)\r\n        .map((p: any) => p?.visibilityScore || 0)\r\n        .filter(score => typeof score === 'number' && !isNaN(score));\r\n      \r\n      if (providerScores.length === 0) return r;\r\n\r\n      const averageVisibility = providerScores.reduce((sum, score) => sum + score, 0) / providerScores.length;\r\n      \r\n      // Calculate total mentions across all providers for share of voice\r\n      const totalMentions = Object.values(providerRow.providers)\r\n        .reduce((sum: number, p: any) => sum + (p?.mentions || 0), 0);\r\n\r\n      return {\r\n        ...r,\r\n        mentions: totalMentions,\r\n        visibilityScore: Math.round(averageVisibility * 10) / 10,\r\n      };\r\n    });\r\n\r\n    // Recompute share of voice with the adjusted mentions\r\n    const totalMentionsAdjusted = competitorRankings.reduce((sum, c) => sum + c.mentions, 0);\r\n    competitorRankings = competitorRankings.map(c => ({\r\n      ...c,\r\n      shareOfVoice: totalMentionsAdjusted > 0 ? Math.round((c.mentions / totalMentionsAdjusted) * 1000) / 10 : 0,\r\n    }));\r\n\r\n    // Sort after adjustments\r\n    competitorRankings.sort((a, b) => b.visibilityScore - a.visibilityScore);\r\n  } catch (e) {\r\n    logger.warn('[AnalyzeCommon] Failed to recompute global visibility from providerComparison:', (e as Error)?.message);\r\n  }\r\n\r\n  // Send scoring progress for each competitor\r\n  for (let i = 0; i < competitorRankings.length; i++) {\r\n    await sendEvent({\r\n      type: 'scoring-start',\r\n      stage: 'calculating-scores',\r\n      data: {\r\n        competitor: competitorRankings[i].name,\r\n        score: competitorRankings[i].visibilityScore,\r\n        index: i + 1,\r\n        total: competitorRankings.length\r\n      } as ScoringProgressData,\r\n      timestamp: new Date()\r\n    });\r\n  }\r\n\r\n  // Calculate final scores\r\n  const scores = calculateBrandScores(responses, company.name, competitorRankings);\r\n\r\n  await sendEvent({\r\n    type: 'progress',\r\n    stage: 'calculating-scores',\r\n    data: {\r\n      stage: 'calculating-scores',\r\n      progress: 100,\r\n      message: 'Scoring complete'\r\n    } as ProgressData,\r\n    timestamp: new Date()\r\n  });\r\n\r\n  // Stage 6: Finalize\r\n  await sendEvent({\r\n    type: 'stage',\r\n    stage: 'finalizing',\r\n    data: {\r\n      stage: 'finalizing',\r\n      progress: 100,\r\n      message: 'Analysis complete!'\r\n    } as ProgressData,\r\n    timestamp: new Date()\r\n  });\r\n\r\n  logger.info(`[AnalyzeCommon] 🎯 Final analysis result:`, {\r\n    totalResponses: responses.length,\r\n    totalPrompts: analysisPrompts.length,\r\n    responsesPerPrompt: responses.length / Math.max(analysisPrompts.length, 1),\r\n    webSearchUsed: useWebSearch,\r\n    errors: errors.length\r\n  });\r\n  \r\n  if (responses.length > 0) {\r\n    logger.debug(`[AnalyzeCommon] ✅ Responses summary:`, \r\n      responses.map(r => ({\r\n        provider: r.provider,\r\n        promptPreview: r.prompt.substring(0, 30) + '...',\r\n        brandMentioned: r.brandMentioned\r\n      }))\r\n    );\r\n  } else {\r\n    logger.error(`[AnalyzeCommon] ❌ No responses collected!`);\r\n  }\r\n\r\n  const analysisResult: AnalysisResult = {\r\n    company,\r\n    knownCompetitors: competitors,\r\n    prompts: analysisPrompts,\r\n    responses,\r\n    scores,\r\n    competitors: competitorRankings,\r\n    providerRankings,\r\n    providerComparison,\r\n    sources: [],\r\n    errors: errors.length > 0 ? errors : undefined,\r\n    webSearchUsed: useWebSearch,\r\n    apiUsageSummary: apiUsageTracker.getSummary(),\r\n  };\r\n\r\n  analysisResult.sources = extractAnalysisSources(analysisResult);\r\n\r\n  return analysisResult;\r\n}\r\n\r\n/**\r\n * Get available providers based on configured API keys\r\n */\r\nexport function getAvailableProviders() {\r\n  const configuredProviders = getConfiguredProviders();\r\n  // Map to the format expected by the rest of the code\r\n  return configuredProviders.map(provider => ({\r\n    name: provider.name,\r\n    model: provider.defaultModel,\r\n    icon: provider.icon,\r\n  }));\r\n}\r\n\r\n/**\r\n * Create SSE message with proper format\r\n */\r\nexport function createSSEMessage(event: SSEEvent): string {\r\n  // Ensure proper SSE format with event type\r\n  const lines: string[] = [];\r\n  if (event.type) {\r\n    lines.push(`event: ${event.type}`);\r\n  }\r\n  lines.push(`data: ${JSON.stringify(event)}`);\r\n  lines.push(''); // Empty line to signal end of event\r\n  lines.push(''); // Extra newline for proper SSE format\r\n  return lines.join('\\n');\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\lib\\anthropic-web-search.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'extractTokensFromUsage' is defined but never used.","line":3,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AnalysisResult' is defined but never used.","line":11,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":25}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import Anthropic from '@anthropic-ai/sdk';\r\nimport { AIResponse } from './types';\r\nimport { apiUsageTracker, extractTokensFromUsage, estimateCost } from './api-usage-tracker';\r\n\r\ninterface WebSearchResult {\r\n  url: string;\r\n  title: string;\r\n  cited_text?: string;\r\n}\r\n\r\ninterface AnalysisResult {\r\n  response: string;\r\n  brandMentioned: boolean;\r\n  brandPosition?: number;\r\n  sentiment: 'positive' | 'neutral' | 'negative';\r\n  confidence: number;\r\n  webSearchResults?: WebSearchResult[];\r\n}\r\n\r\n/**\r\n * Analyze brand visibility using Anthropic's native web search capability\r\n */\r\nexport async function analyzeWithAnthropicWebSearch(\r\n  prompt: string,\r\n  brandName: string,\r\n  competitors: string[],\r\n  anthropicApiKey: string\r\n): Promise<AIResponse | null> {\r\n  if (!anthropicApiKey) {\r\n    console.warn('Anthropic API key not configured');\r\n    return null;\r\n  }\r\n\r\n  const client = new Anthropic({\r\n    apiKey: anthropicApiKey,\r\n  });\r\n\r\n  try {\r\n    // Create the analysis prompt\r\n    const fullPrompt = `${prompt}\r\n\r\nPlease search for current, factual information to answer this question. Focus on recent data and real user opinions about ${brandName} and its competitors: ${competitors.join(', ')}.\r\n\r\nAfter searching, analyze your response and determine:\r\n1. Is ${brandName} mentioned? (even if not ranked)\r\n2. What position/rank does ${brandName} have (if any)?\r\n3. What is the sentiment towards ${brandName}?\r\n4. Which competitors are mentioned and their positions?`;\r\n\r\n    // Track API call for web search analysis\r\n    const callId = apiUsageTracker.trackCall({\r\n      provider: 'anthropic',\r\n      model: 'claude-3-5-sonnet-latest',\r\n      operation: 'analysis',\r\n      success: true,\r\n      metadata: { \r\n        type: 'web_search',\r\n        brandName,\r\n        competitorsCount: competitors.length\r\n      }\r\n    });\r\n\r\n    const startTime = Date.now();\r\n    // Call Anthropic with web search tool\r\n    const message = await client.messages.create({\r\n      model: 'claude-3-5-sonnet-latest', // This model supports web search\r\n      max_tokens: 1024,\r\n      messages: [\r\n        {\r\n          role: 'user',\r\n          content: fullPrompt,\r\n        }\r\n      ],\r\n      tools: [{\r\n        type: 'web_search_20250305',\r\n        name: 'web_search',\r\n        max_uses: 3, // Limit searches to control costs\r\n      }],\r\n    });\r\n    const duration = Date.now() - startTime;\r\n\r\n    // Update API call with duration and estimated tokens\r\n    apiUsageTracker.updateCall(callId, {\r\n      duration,\r\n      inputTokens: Math.ceil(fullPrompt.length / 4), // Rough estimation\r\n      outputTokens: Math.ceil((message.content[0]?.text?.length || 0) / 4),\r\n      cost: estimateCost('anthropic', 'claude-3-5-sonnet-latest', Math.ceil(fullPrompt.length / 4), Math.ceil((message.content[0]?.text?.length || 0) / 4))\r\n    });\r\n\r\n    // Extract the response text and citations\r\n    let responseText = '';\r\n    const webSearchResults: WebSearchResult[] = [];\r\n\r\n    for (const content of message.content) {\r\n      if (content.type === 'text') {\r\n        responseText += content.text;\r\n        \r\n        // Extract citations if available\r\n        if ('citations' in content && content.citations) {\r\n          for (const citation of content.citations) {\r\n            if (citation.type === 'web_search_result_location') {\r\n              webSearchResults.push({\r\n                url: citation.url,\r\n                title: citation.title || '',\r\n                cited_text: citation.cited_text,\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Analyze the response to extract structured data\r\n    const analysis = await analyzeResponseContent(\r\n      responseText,\r\n      brandName,\r\n      competitors,\r\n      client\r\n    );\r\n\r\n    return {\r\n      provider: 'Anthropic',\r\n      prompt,\r\n      response: responseText,\r\n      brandMentioned: analysis.brandMentioned,\r\n      brandPosition: analysis.brandPosition,\r\n      competitors: analysis.competitorsMentioned,\r\n      sentiment: analysis.sentiment,\r\n      confidence: analysis.confidence,\r\n      timestamp: new Date()\r\n    };\r\n\r\n  } catch (error) {\r\n    console.error('Error with Anthropic web search:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Analyze the response content to extract structured information\r\n */\r\nasync function analyzeResponseContent(\r\n  responseText: string,\r\n  brandName: string,\r\n  competitors: string[],\r\n  client: Anthropic\r\n): Promise<{\r\n  brandMentioned: boolean;\r\n  brandPosition?: number;\r\n  competitorsMentioned: string[];\r\n  sentiment: 'positive' | 'neutral' | 'negative';\r\n  confidence: number;\r\n}> {\r\n  try {\r\n    // Use Claude to analyze its own response\r\n    const analysisResponse = await client.messages.create({\r\n      model: 'claude-3-5-haiku-latest', // Use a faster model for analysis\r\n      max_tokens: 500,\r\n      messages: [\r\n        {\r\n          role: 'user',\r\n          content: `Analyze this AI response about ${brandName}:\r\n\r\n\"${responseText}\"\r\n\r\nExtract the following information in JSON format:\r\n{\r\n  \"brandMentioned\": boolean (is ${brandName} mentioned anywhere?),\r\n  \"brandPosition\": number or null (what rank/position if mentioned),\r\n  \"competitorsMentioned\": array of competitor names mentioned from: ${competitors.join(', ')},\r\n  \"sentiment\": \"positive\" | \"neutral\" | \"negative\" (sentiment towards ${brandName}),\r\n  \"confidence\": number between 0 and 1\r\n}\r\n\r\nOnly respond with valid JSON, no other text.`,\r\n        }\r\n      ],\r\n    });\r\n\r\n    const analysisText = analysisResponse.content[0].type === 'text' ? analysisResponse.content[0].text : '{}';\r\n    const analysis = JSON.parse(analysisText);\r\n\r\n    return {\r\n      brandMentioned: analysis.brandMentioned || false,\r\n      brandPosition: analysis.brandPosition || undefined,\r\n      competitorsMentioned: analysis.competitorsMentioned || [],\r\n      sentiment: analysis.sentiment || 'neutral',\r\n      confidence: analysis.confidence || 0.5,\r\n    };\r\n\r\n  } catch (error) {\r\n    console.error('Error analyzing response:', error);\r\n    \r\n    // Fallback to basic text analysis\r\n    const textLower = responseText.toLowerCase();\r\n    const brandLower = brandName.toLowerCase();\r\n    \r\n    return {\r\n      brandMentioned: textLower.includes(brandLower),\r\n      brandPosition: undefined,\r\n      competitorsMentioned: competitors.filter(c => \r\n        textLower.includes(c.toLowerCase())\r\n      ),\r\n      sentiment: 'neutral',\r\n      confidence: 0.3,\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Check if Anthropic web search is available\r\n */\r\nexport function isAnthropicWebSearchAvailable(): boolean {\r\n  return !!process.env.ANTHROPIC_API_KEY;\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\lib\\api-errors.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":147,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3845,3848],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3845,3848],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":198,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":198,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5340,5343],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5340,5343],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":242,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":242,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6894,6897],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6894,6897],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\r\n\r\n// Error codes for different error types\r\nexport enum ErrorCode {\r\n  // Authentication errors\r\n  UNAUTHORIZED = 'UNAUTHORIZED',\r\n  FORBIDDEN = 'FORBIDDEN',\r\n  INVALID_TOKEN = 'INVALID_TOKEN',\r\n  SESSION_EXPIRED = 'SESSION_EXPIRED',\r\n  \r\n  // Validation errors\r\n  VALIDATION_ERROR = 'VALIDATION_ERROR',\r\n  INVALID_INPUT = 'INVALID_INPUT',\r\n  MISSING_REQUIRED_FIELD = 'MISSING_REQUIRED_FIELD',\r\n  \r\n  // Resource errors\r\n  NOT_FOUND = 'NOT_FOUND',\r\n  ALREADY_EXISTS = 'ALREADY_EXISTS',\r\n  \r\n  // Rate limiting\r\n  RATE_LIMIT_EXCEEDED = 'RATE_LIMIT_EXCEEDED',\r\n  INSUFFICIENT_CREDITS = 'INSUFFICIENT_CREDITS',\r\n  \r\n  // External service errors\r\n  EXTERNAL_SERVICE_ERROR = 'EXTERNAL_SERVICE_ERROR',\r\n  AI_SERVICE_ERROR = 'AI_SERVICE_ERROR',\r\n  PAYMENT_SERVICE_ERROR = 'PAYMENT_SERVICE_ERROR',\r\n  \r\n  // Database errors\r\n  DATABASE_ERROR = 'DATABASE_ERROR',\r\n  CONNECTION_ERROR = 'CONNECTION_ERROR',\r\n  \r\n  // Generic errors\r\n  INTERNAL_ERROR = 'INTERNAL_ERROR',\r\n  BAD_REQUEST = 'BAD_REQUEST',\r\n  METHOD_NOT_ALLOWED = 'METHOD_NOT_ALLOWED',\r\n}\r\n\r\n// Base error class\r\nexport class ApiError extends Error {\r\n  public readonly statusCode: number;\r\n  public readonly code: ErrorCode;\r\n  public readonly isOperational: boolean;\r\n\r\n  constructor(\r\n    message: string,\r\n    statusCode: number,\r\n    code: ErrorCode,\r\n    isOperational = true\r\n  ) {\r\n    super(message);\r\n    this.statusCode = statusCode;\r\n    this.code = code;\r\n    this.isOperational = isOperational;\r\n\r\n    Object.setPrototypeOf(this, ApiError.prototype);\r\n  }\r\n}\r\n\r\n// Specific error classes\r\nexport class AuthenticationError extends ApiError {\r\n  constructor(message = 'Authentication required', code = ErrorCode.UNAUTHORIZED) {\r\n    super(message, 401, code);\r\n  }\r\n}\r\n\r\nexport class AuthorizationError extends ApiError {\r\n  constructor(message = 'Access denied', code = ErrorCode.FORBIDDEN) {\r\n    super(message, 403, code);\r\n  }\r\n}\r\n\r\nexport class ValidationError extends ApiError {\r\n  public readonly fields?: Record<string, string>;\r\n\r\n  constructor(\r\n    message = 'Validation failed',\r\n    fields?: Record<string, string>,\r\n    code = ErrorCode.VALIDATION_ERROR\r\n  ) {\r\n    super(message, 400, code);\r\n    this.fields = fields;\r\n  }\r\n}\r\n\r\nexport class NotFoundError extends ApiError {\r\n  constructor(resource = 'Resource', code = ErrorCode.NOT_FOUND) {\r\n    super(`${resource} not found`, 404, code);\r\n  }\r\n}\r\n\r\nexport class RateLimitError extends ApiError {\r\n  public readonly retryAfter?: number;\r\n\r\n  constructor(\r\n    message = 'Rate limit exceeded',\r\n    retryAfter?: number,\r\n    code = ErrorCode.RATE_LIMIT_EXCEEDED\r\n  ) {\r\n    super(message, 429, code);\r\n    this.retryAfter = retryAfter;\r\n  }\r\n}\r\n\r\nexport class InsufficientCreditsError extends ApiError {\r\n  public readonly creditsRequired?: number;\r\n  public readonly creditsAvailable?: number;\r\n\r\n  constructor(\r\n    message = 'Insufficient credits',\r\n    creditsRequired?: number,\r\n    creditsAvailable?: number\r\n  ) {\r\n    super(message, 403, ErrorCode.INSUFFICIENT_CREDITS);\r\n    this.creditsRequired = creditsRequired;\r\n    this.creditsAvailable = creditsAvailable;\r\n  }\r\n}\r\n\r\nexport class ExternalServiceError extends ApiError {\r\n  public readonly service?: string;\r\n\r\n  constructor(\r\n    message: string,\r\n    service?: string,\r\n    code = ErrorCode.EXTERNAL_SERVICE_ERROR\r\n  ) {\r\n    super(message, 503, code);\r\n    this.service = service;\r\n  }\r\n}\r\n\r\nexport class DatabaseError extends ApiError {\r\n  constructor(message = 'Database operation failed', code = ErrorCode.DATABASE_ERROR) {\r\n    super(message, 500, code, false);\r\n  }\r\n}\r\n\r\n// Error response interface\r\ninterface ErrorResponse {\r\n  error: {\r\n    message: string;\r\n    code: string;\r\n    statusCode: number;\r\n    timestamp: string;\r\n    fields?: Record<string, string>;\r\n    metadata?: Record<string, any>;\r\n  };\r\n}\r\n\r\n// Helper function to create error response\r\nexport function createErrorResponse(error: ApiError): ErrorResponse {\r\n  const response: ErrorResponse = {\r\n    error: {\r\n      message: error.message,\r\n      code: error.code,\r\n      statusCode: error.statusCode,\r\n      timestamp: new Date().toISOString(),\r\n    },\r\n  };\r\n\r\n  // Add additional fields for specific error types\r\n  if (error instanceof ValidationError && error.fields) {\r\n    response.error.fields = error.fields;\r\n  }\r\n\r\n  if (error instanceof RateLimitError && error.retryAfter) {\r\n    response.error.metadata = { retryAfter: error.retryAfter };\r\n  }\r\n\r\n  if (error instanceof InsufficientCreditsError) {\r\n    response.error.metadata = {\r\n      creditsRequired: error.creditsRequired,\r\n      creditsAvailable: error.creditsAvailable,\r\n    };\r\n  }\r\n\r\n  if (error instanceof ExternalServiceError && error.service) {\r\n    response.error.metadata = { service: error.service };\r\n  }\r\n\r\n  return response;\r\n}\r\n\r\n// Main error handler function\r\nexport function handleApiError(error: unknown): NextResponse {\r\n  // Log error for debugging\r\n  console.error('[API Error]', error);\r\n\r\n  // Handle known API errors\r\n  if (error instanceof ApiError) {\r\n    const errorResponse = createErrorResponse(error);\r\n    return NextResponse.json(errorResponse, { status: error.statusCode });\r\n  }\r\n\r\n  // Handle Autumn/Stripe errors\r\n  if (error && typeof error === 'object' && 'response' in error) {\r\n    const responseError = error as any;\r\n    if (responseError.response?.data?.error) {\r\n      const message = responseError.response.data.error.message || 'External service error';\r\n      const externalError = new ExternalServiceError(message, 'payment');\r\n      return NextResponse.json(createErrorResponse(externalError), { status: 503 });\r\n    }\r\n  }\r\n\r\n  // Handle generic errors\r\n  if (error instanceof Error) {\r\n    // Check for specific error messages\r\n    if (error.message.includes('Unauthorized') || error.message.includes('unauthorized')) {\r\n      const authError = new AuthenticationError();\r\n      return NextResponse.json(createErrorResponse(authError), { status: 401 });\r\n    }\r\n\r\n    if (error.message.includes('Database') || error.message.includes('ECONNREFUSED')) {\r\n      const dbError = new DatabaseError();\r\n      return NextResponse.json(createErrorResponse(dbError), { status: 500 });\r\n    }\r\n\r\n    // Generic error\r\n    const genericError = new ApiError(\r\n      process.env.NODE_ENV === 'production' \r\n        ? 'An unexpected error occurred' \r\n        : error.message,\r\n      500,\r\n      ErrorCode.INTERNAL_ERROR,\r\n      false\r\n    );\r\n    return NextResponse.json(createErrorResponse(genericError), { status: 500 });\r\n  }\r\n\r\n  // Unknown error type\r\n  const unknownError = new ApiError(\r\n    'An unexpected error occurred',\r\n    500,\r\n    ErrorCode.INTERNAL_ERROR,\r\n    false\r\n  );\r\n  return NextResponse.json(createErrorResponse(unknownError), { status: 500 });\r\n}\r\n\r\n// Utility function to wrap async route handlers\r\nexport function withErrorHandler<T extends any[], R>(\r\n  handler: (...args: T) => Promise<R>\r\n): (...args: T) => Promise<R | NextResponse> {\r\n  return async (...args: T) => {\r\n    try {\r\n      return await handler(...args);\r\n    } catch (error) {\r\n      return handleApiError(error);\r\n    }\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\lib\\api-usage-tracker.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[723,726],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[723,726],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":384,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":384,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12661,12664],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12661,12664],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Système de tracking centralisé pour les appels API externes\r\n * Permet de calculer les coûts et d'afficher un résumé détaillé\r\n */\r\n\r\nimport { logger } from './logger';\r\n\r\nexport interface ApiCall {\r\n  id: string;\r\n  provider: string;\r\n  model: string;\r\n  operation: 'scrape' | 'competitor_search' | 'prompt_generation' | 'analysis' | 'brand_canonicalization' | 'brand_cleaning' | 'brand_extraction' | 'structured_analysis';\r\n  phase: 'url_analysis' | 'competitor_search' | 'prompt_generation' | 'prompt_analysis' | 'result_analysis';\r\n  timestamp: Date;\r\n  inputTokens?: number;\r\n  outputTokens?: number;\r\n  cost?: number;\r\n  duration?: number;\r\n  success: boolean;\r\n  error?: string;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\nexport interface ApiUsageSummary {\r\n  totalCalls: number;\r\n  totalCost: number;\r\n  totalDuration: number;\r\n  byProvider: Record<string, {\r\n    calls: number;\r\n    cost: number;\r\n    tokens: { input: number; output: number };\r\n  }>;\r\n  byOperation: Record<string, {\r\n    calls: number;\r\n    cost: number;\r\n    providers: string[];\r\n  }>;\r\n  byPhase: Record<string, {\r\n    calls: number;\r\n    cost: number;\r\n    duration: number;\r\n    providers: string[];\r\n    averageCostPerCall?: number;\r\n    promptAnalysis?: {\r\n      totalPrompts: number;\r\n      averageCostPerPrompt: number;\r\n    };\r\n  }>;\r\n  errors: number;\r\n}\r\n\r\nclass ApiUsageTracker {\r\n  private calls: ApiCall[] = [];\r\n  private currentAnalysisId: string | null = null;\r\n\r\n  /**\r\n   * Détermine la phase d'un appel basé sur l'opération et les métadonnées\r\n   */\r\n  private getPhaseFromCall(call: ApiCall): string {\r\n    // Phase basée sur l'opération\r\n    switch (call.operation) {\r\n      case 'scrape':\r\n        return 'url_analysis';\r\n      case 'competitor_search':\r\n        return 'competitor_search';\r\n      case 'prompt_generation':\r\n        return 'prompt_generation';\r\n      case 'analysis':\r\n        return 'prompt_analysis';\r\n      case 'brand_canonicalization':\r\n      case 'brand_cleaning':\r\n      case 'brand_extraction':\r\n      case 'structured_analysis':\r\n        return 'result_analysis';\r\n      default:\r\n        return 'result_analysis';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Démarre un nouveau tracking d'analyse\r\n   */\r\n  startAnalysis(analysisId: string) {\r\n    this.currentAnalysisId = analysisId;\r\n    logger.info(`[ApiUsageTracker] Début du tracking pour l'analyse: ${analysisId}`);\r\n  }\r\n\r\n  /**\r\n   * Enregistre un appel API\r\n   */\r\n  trackCall(call: Omit<ApiCall, 'id' | 'timestamp' | 'phase'>): string {\r\n    const id = `${call.provider}-${call.operation}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n    const apiCall: ApiCall = {\r\n      ...call,\r\n      id,\r\n      timestamp: new Date(),\r\n      phase: this.getPhaseFromCall(call as ApiCall)\r\n    };\r\n    \r\n    this.calls.push(apiCall);\r\n    \r\n    logger.debug(`[ApiUsageTracker] Appel enregistré:`, {\r\n      id,\r\n      provider: call.provider,\r\n      model: call.model,\r\n      operation: call.operation,\r\n      tokens: { input: call.inputTokens, output: call.outputTokens },\r\n      success: call.success\r\n    });\r\n    \r\n    return id;\r\n  }\r\n\r\n  /**\r\n   * Met à jour un appel existant\r\n   */\r\n  updateCall(id: string, updates: Partial<ApiCall>) {\r\n    const callIndex = this.calls.findIndex(call => call.id === id);\r\n    if (callIndex !== -1) {\r\n      this.calls[callIndex] = { ...this.calls[callIndex], ...updates };\r\n      logger.debug(`[ApiUsageTracker] Appel mis à jour: ${id}`, updates);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calcule le résumé des coûts\r\n   */\r\n  getSummary(): ApiUsageSummary {\r\n    const summary: ApiUsageSummary = {\r\n      totalCalls: this.calls.length,\r\n      totalCost: 0,\r\n      totalDuration: 0,\r\n      byProvider: {},\r\n      byOperation: {},\r\n      byPhase: {},\r\n      errors: 0\r\n    };\r\n\r\n    this.calls.forEach(call => {\r\n      // Coût total\r\n      if (call.cost) {\r\n        summary.totalCost += call.cost;\r\n      }\r\n\r\n      // Durée totale\r\n      if (call.duration) {\r\n        summary.totalDuration += call.duration;\r\n      }\r\n\r\n      // Erreurs\r\n      if (!call.success) {\r\n        summary.errors++;\r\n      }\r\n\r\n      // Par provider\r\n      if (!summary.byProvider[call.provider]) {\r\n        summary.byProvider[call.provider] = {\r\n          calls: 0,\r\n          cost: 0,\r\n          tokens: { input: 0, output: 0 }\r\n        };\r\n      }\r\n      summary.byProvider[call.provider].calls++;\r\n      if (call.cost) summary.byProvider[call.provider].cost += call.cost;\r\n      if (call.inputTokens) summary.byProvider[call.provider].tokens.input += call.inputTokens;\r\n      if (call.outputTokens) summary.byProvider[call.provider].tokens.output += call.outputTokens;\r\n\r\n      // Par opération\r\n      if (!summary.byOperation[call.operation]) {\r\n        summary.byOperation[call.operation] = {\r\n          calls: 0,\r\n          cost: 0,\r\n          providers: []\r\n        };\r\n      }\r\n      summary.byOperation[call.operation].calls++;\r\n      if (call.cost) summary.byOperation[call.operation].cost += call.cost;\r\n      if (!summary.byOperation[call.operation].providers.includes(call.provider)) {\r\n        summary.byOperation[call.operation].providers.push(call.provider);\r\n      }\r\n\r\n      // Par phase\r\n      const phase = this.getPhaseFromCall(call);\r\n      if (!summary.byPhase[phase]) {\r\n        summary.byPhase[phase] = {\r\n          calls: 0,\r\n          cost: 0,\r\n          duration: 0,\r\n          providers: []\r\n        };\r\n      }\r\n      summary.byPhase[phase].calls++;\r\n      if (call.cost) summary.byPhase[phase].cost += call.cost;\r\n      if (call.duration) summary.byPhase[phase].duration += call.duration;\r\n      if (!summary.byPhase[phase].providers.includes(call.provider)) {\r\n        summary.byPhase[phase].providers.push(call.provider);\r\n      }\r\n    });\r\n\r\n    // Calculer les moyennes et métriques spéciales\r\n    Object.keys(summary.byPhase).forEach(phase => {\r\n      const phaseData = summary.byPhase[phase];\r\n      phaseData.averageCostPerCall = phaseData.calls > 0 ? phaseData.cost / phaseData.calls : 0;\r\n\r\n      // Métriques spéciales pour l'analyse des prompts\r\n      if (phase === 'prompt_analysis') {\r\n        // Compter le nombre de prompts uniques analysés\r\n        const uniquePrompts = new Set();\r\n        this.calls\r\n          .filter(call => this.getPhaseFromCall(call) === 'prompt_analysis')\r\n          .forEach(call => {\r\n            // Essayer différentes clés pour trouver le prompt\r\n            const prompt = call.metadata?.prompt || \r\n                          call.metadata?.promptText || \r\n                          call.metadata?.promptText?.substring(0, 100) + '...';\r\n            if (prompt) {\r\n              uniquePrompts.add(prompt);\r\n            }\r\n          });\r\n        \r\n        // Si on n'a pas trouvé de prompts uniques, estimer basé sur le nombre d'appels et providers\r\n        let totalPrompts = uniquePrompts.size;\r\n        if (totalPrompts === 0) {\r\n          // Estimation: nombre d'appels divisé par le nombre de providers (car chaque prompt est analysé par chaque provider)\r\n          const providers = new Set();\r\n          this.calls\r\n            .filter(call => this.getPhaseFromCall(call) === 'prompt_analysis')\r\n            .forEach(call => providers.add(call.provider));\r\n          \r\n          totalPrompts = Math.max(1, Math.floor(phaseData.calls / Math.max(1, providers.size)));\r\n        }\r\n        \r\n        phaseData.promptAnalysis = {\r\n          totalPrompts,\r\n          averageCostPerPrompt: phaseData.cost / totalPrompts\r\n        };\r\n      }\r\n    });\r\n\r\n    // Initialiser les phases manquantes pour un affichage cohérent\r\n    const phaseKeys = ['url_analysis','competitor_search','prompt_generation','prompt_analysis','result_analysis'] as const;\r\n    phaseKeys.forEach((key) => {\r\n      if (!summary.byPhase[key]) {\r\n        summary.byPhase[key] = {\r\n          calls: 0,\r\n          cost: 0,\r\n          duration: 0,\r\n          providers: [],\r\n          averageCostPerCall: 0\r\n        };\r\n      }\r\n    });\r\n\r\n    return summary;\r\n  }\r\n\r\n  /**\r\n   * Affiche le résumé détaillé dans les logs\r\n   */\r\n  logSummary() {\r\n    const summary = this.getSummary();\r\n    \r\n    logger.info('\\n' + '='.repeat(80));\r\n    logger.info('📊 RÉSUMÉ DES COÛTS API - ANALYSE TERMINÉE');\r\n    logger.info('='.repeat(80));\r\n    \r\n    logger.info(`\\n🔢 STATISTIQUES GÉNÉRALES:`);\r\n    logger.info(`   • Total d'appels: ${summary.totalCalls}`);\r\n    logger.info(`   • Coût total: $${summary.totalCost.toFixed(4)}`);\r\n    logger.info(`   • Durée totale: ${(summary.totalDuration / 1000).toFixed(2)}s`);\r\n    logger.info(`   • Erreurs: ${summary.errors}`);\r\n    \r\n    logger.info(`\\n🏢 PAR OPÉRATION:`);\r\n    Object.entries(summary.byOperation).forEach(([operation, data]) => {\r\n      const operationName = {\r\n        'scrape': 'Scraping initial',\r\n        'competitor_search': 'Recherche de concurrents',\r\n        'prompt_generation': 'Génération de prompts',\r\n        'analysis': 'Analyse des résultats'\r\n      }[operation] || operation;\r\n      \r\n      logger.info(`   📋 ${operationName}:`);\r\n      logger.info(`      • Appels: ${data.calls}`);\r\n      logger.info(`      • Coût: $${data.cost.toFixed(4)}`);\r\n      logger.info(`      • Providers: ${data.providers.join(', ')}`);\r\n    });\r\n    \r\n    logger.info(`\\n🤖 PAR PROVIDER:`);\r\n    Object.entries(summary.byProvider).forEach(([provider, data]) => {\r\n      logger.info(`   🔧 ${provider.toUpperCase()}:`);\r\n      logger.info(`      • Appels: ${data.calls}`);\r\n      logger.info(`      • Coût: $${data.cost.toFixed(4)}`);\r\n      logger.info(`      • Tokens: ${data.tokens.input} entrée, ${data.tokens.output} sortie`);\r\n    });\r\n    \r\n    logger.debug(`\\n📋 DÉTAIL DES APPELS:`);\r\n    this.calls.forEach((call, index) => {\r\n      const status = call.success ? '✅' : '❌';\r\n      const tokens = call.inputTokens && call.outputTokens \r\n        ? ` (${call.inputTokens}→${call.outputTokens} tokens)`\r\n        : '';\r\n      const cost = call.cost ? ` - $${call.cost.toFixed(4)}` : '';\r\n      const duration = call.duration ? ` - ${(call.duration / 1000).toFixed(2)}s` : '';\r\n      \r\n      logger.debug(`   ${index + 1}. ${status} ${call.provider}/${call.model} - ${call.operation}${tokens}${cost}${duration}`);\r\n      if (call.error) {\r\n        logger.error(`      ❌ Erreur: ${call.error}`);\r\n      }\r\n    });\r\n    \r\n    logger.info('='.repeat(80) + '\\n');\r\n  }\r\n\r\n  /**\r\n   * Retourne les appels pour une opération spécifique\r\n   */\r\n  getCallsForOperation(operation: ApiCall['operation']): ApiCall[] {\r\n    return this.calls.filter(call => call.operation === operation);\r\n  }\r\n\r\n  /**\r\n   * Retourne tous les appels\r\n   */\r\n  getAllCalls(): ApiCall[] {\r\n    return [...this.calls];\r\n  }\r\n\r\n  /**\r\n   * Reset le tracker\r\n   */\r\n  reset() {\r\n    this.calls = [];\r\n    this.currentAnalysisId = null;\r\n  }\r\n}\r\n\r\n// Instance singleton\r\nexport const apiUsageTracker = new ApiUsageTracker();\r\n\r\n/**\r\n * Helper pour calculer les coûts estimés basés sur les tokens\r\n */\r\nexport function estimateCost(provider: string, model: string, inputTokens: number, outputTokens: number): number {\r\n  // Prix réels par 1M tokens (input/output) - mis à jour avec les vrais prix\r\n  const pricing: Record<string, Record<string, { input: number; output: number }>> = {\r\n    'openai': {\r\n      'gpt-4o': { input: 2.50, output: 10.0 }, // $2.50 input, $10.00 output\r\n      'gpt-4o-mini': { input: 0.15, output: 0.6 }, // $0.15 input, $0.60 output\r\n      'gpt-4-turbo': { input: 10.0, output: 30.0 }\r\n    },\r\n    'anthropic': {\r\n      'claude-3-5-sonnet-20241022': { input: 3.0, output: 15.0 }, // $3 input, $15 output\r\n      'claude-3-5-haiku-20241022': { input: 0.8, output: 4.0 },\r\n      'claude-3-5-sonnet-latest': { input: 3.0, output: 15.0 } // $3 input, $15 output\r\n    },\r\n    'perplexity': {\r\n      'sonar': { input: 1.0, output: 1.0 }, // $1 input, $1 output\r\n      'sonar-pro': { input: 3.0, output: 15.0 }, // $3 input, $15 output\r\n      'sonar-reasoning': { input: 3.0, output: 15.0 } // Même prix que Sonar Pro\r\n    },\r\n    'google': {\r\n      'gemini-1.5-flash': { input: 0.075, output: 0.3 }\r\n    }\r\n  };\r\n\r\n  const providerPricing = pricing[provider.toLowerCase()];\r\n  if (!providerPricing) return 0;\r\n\r\n  const modelPricing = providerPricing[model.toLowerCase()];\r\n  if (!modelPricing) {\r\n    console.warn(`[estimateCost] Model pricing not found for ${provider}/${model}`);\r\n    return 0;\r\n  }\r\n\r\n  const inputCost = (inputTokens / 1000000) * modelPricing.input;\r\n  const outputCost = (outputTokens / 1000000) * modelPricing.output;\r\n  \r\n  return inputCost + outputCost;\r\n}\r\n\r\n/**\r\n * Helper pour extraire les tokens des réponses AI SDK\r\n */\r\nexport function extractTokensFromUsage(usage: any): { inputTokens: number; outputTokens: number } {\r\n  if (!usage) return { inputTokens: 0, outputTokens: 0 };\r\n  \r\n  return {\r\n    inputTokens: usage.promptTokens || usage.inputTokens || 0,\r\n    outputTokens: usage.completionTokens || usage.outputTokens || 0\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\lib\\api-wrapper.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[374,377],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[374,377],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/lib/auth';\r\nimport { AuthenticationError, handleApiError } from './api-errors';\r\nimport { apiRateLimit } from './rate-limit';\r\n\r\ninterface ApiHandlerOptions {\r\n  requireAuth?: boolean;\r\n  rateLimit?: boolean;\r\n}\r\n\r\nexport function withApiHandler(\r\n  handler: (request: NextRequest, session?: any) => Promise<NextResponse>,\r\n  options: ApiHandlerOptions = { requireAuth: true, rateLimit: true }\r\n) {\r\n  return async (request: NextRequest) => {\r\n    try {\r\n      if (options.rateLimit) {\r\n        const clientIP = request.ip || request.headers.get('x-forwarded-for') || 'unknown';\r\n        await apiRateLimit(request, clientIP);\r\n      }\r\n\r\n      let session = null;\r\n      if (options.requireAuth) {\r\n        const sessionResponse = await auth.api.getSession({\r\n          headers: request.headers,\r\n        });\r\n\r\n        if (!sessionResponse?.user) {\r\n          throw new AuthenticationError('Authentication required');\r\n        }\r\n        session = sessionResponse;\r\n      }\r\n\r\n      return await handler(request, session);\r\n    } catch (error) {\r\n      return handleApiError(error);\r\n    }\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\lib\\auth.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used.","line":16,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":53},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used.","line":59,"column":50,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":57}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { betterAuth } from 'better-auth';\nimport { Pool } from 'pg';\nimport { sendEmail } from './email';\nimport { autumn } from 'autumn-js/better-auth';\nimport { localization } from 'better-auth-localization';\n\nexport const auth = betterAuth({\n  database: new Pool({\n    connectionString: process.env.DATABASE_URL!,\n  }),\n  secret: process.env.BETTER_AUTH_SECRET!,\n  baseURL: process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000',\n  emailAndPassword: {\n    enabled: true,\n    requireEmailVerification: process.env.NODE_ENV === 'production',\n    sendResetPassword: async ({ user, url }, request) => {\n      console.log('Password reset link:', url);\n      \n      await sendEmail({\n        to: user.email,\n        subject: 'Reset your password - Voxum',\n        html: `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <h2 style=\"color: #333;\">Reset Your Password</h2>\n            <p style=\"color: #666; line-height: 1.6;\">\n              You requested to reset your password. Click the button below to create a new password.\n            </p>\n            <div style=\"text-align: center; margin: 30px 0;\">\n              <a href=\"${url}\" style=\"background-color: #f97316; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; display: inline-block;\">\n                Reset Password\n              </a>\n            </div>\n            <p style=\"color: #999; font-size: 14px;\">\n              If you didn't request this, you can safely ignore this email.\n            </p>\n            <p style=\"color: #999; font-size: 14px;\">\n              This link will expire in 1 hour.\n            </p>\n          </div>\n        `\n      });\n    },\n  },\n  trustedOrigins: (process.env.TRUSTED_ORIGINS || process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000')\n    .split(',').map(origin => origin.trim()),\n  session: {\n    expiresIn: 60 * 60 * 24 * 7, // 7 days\n    updateAge: 60 * 60 * 24, // Update session if older than 1 day\n    cookieOptions: {\n      httpOnly: true,\n      sameSite: 'lax',\n      secure: process.env.NODE_ENV === 'production',\n      path: '/',\n    },\n  },\n  emailVerification: {\n    sendOnSignUp: process.env.NODE_ENV === 'production',\n    autoSignInAfterVerification: true,\n    sendVerificationEmail: async ({ user, url }, request) => {\n      console.log('Verification link:', url);\n      \n      await sendEmail({\n        to: user.email,\n        subject: 'Verify your email - Voxum',\n        html: `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <h2 style=\"color: #333;\">Verify Your Email Address</h2>\n            <p style=\"color: #666; line-height: 1.6;\">\n              Thanks for signing up! Please verify your email address by clicking the button below.\n            </p>\n            <div style=\"text-align: center; margin: 30px 0;\">\n              <a href=\"${url}\" style=\"background-color: #f97316; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; display: inline-block;\">\n                Verify Email\n              </a>\n            </div>\n            <p style=\"color: #999; font-size: 14px;\">\n              If you didn't create an account, you can safely ignore this email.\n            </p>\n          </div>\n        `\n      });\n    },\n  },\n  plugins: [\n    autumn(),\n    localization({\n      defaultLocale: 'default',\n      fallbackLocale: 'default',\n      getLocale: async (request) => {\n        try {\n          if (!request) return 'default';\n          const headerPath = request.headers.get('x-pathname') || request.headers.get('referer') || '';\n          if (/\\/(fr)(\\/|$)/i.test(headerPath)) return 'fr-FR';\n\n          const lang = request.headers.get('accept-language') || '';\n          if (/fr/i.test(lang)) return 'fr-FR';\n          return 'default';\n        } catch {\n          return 'default';\n        }\n      }\n    })\n  ],\n});","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\lib\\autumn\\pricing-table-content.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CheckProductPreview' is defined but never used.","line":1,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":3,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[105,108],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[105,108],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { type CheckProductPreview } from \"autumn-js\";\r\n\r\nexport const getPricingTableContent = (product: any) => {\r\n  const { scenario, free_trial } = product;\r\n\r\n  if (free_trial && free_trial.trial_available) {\r\n    return {\r\n      buttonText: <p>Start Free Trial</p>,\r\n    };\r\n  }\r\n\r\n  switch (scenario) {\r\n    case \"scheduled\":\r\n      return {\r\n        buttonText: <p>Plan Scheduled</p>,\r\n      };\r\n\r\n    case \"active\":\r\n      return {\r\n        buttonText: <p>Current Plan</p>,\r\n      };\r\n\r\n    case \"new\":\r\n      if (product.properties?.is_one_off) {\r\n        return {\r\n          buttonText: <p>Purchase</p>,\r\n        };\r\n      } else {\r\n        return {\r\n          buttonText: <p>Get started</p>,\r\n        };\r\n      }\r\n\r\n    case \"renew\":\r\n      return {\r\n        buttonText: <p>Renew</p>,\r\n      };\r\n\r\n    case \"upgrade\":\r\n      return {\r\n        buttonText: <p>Upgrade</p>,\r\n      };\r\n\r\n    case \"downgrade\":\r\n      return {\r\n        buttonText: <p>Downgrade</p>,\r\n      };\r\n\r\n    case \"cancel\":\r\n      return {\r\n        buttonText: <p>Cancel Plan</p>,\r\n      };\r\n\r\n    default:\r\n      return {\r\n        buttonText: <p>Get Started</p>,\r\n      };\r\n  }\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\lib\\brand-detection-service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'languageName' is assigned a value but never used.","line":64,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Centralized Brand Detection Service\n * Single source of truth for brand detection and highlighting\n * Uses AI to generate intelligent brand variations\n */\n\nimport OpenAI from 'openai';\nimport { apiUsageTracker, extractTokensFromUsage, estimateCost } from './api-usage-tracker';\n\nconst getOpenAIClient = () => {\n  if (!process.env.OPENAI_API_KEY) {\n    throw new Error('OpenAI API key not configured');\n  }\n  return new OpenAI({\n    apiKey: process.env.OPENAI_API_KEY,\n  });\n};\n\nexport interface BrandVariation {\n  original: string;\n  variations: string[];\n  confidence: number;\n}\n\nexport interface BrandDetectionMatch {\n  text: string;\n  index: number;\n  brandName: string;\n  variation: string;\n  confidence: number;\n}\n\nexport interface BrandDetectionResult {\n  mentioned: boolean;\n  matches: BrandDetectionMatch[];\n  confidence: number;\n}\n\nexport interface BrandDetectionOptions {\n  caseSensitive?: boolean;\n  excludeNegativeContext?: boolean;\n  minConfidence?: number;\n}\n\n/**\n * Generate intelligent brand variations using AI\n * This is the single source of truth for brand variations\n */\nexport async function generateIntelligentBrandVariations(\n  brandName: string,\n  locale: string = 'en'\n): Promise<BrandVariation> {\n  const coreBrand = brandName.trim();\n  \n  // For very simple single words, use basic variations\n  if (coreBrand.length <= 3 && !coreBrand.includes(' ')) {\n    return {\n      original: coreBrand,\n      variations: [coreBrand, coreBrand.toLowerCase()],\n      confidence: 1.0\n    };\n  }\n\n  const languageName = locale === 'fr' ? 'French' : 'English';\n  \n  const prompt = `You are a brand detection expert. Analyze this brand name and generate ONLY the variations that would be appropriate for brand detection in text.\n\nBrand: \"${coreBrand}\"\n\nRules:\n1. Include the full brand name and common case variations\n2. Include ONLY distinctive parts that are NOT generic words (avoid: \"cars\", \"technologies\", \"solutions\", \"systems\", \"group\", \"international\", \"global\", \"worldwide\", \"inc\", \"llc\", \"corp\", \"ltd\", \"limited\", \"company\", \"co\")\n3. Include common abbreviations/acronyms ONLY if they are distinctive to this brand\n4. Do NOT include variations that would cause false positives\n5. Be VERY conservative - fewer, more accurate variations are better than many inaccurate ones\n6. For single-word brands that are common adjectives/nouns, ONLY include the exact brand name with proper capitalization\n7. Avoid variations that could match common words in other contexts\n\nExamples:\n- \"Caterham Cars\" → [\"Caterham Cars\", \"Caterham\", \"caterham cars\", \"caterham\"]\n- \"Louis Vuitton\" → [\"Louis Vuitton\", \"louis vuitton\", \"LV\"]\n- \"Alpine\" → [\"Alpine\", \"alpine\"] (NOT \"BMW Alpine\" - that's a different brand)\n- \"Christian Dior\" → [\"Christian Dior\", \"christian dior\", \"Dior\", \"dior\"]\n- \"Nvidia Technologies\" → [\"Nvidia\", \"nvidia\"] (NOT \"technologies\" - too generic)\n- \"Apple Inc\" → [\"Apple\"] (NOT \"apple\" - too common as fruit)\n- \"Radical\" → [\"Radical\"] (NOT \"radical\" - too common as adjective)\n- \"Orange\" → [\"Orange\"] (NOT \"orange\" - too common as fruit)\n- \"Black\" → [\"Black\"] (NOT \"black\" - too common as color)\n- \"Nike\" → [\"Nike\", \"nike\"] (OK - distinctive enough, not too common)\n- \"Tesla\" → [\"Tesla\", \"tesla\"] (OK - distinctive enough, not too common)\n- \"Google\" → [\"Google\"] (NOT \"google\" - too common as verb)\n- \"Amazon\" → [\"Amazon\", \"amazon\"] (OK - distinctive enough, not too common)\n- \"Lotus\" → [\"Lotus\", \"lotus\"] (OK - distinctive enough)\n- \"BMW\" → [\"BMW\", \"bmw\"] (OK - distinctive acronym)\n- \"Mercedes\" → [\"Mercedes\", \"mercedes\"] (OK - distinctive name)\n\nCRITICAL: For brands that are VERY common words (like \"Radical\", \"Apple\", \"Orange\", \"Black\", \"Google\"...), be VERY conservative and ONLY include the exact brand name with proper capitalization. For distinctive brands (like \"Nike\", \"Tesla\", \"Amazon\", \"Mercedes\"...), include both capitalized and lowercase versions.\n\nReturn ONLY a JSON object with this exact structure:\n{\n  \"original\": \"exact brand name\",\n  \"variations\": [\"variation1\", \"variation2\", ...],\n  \"confidence\": 0.95\n}`;\n\n  let callId: string | undefined;\n  \n  try {\n    const openai = getOpenAIClient();\n    \n    // Track API call for brand variations\n    callId = apiUsageTracker.trackCall({\n      provider: 'openai',\n      model: 'gpt-4o-mini',\n      operation: 'analysis',\n      success: true,\n      metadata: { \n        step: 'brand_variations',\n        brandName: coreBrand,\n        locale\n      }\n    });\n\n    const startTime = Date.now();\n    const response = await openai.chat.completions.create({\n      model: 'gpt-4o-mini',\n      messages: [\n        {\n          role: 'system',\n          content: `You are a brand detection expert. Generate precise brand variations for text detection, avoiding false positives. Return only valid JSON.`\n        },\n        {\n          role: 'user',\n          content: prompt\n        }\n      ],\n      temperature: 0.1,\n      max_tokens: 300\n    });\n    const duration = Date.now() - startTime;\n\n    let content = response.choices[0]?.message?.content?.trim();\n    if (!content) {\n      throw new Error('No content from OpenAI');\n    }\n\n    // Clean up the response\n    if (content.startsWith('```')) {\n      content = content.replace(/^```[a-zA-Z]*\\n/, '').replace(/\\n```$/, '').trim();\n    }\n\n    const result = JSON.parse(content);\n    \n    // Validate the response\n    if (!result.original || !Array.isArray(result.variations) || typeof result.confidence !== 'number') {\n      throw new Error('Invalid response format');\n    }\n\n    // Ensure the original brand name is included\n    if (!result.variations.includes(result.original)) {\n      result.variations.unshift(result.original);\n    }\n\n    // Remove duplicates and filter out empty strings\n    result.variations = [...new Set(result.variations)].filter(v => v && typeof v === 'string' && v.trim().length > 0);\n\n    // Extract tokens from usage and update API call\n    const tokens = extractTokensFromUsage(response.usage);\n    apiUsageTracker.updateCall(callId, {\n      inputTokens: tokens.inputTokens,\n      outputTokens: tokens.outputTokens,\n      cost: estimateCost('openai', 'gpt-4o-mini', tokens.inputTokens, tokens.outputTokens),\n      duration\n    });\n\n    console.log(`🤖 [AI Brand Variations] ${coreBrand} → [${result.variations.join(', ')}]`);\n    \n    return result;\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n    const errorDetails = {\n      brandName: coreBrand,\n      locale,\n      errorType: error instanceof Error ? error.constructor.name : 'UnknownError',\n      errorMessage,\n      timestamp: new Date().toISOString()\n    };\n    \n    console.error('[Brand Detection Service] AI brand variations failed:', errorDetails);\n    \n    // Update API call with error status\n    if (callId) {\n      apiUsageTracker.updateCall(callId, {\n        success: false,\n        error: errorMessage,\n        metadata: {\n          ...errorDetails,\n          step: 'brand_variations_error'\n        }\n      });\n    }\n    \n    // Re-throw the error instead of using fallback\n    throw new Error(`Failed to generate brand variations for \"${coreBrand}\": ${errorMessage}`);\n  }\n}\n\n/**\n * Detect brand mentions in text using intelligent variations\n * This is the single source of truth for brand detection\n */\nexport async function detectBrandMentions(\n  text: string,\n  brandName: string,\n  options: BrandDetectionOptions = {}\n): Promise<BrandDetectionResult> {\n  const {\n    caseSensitive = false,\n    excludeNegativeContext = false,\n    minConfidence = 0.3\n  } = options;\n\n  // Validation des paramètres d'entrée\n  if (!text || typeof text !== 'string' || text.trim().length === 0) {\n    throw new Error('Le texte fourni est invalide ou vide');\n  }\n\n  if (!brandName || typeof brandName !== 'string' || brandName.trim().length === 0) {\n    throw new Error('Le nom de marque fourni est invalide ou vide');\n  }\n\n  try {\n    // Get intelligent variations\n    const brandVariation = await generateIntelligentBrandVariations(brandName);\n    \n    if (brandVariation.confidence < minConfidence) {\n      return {\n        mentioned: false,\n        matches: [],\n        confidence: 0\n      };\n    }\n\n    const matches: BrandDetectionMatch[] = [];\n\n    // For brands that are common words, be more strict about case sensitivity\n    const commonWords = ['apple', 'orange', 'black', 'radical', 'nike', 'tesla', 'google', 'amazon'];\n    const isCommonWord = brandName.length <= 8 && /^[a-zA-Z]+$/.test(brandName) && \n                        commonWords.includes(brandName.toLowerCase());\n    const shouldBeCaseSensitive = isCommonWord || caseSensitive;\n\n    // Create regex patterns for each variation\n    const patterns = brandVariation.variations.map(variation => {\n      const escaped = variation.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n      // Use word boundaries but be more careful about context\n      return {\n        variation,\n        regex: new RegExp(`\\\\b${escaped}\\\\b`, shouldBeCaseSensitive ? 'g' : 'gi')\n      };\n    });\n\n    // Always search in the original text to get correct positions\n    patterns.forEach(({ variation, regex }) => {\n      let match;\n      while ((match = regex.exec(text)) !== null) {\n        const matchText = match[0];\n        const matchIndex = match.index;\n\n        // Check for negative context if requested\n        if (excludeNegativeContext) {\n          const contextStart = Math.max(0, matchIndex - 50);\n          const contextEnd = Math.min(text.length, matchIndex + matchText.length + 50);\n          const context = text.substring(contextStart, contextEnd);\n          \n          const negativePatterns = [\n            /\\bnot\\s+(?:recommended|good|worth|reliable)/i,\n            /\\bavoid\\b/i,\n            /\\bworse\\s+than\\b/i,\n            /\\binferior\\s+to\\b/i,\n            /\\bdon't\\s+(?:use|recommend|like)\\b/i\n          ];\n          \n          const hasNegativeContext = negativePatterns.some(np => np.test(context));\n          if (hasNegativeContext) continue;\n        }\n\n        // Additional check to avoid matching in URLs or other inappropriate contexts\n        const contextStart = Math.max(0, matchIndex - 20);\n        const contextEnd = Math.min(text.length, matchIndex + matchText.length + 20);\n        const context = text.substring(contextStart, contextEnd);\n        \n        // More precise checks for inappropriate contexts\n        const isInUrl = /https?:\\/\\/[^\\s]*/i.test(context) || /www\\.[^\\s]*/i.test(context);\n        const isInEmail = /[^\\s]+@[^\\s]+/i.test(context);\n        \n        // Check if the match is directly part of a domain (like \"caterham.com\")\n        const isDirectlyInDomain = /\\.[a-z]{2,4}\\b/i.test(context) && \n          context.indexOf(matchText) > 0 && \n          context[context.indexOf(matchText) - 1] === '.';\n        \n        // Check for actual file paths (not markdown formatting)\n        const isInFilePath = /[\\/\\\\][a-zA-Z0-9_\\-\\.]+/i.test(context) && !/\\*\\*/.test(context);\n        \n        if (isInUrl || isInEmail || isDirectlyInDomain || isInFilePath) {\n          continue;\n        }\n\n        // Calculate confidence\n        let confidence = brandVariation.confidence;\n        \n        // Boost confidence for exact matches\n        if (matchText.toLowerCase() === brandName.toLowerCase()) {\n          confidence = Math.min(confidence + 0.2, 1.0);\n        }\n        \n        // Reduce confidence for partial matches\n        if (variation.toLowerCase() !== brandName.toLowerCase()) {\n          confidence = Math.max(confidence - 0.1, 0.1);\n        }\n\n        matches.push({\n          text: matchText,\n          index: matchIndex,\n          brandName,\n          variation,\n          confidence\n        });\n      }\n    });\n\n    // Remove duplicate matches at the same position (keep highest confidence)\n    const uniqueMatches = matches.reduce((acc, match) => {\n      const existing = acc.find(m => m.index === match.index);\n      if (!existing || match.confidence > existing.confidence) {\n        return [...acc.filter(m => m.index !== match.index), match];\n      }\n      return acc;\n    }, [] as BrandDetectionMatch[]);\n\n    // Sort by confidence\n    uniqueMatches.sort((a, b) => b.confidence - a.confidence);\n\n    const overallConfidence = uniqueMatches.length > 0\n      ? Math.max(...uniqueMatches.map(m => m.confidence))\n      : 0;\n\n    return {\n      mentioned: uniqueMatches.length > 0,\n      matches: uniqueMatches,\n      confidence: overallConfidence\n    };\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n    const errorDetails = {\n      brandName,\n      textLength: text.length,\n      options,\n      errorType: error instanceof Error ? error.constructor.name : 'UnknownError',\n      errorMessage,\n      timestamp: new Date().toISOString()\n    };\n    \n    console.error('[Brand Detection Service] Brand detection failed:', errorDetails);\n    \n    // Re-throw the error instead of returning empty result\n    throw new Error(`Brand detection failed for \"${brandName}\": ${errorMessage}`);\n  }\n}\n\n/**\n * Detect multiple brands in text\n */\nexport async function detectMultipleBrands(\n  text: string,\n  brandNames: string[],\n  options: BrandDetectionOptions = {}\n): Promise<Map<string, BrandDetectionResult>> {\n  // Validation des paramètres d'entrée\n  if (!text || typeof text !== 'string' || text.trim().length === 0) {\n    throw new Error('Le texte fourni est invalide ou vide');\n  }\n\n  if (!Array.isArray(brandNames) || brandNames.length === 0) {\n    throw new Error('La liste des marques fournie est invalide ou vide');\n  }\n\n  const invalidBrands = brandNames.filter(name => typeof name !== 'string' || !name.trim());\n  if (invalidBrands.length > 0) {\n    throw new Error(`Certains noms de marques sont invalides: ${invalidBrands.length} marques invalides trouvées`);\n  }\n\n  const results = new Map<string, BrandDetectionResult>();\n  \n  // Process brands in parallel for better performance\n  const detectionPromises = brandNames.map(async (brandName) => {\n    try {\n      const result = await detectBrandMentions(text, brandName, options);\n      return { brandName, result, error: null };\n    } catch (error) {\n      return { brandName, result: null, error };\n    }\n  });\n\n  const detectionResults = await Promise.all(detectionPromises);\n  \n  // Check if any detection failed\n  const errors = detectionResults.filter(r => r.error);\n  if (errors.length > 0) {\n    const errorDetails = {\n      totalBrands: brandNames.length,\n      failedBrands: errors.length,\n      errors: errors.map(e => ({\n        brandName: e.brandName,\n        errorType: e.error instanceof Error ? e.error.constructor.name : 'UnknownError',\n        errorMessage: e.error instanceof Error ? e.error.message : 'Unknown error'\n      })),\n      timestamp: new Date().toISOString()\n    };\n    \n    console.error('[Brand Detection Service] Multiple brand detection failed:', errorDetails);\n    \n    const errorMessages = errors.map(e => `${e.brandName}: ${e.error instanceof Error ? e.error.message : 'Unknown error'}`);\n    throw new Error(`Brand detection failed for: ${errorMessages.join(', ')}`);\n  }\n  \n  detectionResults.forEach(({ brandName, result }) => {\n    if (result) {\n      results.set(brandName, result);\n    }\n  });\n\n  return results;\n}\n\n/**\n * Cache for brand variations to avoid repeated AI calls\n */\nconst brandVariationCache = new Map<string, BrandVariation>();\n\n/**\n * Get cached brand variations or generate new ones\n */\nexport async function getCachedBrandVariations(\n  brandName: string,\n  locale: string = 'en'\n): Promise<BrandVariation> {\n  const cacheKey = `${brandName.toLowerCase()}_${locale}`;\n  \n  if (brandVariationCache.has(cacheKey)) {\n    return brandVariationCache.get(cacheKey)!;\n  }\n\n  const variations = await generateIntelligentBrandVariations(brandName, locale);\n  brandVariationCache.set(cacheKey, variations);\n  \n  return variations;\n}\n\n/**\n * Clear the brand variation cache\n */\nexport function clearBrandVariationCache(): void {\n  brandVariationCache.clear();\n}\n\n/**\n * Clean brands with AI (migrated from brand-detection-enhanced)\n * This function provides the same interface as the old enhanced version\n */\nexport async function cleanBrandsWithAI(brands: string[]): Promise<Array<{\n  original: string;\n  cleaned: string;\n  variations: string[];\n  reasoning?: string;\n}>> {\n  console.log(`[BrandDetection] 🧹 Nettoyage de ${brands.length} marques avec OpenAI`);\n  \n  const results = [];\n  \n  for (const brand of brands) {\n    try {\n      const variation = await generateIntelligentBrandVariations(brand);\n      results.push({\n        original: brand,\n        cleaned: variation.original,\n        variations: variation.variations,\n        reasoning: `AI-generated variations with confidence ${variation.confidence}`\n      });\n    } catch (error) {\n      console.warn(`Failed to clean brand \"${brand}\":`, error);\n      // Fallback to basic cleaning\n      results.push({\n        original: brand,\n        cleaned: brand,\n        variations: [brand, brand.toLowerCase()],\n        reasoning: 'Fallback due to AI error'\n      });\n    }\n  }\n  \n  return results;\n}\n\n/**\n * Extract brands from text (migrated from brand-detection-enhanced)\n * This function provides the same interface as the old enhanced version\n */\nexport async function extractBrandsFromText(\n  text: string,\n  targetBrands: Array<{\n    original: string;\n    cleaned: string;\n    variations: string[];\n    reasoning?: string;\n  }>,\n  provider: string\n): Promise<{\n  mentionedBrands: Array<{\n    brand: string;\n    matchedVariation: string;\n    confidence: number;\n    context?: string;\n  }>;\n  totalBrandsFound: number;\n  confidence: number;\n}> {\n  console.log(`[BrandDetection] 🔍 Extraction des marques du texte ${provider} (${text.length} chars)`);\n  \n  const mentionedBrands: Array<{\n    brand: string;\n    matchedVariation: string;\n    confidence: number;\n    context?: string;\n  }> = [];\n  const brandNames = targetBrands.map(b => b.cleaned);\n  \n  try {\n    const detectionResults = await detectMultipleBrands(text, brandNames, {\n      caseSensitive: false,\n      excludeNegativeContext: false,\n      minConfidence: 0.3\n    });\n    \n    detectionResults.forEach((result, brandName) => {\n      if (result.mentioned) {\n        result.matches.forEach(match => {\n          mentionedBrands.push({\n            brand: brandName,\n            matchedVariation: match.variation,\n            confidence: match.confidence,\n            context: text.substring(Math.max(0, match.index - 20), Math.min(text.length, match.index + match.text.length + 20))\n          });\n        });\n      }\n    });\n    \n    const totalBrandsFound = mentionedBrands.length;\n    const confidence = totalBrandsFound > 0 \n      ? mentionedBrands.reduce((sum, m) => sum + m.confidence, 0) / totalBrandsFound\n      : 0;\n    \n    return {\n      mentionedBrands,\n      totalBrandsFound,\n      confidence\n    };\n  } catch (error) {\n    console.error('Brand extraction failed:', error);\n    return {\n      mentionedBrands: [],\n      totalBrandsFound: 0,\n      confidence: 0\n    };\n  }\n}\n\n/**\n * Calculate brand visibility by provider (migrated from brand-detection-enhanced)\n * This function provides the same interface as the old enhanced version\n */\nexport function calculateBrandVisibilityByProvider(\n  brandExtractions: Map<string, Array<{\n    mentionedBrands: Array<{\n      brand: string;\n      matchedVariation: string;\n      confidence: number;\n      context?: string;\n    }>;\n    totalBrandsFound: number;\n    confidence: number;\n  }>>,\n  targetBrand: string,\n  competitors: string[]\n): Map<string, Map<string, { \n  mentioned: boolean; \n  confidence: number; \n  mentionCount: number; \n  totalResponses: number; \n  percentage: number \n}>> {\n  console.log(`[BrandDetection] 📊 Calcul des détections par provider`);\n  \n  const results = new Map();\n  const allBrands = [targetBrand, ...competitors];\n\n  // Normalization function for brand comparison\n  const normalize = (value: string) => {\n    return (value || '')\n      .toLowerCase()\n      .normalize('NFD')\n      .replace(/\\p{Diacritic}/gu, '')\n      .replace(/[^a-z0-9]+/g, ' ')\n      .trim();\n  };\n  \n  const isSameBrand = (a: string, b: string) => {\n    const na = normalize(a);\n    const nb = normalize(b);\n    if (!na || !nb) return false;\n    if (na === nb) return true;\n    return na.includes(nb) || nb.includes(na);\n  };\n  \n  brandExtractions.forEach((extractions, provider) => {\n    const providerResults = new Map();\n    const totalResponses = extractions.length;\n    \n    allBrands.forEach(brand => {\n      let mentionCount = 0;\n      let totalConfidence = 0;\n      \n      extractions.forEach(extraction => {\n        const mention = extraction.mentionedBrands.find(m => isSameBrand(m.brand, brand));\n        if (mention) {\n          mentionCount++;\n          totalConfidence += mention.confidence;\n        }\n      });\n      \n      const mentioned = mentionCount > 0;\n      const averageConfidence = mentionCount > 0 ? totalConfidence / mentionCount : 0;\n      const percentage = totalResponses > 0 ? (mentionCount / totalResponses) * 100 : 0;\n      \n      providerResults.set(brand, { \n        mentioned, \n        confidence: averageConfidence,\n        mentionCount,\n        totalResponses,\n        percentage: Math.round(percentage * 10) / 10\n      });\n    });\n    \n    results.set(provider, providerResults);\n  });\n  \n  return results;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\lib\\brand-highlighting-utils.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":133,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3869,3872],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3869,3872],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":138,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3998,4001],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3998,4001],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":139,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4059,4062],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4059,4062],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":141,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4141,4144],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4141,4144],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Brand highlighting utilities for text processing\n * Extracted from HighlightedResponse component for better reusability\n */\n\nimport React from 'react';\n\nexport interface BrandHighlightingConfig {\n  targetBrand: string;\n  competitors: string[];\n  targetHighlightClass: string;\n  competitorHighlightClass: string;\n  defaultHighlightClass: string;\n}\n\nexport interface BrandDetectionResultForHighlighting {\n  mentioned: boolean;\n  matches: Array<{\n    text: string;\n    index: number;\n    brandName: string;\n    variation: string;\n    confidence: number;\n  }>;\n  confidence: number;\n}\n\n/**\n * Get the appropriate CSS class for a brand based on its type\n */\nexport function getBrandHighlightClass(\n  brandName: string,\n  config: BrandHighlightingConfig\n): string {\n  const normalizedBrand = brandName.toLowerCase();\n  const normalizedTarget = config.targetBrand.toLowerCase();\n  const competitorSet = new Set(config.competitors.map((c) => c.toLowerCase()));\n\n  if (normalizedBrand === normalizedTarget) {\n    return config.targetHighlightClass;\n  }\n  if (competitorSet.has(normalizedBrand)) {\n    return config.competitorHighlightClass;\n  }\n  return config.defaultHighlightClass;\n}\n\n/**\n * Create highlighted HTML for a text based on brand detection results\n */\nexport function createHighlightedHtml(\n  text: string,\n  detectionResults: Map<string, BrandDetectionResultForHighlighting>,\n  config: BrandHighlightingConfig\n): string {\n  let highlightedText = text;\n\n  detectionResults.forEach((result, brandName) => {\n    if (!result.mentioned || result.matches.length === 0) return;\n\n    // Get unique variations for this brand (use the actual matched texts)\n    const variations = [...new Set(result.matches.map((m) => m.text))];\n    const className = getBrandHighlightClass(brandName, config);\n\n    variations.forEach((variation) => {\n      const escaped = variation.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n      const regex = new RegExp(`\\\\b${escaped}\\\\b`, 'gi');\n\n      highlightedText = highlightedText.replace(\n        regex,\n        (match) =>\n          `<span class=\"${className}\" data-brand-highlight=\"true\" data-brand-name=\"${brandName}\">${match}</span>`\n      );\n    });\n  });\n\n  return highlightedText;\n}\n\n/**\n * Highlight text with brand mentions using React components\n */\nexport function highlightTextWithBrands(\n  text: string,\n  detectionResults: Map<string, BrandDetectionResultForHighlighting>,\n  config: BrandHighlightingConfig,\n  showHighlighting: boolean = true\n): React.ReactNode {\n  // Early returns for edge cases\n  if (!showHighlighting || !text || text.trim().length < 3 || detectionResults.size === 0) {\n    return text;\n  }\n\n  const highlightedText = createHighlightedHtml(text, detectionResults, config);\n\n  // Return original text if no highlighting was applied\n  if (highlightedText === text) {\n    return text;\n  }\n\n  return <span dangerouslySetInnerHTML={{ __html: highlightedText }} />;\n}\n\n/**\n * Recursively highlight brand mentions in React children (for markdown processing)\n */\nexport function highlightMarkdownChildren(\n  children: React.ReactNode,\n  detectionResults: Map<string, BrandDetectionResultForHighlighting>,\n  config: BrandHighlightingConfig,\n  showHighlighting: boolean = true\n): React.ReactNode {\n  return React.Children.map(children, (child) => {\n    // Process text nodes\n    if (typeof child === 'string') {\n      return child.trim().length > 0\n        ? (highlightTextWithBrands(\n            child,\n            detectionResults,\n            config,\n            showHighlighting\n          ) as React.ReactNode)\n        : child;\n    }\n\n    if (typeof child === 'number') {\n      return highlightTextWithBrands(String(child), detectionResults, config, showHighlighting);\n    }\n\n    // Process React elements\n    if (React.isValidElement(child)) {\n      // Skip already processed elements\n      if ((child.props as any)?.['data-brand-highlight']) {\n        return child;\n      }\n\n      // Recursively process children\n      if ((child.props as any)?.children) {\n        return React.cloneElement(child as any, {\n          children: highlightMarkdownChildren(\n            (child.props as any).children,\n            detectionResults,\n            config,\n            showHighlighting\n          ),\n        });\n      }\n\n      return child;\n    }\n\n    // Process arrays\n    if (Array.isArray(child)) {\n      return highlightMarkdownChildren(child, detectionResults, config, showHighlighting);\n    }\n\n    return child;\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\lib\\client-errors.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[247,250],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[247,250],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[514,517],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[514,517],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Client-side error parsing utility\r\n\r\nexport interface ApiErrorResponse {\r\n  error: {\r\n    message: string;\r\n    code: string;\r\n    statusCode: number;\r\n    timestamp: string;\r\n    fields?: Record<string, string>;\r\n    metadata?: Record<string, any>;\r\n  };\r\n}\r\n\r\nexport class ClientApiError extends Error {\r\n  public readonly code: string;\r\n  public readonly statusCode: number;\r\n  public readonly timestamp: Date;\r\n  public readonly fields?: Record<string, string>;\r\n  public readonly metadata?: Record<string, any>;\r\n\r\n  constructor(errorResponse: ApiErrorResponse) {\r\n    super(errorResponse.error.message);\r\n    this.code = errorResponse.error.code;\r\n    this.statusCode = errorResponse.error.statusCode;\r\n    this.timestamp = new Date(errorResponse.error.timestamp);\r\n    this.fields = errorResponse.error.fields;\r\n    this.metadata = errorResponse.error.metadata;\r\n\r\n    Object.setPrototypeOf(this, ClientApiError.prototype);\r\n  }\r\n\r\n  // Helper methods for common error checks\r\n  isAuthenticationError(): boolean {\r\n    return this.statusCode === 401 || this.code === 'UNAUTHORIZED';\r\n  }\r\n\r\n  isValidationError(): boolean {\r\n    return this.statusCode === 400 && this.code === 'VALIDATION_ERROR';\r\n  }\r\n\r\n  isRateLimitError(): boolean {\r\n    return this.statusCode === 429 || this.code === 'RATE_LIMIT_EXCEEDED';\r\n  }\r\n\r\n  isInsufficientCreditsError(): boolean {\r\n    return this.code === 'INSUFFICIENT_CREDITS';\r\n  }\r\n\r\n  isNotFoundError(): boolean {\r\n    return this.statusCode === 404 || this.code === 'NOT_FOUND';\r\n  }\r\n\r\n  isServerError(): boolean {\r\n    return this.statusCode >= 500;\r\n  }\r\n\r\n  // Get user-friendly error message\r\n  getUserMessage(): string {\r\n    // Special handling for common errors\r\n    switch (this.code) {\r\n      case 'UNAUTHORIZED':\r\n        return 'Please log in to continue';\r\n      case 'SESSION_EXPIRED':\r\n        return 'Your session has expired. Please log in again';\r\n      case 'INSUFFICIENT_CREDITS':\r\n        return `You need ${this.metadata?.creditsRequired || 'more'} credits. You have ${this.metadata?.creditsAvailable || 0} credits available`;\r\n      case 'RATE_LIMIT_EXCEEDED':\r\n        return `Too many requests. Please try again in ${this.metadata?.retryAfter || 60} seconds`;\r\n      case 'VALIDATION_ERROR':\r\n        if (this.fields && Object.keys(this.fields).length > 0) {\r\n          return 'Please check the highlighted fields';\r\n        }\r\n        return this.message;\r\n      case 'EXTERNAL_SERVICE_ERROR':\r\n        return `Service temporarily unavailable${this.metadata?.service ? ` (${this.metadata.service})` : ''}. Please try again later`;\r\n      case 'DATABASE_ERROR':\r\n        return 'Unable to complete the operation. Please try again';\r\n      default:\r\n        return this.message;\r\n    }\r\n  }\r\n}\r\n\r\n// Parse API response and throw ClientApiError if it's an error\r\nexport async function parseApiResponse<T>(response: Response): Promise<T> {\r\n  if (!response.ok) {\r\n    try {\r\n      const errorData = await response.json() as ApiErrorResponse;\r\n      throw new ClientApiError(errorData);\r\n    } catch (error) {\r\n      if (error instanceof ClientApiError) {\r\n        throw error;\r\n      }\r\n      // Fallback for non-standard error responses\r\n      throw new ClientApiError({\r\n        error: {\r\n          message: 'An unexpected error occurred',\r\n          code: 'UNKNOWN_ERROR',\r\n          statusCode: response.status,\r\n          timestamp: new Date().toISOString(),\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  return response.json();\r\n}\r\n\r\n// Hook for handling API errors in React components\r\nexport function useApiError() {\r\n  const handleError = (error: unknown): string => {\r\n    if (error instanceof ClientApiError) {\r\n      return error.getUserMessage();\r\n    }\r\n    if (error instanceof Error) {\r\n      return error.message;\r\n    }\r\n    return 'An unexpected error occurred';\r\n  };\r\n\r\n  return { handleError };\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\lib\\competitor-pipeline\\ai-web-search.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":452,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":452,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19277,19280],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19277,19280],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":501,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":501,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":569,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":569,"endColumn":23}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { z } from 'zod';\nimport { generateText, generateObject } from 'ai';\nimport { getConfiguredProviders, getProviderModel } from '@/lib/provider-config';\nimport { generateText as generateTextOpenAI } from 'ai';\nimport { openai } from '@ai-sdk/openai';\nimport type { Company } from '@/lib/types';\nimport { apiUsageTracker, extractTokensFromUsage, estimateCost } from '@/lib/api-usage-tracker';\n\nexport interface AISearchCompetitor {\n  name: string;\n  domain: string;\n  url: string;\n  // snippet field removed from database schema\n  confidence: number;\n  source: 'ai-web-search';\n  competitionScore?: number;\n}\n\n// Schema for AI web search results - simplified for better compatibility\nconst AICompetitorSearchSchema = z.object({\n  competitors: z.array(z.object({\n    name: z.string().describe('Company name'),\n    domain: z.string().describe('Website domain'),\n    description: z.string().optional().describe('Brief description'),\n    competitionScore: z.number().min(1).max(10).describe('Competition score from 1 to 10')\n  }))\n});\n\n// Schema for IntelliSearch mode - only high-competition competitors\nconst AICompetitorSearchSchemaIntelliSearch = z.object({\n  competitors: z.array(z.object({\n    name: z.string().describe('Company name'),\n    domain: z.string().describe('Website domain'),\n    description: z.string().optional().describe('Brief description'),\n    competitionScore: z.number().min(8).max(10).describe('Competition score from 8 to 10 (only high-competition competitors)')\n  }))\n});\n\n/**\n * Use Perplexity with web search capabilities to find competitors directly\n * OpenAI is used only for prompt generation based on Perplexity research\n */\nexport async function findCompetitorsWithAIWebSearch(\n  company: Company,\n  maxResults: number = 9,\n  useWebSearch: boolean = true,\n  companyName?: string,\n  useSonarReasoning: boolean = false\n): Promise<AISearchCompetitor[]> {\n  const startTime = Date.now();\n  \n  try {\n    console.log('🤖 [AIWebSearch] Starting Perplexity competitor search...');\n    console.log(`🎯 [AIWebSearch] Target: ${maxResults} competitors for ${company.businessProfile?.businessType || company.industry || 'unknown business'}`);\n    console.log(`🔧 [AIWebSearch] Using ${useSonarReasoning ? 'sonar-reasoning' : 'sonar-pro'} model`);\n    \n    // Get Perplexity provider\n    const providers = getConfiguredProviders();\n    const perplexityProvider = providers.find(p => p.id === 'perplexity' && p.isConfigured());\n    \n    if (!perplexityProvider) {\n      throw new Error('Perplexity provider not available or not configured');\n    }\n    \n    console.log(`🔍 [AIWebSearch] Using Perplexity provider: ${perplexityProvider.name}`);\n    \n    // Select model based on preference\n    const modelId = useSonarReasoning ? 'sonar-reasoning' : 'sonar-pro';\n    const model = getProviderModel(perplexityProvider.id, modelId, { useWebSearch });\n    \n    if (!model) {\n      throw new Error(`Failed to get Perplexity model: ${modelId}`);\n    }\n    \n    // Generate optimized search prompt using OpenAI\n    const openaiCallId = apiUsageTracker.trackCall({\n      provider: 'openai',\n      model: 'gpt-4o',\n      operation: 'competitor_search',\n      success: true,\n      metadata: { step: 'prompt_generation' }\n    });\n    \n    const searchPrompt = await generateOptimizedSearchPromptWithOpenAI(company, maxResults, companyName);\n    console.log(`📝 [AIWebSearch] Generated optimized search prompt via OpenAI`);\n    \n    // Update OpenAI call with estimated tokens (prompt generation is typically small)\n    apiUsageTracker.updateCall(openaiCallId, {\n      inputTokens: 500, // Estimated\n      outputTokens: 200, // Estimated\n      cost: estimateCost('openai', 'gpt-4o', 500, 200)\n    });\n    \n    // Use Perplexity for competitor research\n    console.log('🧭 [AIWebSearch] Using Perplexity for competitor research...');\n    console.log('🔍 [AIWebSearch] PERPLEXITY REQUEST DETAILS:');\n    console.log('='.repeat(80));\n    console.log(`Model: ${modelId} (${useSonarReasoning ? 'sonar-reasoning' : 'sonar-pro'})`);\n    console.log(`Temperature: 0.2`);\n    console.log(`Web Search: ${useWebSearch}`);\n    console.log(`Max Results: ${maxResults}`);\n    console.log(`IntelliSearch: DISABLED (temporarily)`);\n    console.log('='.repeat(80));\n    console.log('📤 [AIWebSearch] PROMPT SENT TO PERPLEXITY:');\n    console.log('='.repeat(80));\n    console.log(searchPrompt);\n    console.log('='.repeat(80));\n    \n    // Track Perplexity call\n    const perplexityCallId = apiUsageTracker.trackCall({\n      provider: 'perplexity',\n      model: modelId,\n      operation: 'competitor_search',\n      success: true,\n      metadata: { \n        step: 'competitor_research',\n        useWebSearch,\n        maxResults\n      }\n    });\n    \n    const perplexityStartTime = Date.now();\n    const { text, usage } = await generateText({\n      model,\n      prompt: searchPrompt,\n      temperature: 0.2\n    });\n    const perplexityDuration = Date.now() - perplexityStartTime;\n    \n    // Extract tokens from usage\n    const tokens = extractTokensFromUsage(usage);\n    \n    // Calculate cost for debugging\n    const calculatedCost = estimateCost('perplexity', modelId, tokens.inputTokens, tokens.outputTokens);\n    console.log(`💰 [AIWebSearch] Perplexity cost calculation: ${tokens.inputTokens} input + ${tokens.outputTokens} output = $${calculatedCost.toFixed(4)}`);\n    \n    // Update Perplexity call with actual usage\n    apiUsageTracker.updateCall(perplexityCallId, {\n      inputTokens: tokens.inputTokens,\n      outputTokens: tokens.outputTokens,\n      cost: calculatedCost,\n      duration: perplexityDuration\n    });\n      \n      // Log raw response for debugging\n      console.log('📝 [AIWebSearch] Raw Perplexity response:');\n      console.log('='.repeat(80));\n      console.log(text);\n      console.log('='.repeat(80));\n      \n    // Convert Perplexity response to structured format using OpenAI\n    console.log('📝 [AIWebSearch] Converting Perplexity response to structured format using OpenAI');\n    // IntelliSearch temporarily disabled - force to false\n    const competitors = await convertPerplexityResponseToStructuredCompetitors(text, maxResults, false);\n    \n    // Log results\n    console.log('\\n📋 [AIWebSearch] COMPETITORS FOUND:');\n    console.log('='.repeat(80));\n    competitors.forEach((comp, index) => {\n      console.log(`${index + 1}. ${comp.name} (${comp.domain})`);\n      console.log(`   📝 Competitor found`);\n      console.log(`   🎯 Confidence: ${(comp.confidence * 100).toFixed(1)}%`);\n      console.log('');\n    });\n    console.log('='.repeat(80));\n    \n    const processingTime = Date.now() - startTime;\n    console.log(`✅ [AIWebSearch] Found ${competitors.length} competitors via Perplexity in ${processingTime}ms`);\n    \n    return competitors;\n    \n  } catch (error) {\n    console.error('❌ [AIWebSearch] Error in Perplexity competitor search:', error);\n    \n    // Fallback to knowledge-based search without web access\n    if (useWebSearch) {\n      console.log('🔄 [AIWebSearch] Retrying without web search...');\n      return findCompetitorsWithAIWebSearch(company, maxResults, false, companyName, useSonarReasoning);\n    }\n    \n    return [];\n  }\n}\n\n/**\n * Generate optimized search prompt using OpenAI for Perplexity research\n */\nasync function generateOptimizedSearchPromptWithOpenAI(\n  company: Company,\n  maxResults: number,\n  companyName?: string\n): Promise<string> {\n  // Check if OpenAI is available\n  if (!process.env.OPENAI_API_KEY) {\n    console.warn('⚠️ [AIWebSearch] OpenAI not available, using fallback prompt generation');\n    return generateAdaptiveSearchPrompt(company, maxResults, companyName);\n  }\n\n  try {\n    // Track OpenAI call for prompt generation\n    const openaiPromptCallId = apiUsageTracker.trackCall({\n      provider: 'openai',\n      model: 'gpt-4o',\n      operation: 'competitor_search',\n      success: true,\n      metadata: { step: 'prompt_generation_detailed' }\n    });\n\n    const companyInfo = {\n      name: companyName || company.name || 'Unknown',\n      url: company.url || 'Unknown',\n      description: company.description || company.scrapedData?.description || 'Unknown',\n      industry: company.industry || 'Unknown',\n      businessType: company.businessProfile?.businessType || 'Unknown',\n      marketSegment: company.businessProfile?.marketSegment || 'Unknown',\n      primaryMarkets: company.businessProfile?.primaryMarkets?.join(', ') || 'Unknown',\n      targetCustomers: company.businessProfile?.targetCustomers || 'Unknown',\n      businessModel: company.businessProfile?.businessModel || 'Unknown',\n      technologies: company.businessProfile?.technologies?.join(', ') || 'Unknown',\n      primaryProducts: company.scrapedData?.mainProducts?.join(', ') || 'Unknown',\n      keywords: company.scrapedData?.keywords?.join(', ') || 'Unknown'\n    };\n\n    console.log('🏢 [AIWebSearch] COMPANY INFO FOR PROMPT GENERATION:');\n    console.log('='.repeat(80));\n    console.log(`Name: ${companyInfo.name}`);\n    console.log(`URL: ${companyInfo.url}`);\n    console.log(`Description: ${companyInfo.description}`);\n    console.log(`Industry: ${companyInfo.industry}`);\n    console.log(`Business Type: ${companyInfo.businessType}`);\n    console.log(`Market Segment: ${companyInfo.marketSegment}`);\n    console.log(`Primary Markets: ${companyInfo.primaryMarkets}`);\n    console.log(`Target Customers: ${companyInfo.targetCustomers}`);\n    console.log(`Business Model: ${companyInfo.businessModel}`);\n    console.log(`Technologies: ${companyInfo.technologies}`);\n    console.log(`Primary Products: ${companyInfo.primaryProducts}`);\n    console.log(`Keywords: ${companyInfo.keywords}`);\n    console.log('='.repeat(80));\n\n    const promptGenerationPrompt = `You are an expert market research analyst. Generate an optimized search prompt for finding ${maxResults} competitor companies.\n\nCOMPANY TO ANALYZE:\n- Name: ${companyInfo.name}\n- Website: ${companyInfo.url}\n- Description: ${companyInfo.description}\n- Industry: ${companyInfo.industry}\n- Business Type: ${companyInfo.businessType}\n- Market Segment: ${companyInfo.marketSegment}\n- Primary Markets: ${companyInfo.primaryMarkets}\n- Target Customers: ${companyInfo.targetCustomers}\n- Business Model: ${companyInfo.businessModel}\n- Technologies: ${companyInfo.technologies}\n- Products/Services: ${companyInfo.primaryProducts}\n- Keywords: ${companyInfo.keywords}\n\nTASK: Create a search prompt that will be used with Perplexity AI to find direct competitors. The prompt should:\n\n1. Analyze the company profile to determine geographic scope (local, national, international)\n2. Identify the most effective search terms and keywords\n3. Specify the target market and competitive landscape\n4. Request specific competitor information in a structured format\n5. Focus on finding REAL companies with actual websites\n6. Prioritize direct competitors over indirect ones\n7. Ask Perplexity to rank each competitor between 1 and 10 using the format \"Competition Score: X\" where X is the score\n\nOUTPUT: \nRequire to get always the same structure of the prompt : \n  - Geographic scope : local, national, international\n  - Keywords to search for : 8-12 specific terms\n  - Target market : segment and geographic scope\n  - Competitor informations(name, domain, description, competitionScore)\n- Provide EXACT company names (not generic terms)\n\nProvide only the optimized search prompt, nothing else. The prompt should be clear, specific, and designed to get the best results from Perplexity's web search capabilities.`;\n\n    console.log('🤖 [AIWebSearch] OPENAI PROMPT GENERATION REQUEST:');\n    console.log('='.repeat(80));\n    console.log('Model: gpt-4o-mini');\n    console.log('Temperature: 0.3');\n    console.log('='.repeat(80));\n    console.log('📤 [AIWebSearch] PROMPT SENT TO OPENAI:');\n    console.log('='.repeat(80));\n    console.log(promptGenerationPrompt);\n    console.log('='.repeat(80));\n\n    const openaiStartTime = Date.now();\n    const { text, usage } = await generateTextOpenAI({\n      model: openai('gpt-4o-mini'),\n      prompt: promptGenerationPrompt,\n      temperature: 0.3\n    });\n    const openaiDuration = Date.now() - openaiStartTime;\n\n    // Extract tokens from usage\n    const tokens = extractTokensFromUsage(usage);\n    \n    // Update OpenAI call with actual usage\n    apiUsageTracker.updateCall(openaiPromptCallId, {\n      inputTokens: tokens.inputTokens,\n      outputTokens: tokens.outputTokens,\n      cost: estimateCost('openai', 'gpt-4o-mini', tokens.inputTokens, tokens.outputTokens),\n      duration: openaiDuration\n    });\n\n    console.log('📥 [AIWebSearch] OPENAI RESPONSE:');\n    console.log('='.repeat(80));\n    console.log(text);\n    console.log('='.repeat(80));\n    console.log('📝 [AIWebSearch] Generated optimized prompt via OpenAI');\n    return text.trim();\n\n  } catch (error) {\n    console.warn('⚠️ [AIWebSearch] OpenAI prompt generation failed, using fallback:', error);\n    return generateAdaptiveSearchPrompt(company, maxResults, companyName);\n  }\n}\n\n/**\n * Convert Perplexity response to structured competitors using OpenAI\n * This restores the main branch approach using generateObject with AICompetitorSearchSchema\n */\nasync function convertPerplexityResponseToStructuredCompetitors(\n  perplexityResponse: string,\n  maxResults: number,\n  useIntelliSearch: boolean = false\n): Promise<AISearchCompetitor[]> {\n  try {\n    // Check if OpenAI is available for structured conversion\n    if (!process.env.OPENAI_API_KEY) {\n      console.warn('⚠️ [AIWebSearch] OpenAI not available for structured conversion, falling back to text parsing');\n      return await convertResearchToCompetitors({ response: perplexityResponse }, maxResults);\n    }\n\n    const scoreFilteringInstruction = useIntelliSearch \n      ? `1. Extract ONLY competitor companies with Competition Score >= 8 from the response\n2. For each high-competition competitor, provide:\n   - Exact company name (clean, no asterisks or formatting)\n   - Website domain (clean domain only, no http:// or www.)\n   - Brief description of what they do\n   - Competition score (must be >= 8 to be included)\n3. Focus on direct competitors that offer similar products/services\n4. Ensure company names are clean and professional\n5. Extract domains from URLs mentioned in the response\n6. Only include competitors with Competition Score >= 8\n7. Maximum ${maxResults} competitors\n\nEXAMPLES of correct extraction (ONLY include if Competition Score >= 8):\n- \"**Stromer** | https://www.stromerbike.com/ | Competition Score: 8\" → INCLUDE: name: \"Stromer\", domain: \"stromerbike.com\", competitionScore: 8\n- \"BMC Switzerland | https://www.bmc-switzerland.com/ | Competition Score: 7\" → EXCLUDE (score < 8)\n- \"Flyer | https://www.flyer-bikes.com/ | Competition Score: 9\" → INCLUDE: name: \"Flyer\", domain: \"flyer-bikes.com\", competitionScore: 9\n\nIMPORTANT: Only extract competitors with Competition Score >= 8. If a competitor doesn't have a score or has a score < 8, do NOT include them in the results.`\n      : `1. Extract ALL competitor companies mentioned in the response\n2. For each competitor, provide:\n   - Exact company name (clean, no asterisks or formatting)\n   - Website domain (clean domain only, no http:// or www.)\n   - Brief description of what they do\n   - Competition score (if mentioned as \"Competition Score: X\", extract X; otherwise use 5 as default)\n3. Focus on direct competitors that offer similar products/services\n4. Ensure company names are clean and professional\n5. Extract domains from URLs mentioned in the response\n6. Maximum ${maxResults} competitors\n\nEXAMPLES of correct extraction:\n- \"**Stromer** | https://www.stromerbike.com/ | Competition Score: 8\" → name: \"Stromer\", domain: \"stromerbike.com\", competitionScore: 8\n- \"BMC Switzerland | https://www.bmc-switzerland.com/ | Competition Score: 7\" → name: \"BMC Switzerland\", domain: \"bmc-switzerland.com\", competitionScore: 7\n- \"Flyer | https://www.flyer-bikes.com/\" → name: \"Flyer\", domain: \"flyer-bikes.com\", competitionScore: 5 (default)\n\nExtract ALL competitors mentioned, not just the first few.`;\n\n    const conversionPrompt = `Extract competitor information from this Perplexity research response and format it as a structured list.\n\nRESEARCH RESPONSE:\n${perplexityResponse}\n\nINSTRUCTIONS:\n${scoreFilteringInstruction}`;\n\n    const schema = useIntelliSearch ? AICompetitorSearchSchemaIntelliSearch : AICompetitorSearchSchema;\n    \n    // Track OpenAI call for structured conversion\n    const openaiConversionCallId = apiUsageTracker.trackCall({\n      provider: 'openai',\n      model: 'gpt-4o-mini',\n      operation: 'competitor_search',\n      success: true,\n      metadata: { step: 'structured_conversion' }\n    });\n    \n    console.log('🔄 [AIWebSearch] OPENAI STRUCTURED CONVERSION REQUEST:');\n    console.log('='.repeat(80));\n    console.log('Model: gpt-4o-mini');\n    console.log(`Schema: ${useIntelliSearch ? 'AICompetitorSearchSchemaIntelliSearch (score >= 8)' : 'AICompetitorSearchSchema (all scores)'}`);\n    console.log(`IntelliSearch Mode: ${useIntelliSearch ? 'ON (filtering enabled)' : 'OFF (no filtering)'}`);\n    console.log('Temperature: 0.2');\n    console.log('='.repeat(80));\n    console.log('📤 [AIWebSearch] CONVERSION PROMPT SENT TO OPENAI:');\n    console.log('='.repeat(80));\n    console.log(conversionPrompt);\n    console.log('='.repeat(80));\n\n    const openaiConversionStartTime = Date.now();\n    const { object, usage } = await generateObject({\n      model: openai('gpt-4o-mini'),\n      schema: schema,\n      prompt: conversionPrompt,\n      temperature: 0.2\n    });\n    const openaiConversionDuration = Date.now() - openaiConversionStartTime;\n\n    // Extract tokens from usage\n    const conversionTokens = extractTokensFromUsage(usage);\n    \n    // Update OpenAI call with actual usage\n    apiUsageTracker.updateCall(openaiConversionCallId, {\n      inputTokens: conversionTokens.inputTokens,\n      outputTokens: conversionTokens.outputTokens,\n      cost: estimateCost('openai', 'gpt-4o-mini', conversionTokens.inputTokens, conversionTokens.outputTokens),\n      duration: openaiConversionDuration\n    });\n\n    console.log('📥 [AIWebSearch] OPENAI STRUCTURED RESPONSE:');\n    console.log('='.repeat(80));\n    console.log(JSON.stringify(object, null, 2));\n    console.log('='.repeat(80));\n    console.log(`🔍 [AIWebSearch] OpenAI structured conversion found ${object.competitors.length} competitors`);\n\n    // Convert to AISearchCompetitor format\n    const competitors: AISearchCompetitor[] = object.competitors.map(comp => ({\n      name: comp.name,\n      domain: comp.domain,\n      url: comp.domain.startsWith('http') ? comp.domain : `https://${comp.domain}`,\n      // snippet field removed from database schema\n      confidence: 0.8,\n      source: 'ai-web-search',\n      competitionScore: comp.competitionScore || (useIntelliSearch ? undefined : 5)\n    }));\n\n    return competitors.slice(0, maxResults);\n\n  } catch (error) {\n    console.error('❌ [AIWebSearch] Error in structured conversion:', error);\n    console.log('🔄 [AIWebSearch] Falling back to text parsing...');\n    return await convertResearchToCompetitors({ response: perplexityResponse }, maxResults, useIntelliSearch);\n  }\n}\n\n/**\n * Convert research response to competitor format\n */\nasync function convertResearchToCompetitors(\n  researchResult: any,\n  maxResults: number,\n  useIntelliSearch: boolean = false\n): Promise<AISearchCompetitor[]> {\n  const competitors: AISearchCompetitor[] = [];\n  \n  if (!researchResult || !researchResult.response) {\n    console.warn('⚠️ [AIWebSearch] No response from research');\n    return competitors;\n  }\n  \n  const responseText = researchResult.response;\n  console.log('🔍 [AIWebSearch] Parsing response text:', responseText.substring(0, 500) + '...');\n  \n  const foundCompetitors = new Set<string>();\n  \n  // Enhanced patterns for different response formats\n  const competitorPatterns = [\n    // Pattern for table format: \"| **Company Name** | https://domain.com |\"\n    /\\|\\s*\\*\\*([^*]+)\\*\\*\\s*\\|\\s*(https?:\\/\\/[^\\s|]+)/g,\n    // Pattern: \"1. **Company Name** - domain.com\"\n    /\\d+\\.\\s*\\*\\*([^*]+)\\*\\*\\s*-\\s*([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})/g,\n    // Pattern: \"1. Company Name (domain.com)\" \n    /\\d+\\.\\s*([^(]+?)\\s*\\(([^)]+)\\)/g,\n    // Pattern: \"Company Name - website.com\"\n    /([A-Za-z][^-\\n]+?)\\s*-\\s*([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})/g,\n    // Pattern: \"Company Name: website.com\"\n    /([A-Za-z][^:\\n]+?):\\s*([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})/g,\n    // Pattern for simple list: \"**Company Name** - https://domain.com\"\n    /\\*\\*([^*]+)\\*\\*\\s*-\\s*(https?:\\/\\/[^\\s]+)/g,\n  ];\n  \n  // First pass: extract competitor names and domains from patterns\n  for (const pattern of competitorPatterns) {\n    let match;\n    while ((match = pattern.exec(responseText)) !== null && competitors.length < maxResults) {\n      const name = match[1]?.trim();\n      let domain = match[2]?.trim();\n      \n      // Clean up the name (remove extra asterisks, etc.)\n      const cleanName = name.replace(/\\*\\*/g, '').trim();\n      \n      // Clean up the domain/URL\n      if (domain) {\n        // If it's a full URL, extract the domain\n        if (domain.startsWith('http')) {\n          try {\n            const url = new URL(domain);\n            domain = url.hostname.replace(/^www\\./, '');\n          } catch (e) {\n            // If URL parsing fails, try to extract domain manually\n            domain = domain.replace(/^https?:\\/\\//, '').replace(/^www\\./, '').split('/')[0];\n          }\n        } else {\n          // Clean up domain\n          domain = domain.replace(/^https?:\\/\\//, '').replace(/^www\\./, '');\n        }\n      }\n      \n      if (cleanName && domain && !foundCompetitors.has(cleanName.toLowerCase())) {\n        foundCompetitors.add(cleanName.toLowerCase());\n        \n        if (useIntelliSearch) {\n          // Note: Fallback method doesn't have competition scores, so we skip these competitors\n          // since we only want competitors with scores >= 8\n          console.log(`⚠️ [AIWebSearch] Skipping competitor ${cleanName} - no competition score available in fallback method`);\n        } else {\n          // Include competitor with default score when IntelliSearch is off\n          competitors.push({\n            name: cleanName,\n            domain: domain,\n            url: domain.startsWith('http') ? domain : `https://${domain}`,\n            // snippet field removed from database schema\n            confidence: 0.8,\n            source: 'ai-web-search',\n            competitionScore: 5\n          });\n          \n          console.log(`✅ [AIWebSearch] Found competitor: ${cleanName} (${domain})`);\n        }\n      }\n    }\n  }\n  \n  // If no structured competitors found, try to extract from web search sources\n  if (competitors.length === 0 && researchResult.webSearchSources) {\n    console.log('🔍 [AIWebSearch] Extracting competitors from web search sources');\n    \n    for (const source of researchResult.webSearchSources.slice(0, maxResults)) {\n      if (source.url && source.domain) {\n        try {\n          const url = new URL(source.url);\n          const domain = url.hostname.replace(/^www\\./, '');\n          \n          // Extract potential company name from domain\n          const name = source.domain.split('.')[0].replace(/[-_]/g, ' ').replace(/\\b\\w/g, (l: string) => l.toUpperCase());\n          \n          if (name && !foundCompetitors.has(name.toLowerCase())) {\n            foundCompetitors.add(name.toLowerCase());\n            \n            if (useIntelliSearch) {\n              // Note: Fallback method doesn't have competition scores, so we skip these competitors\n              // since we only want competitors with scores >= 8\n              console.log(`⚠️ [AIWebSearch] Skipping competitor ${name} - no competition score available in fallback method`);\n            } else {\n              // Include competitor with default score when IntelliSearch is off\n              competitors.push({\n                name: name,\n                domain: domain,\n                url: source.url,\n                // snippet field removed from database schema\n                confidence: 0.7,\n                source: 'ai-web-search',\n                competitionScore: 5\n              });\n            }\n          }\n        } catch (error) {\n          console.warn(`⚠️ [AIWebSearch] Invalid URL in source: ${source.url}`);\n        }\n      }\n    }\n  }\n  \n  console.log(`🔍 [AIWebSearch] Converted ${competitors.length} competitors from Perplexity response`);\n  return competitors.slice(0, maxResults);\n}\n\n\n\n/**\n * Generate an adaptive search prompt that lets AI determine geographic scope and strategy\n */\nfunction generateAdaptiveSearchPrompt(company: Company, maxResults: number, companyName?: string): string {\n  // Extract all available company information\n  const companyInfo = {\n    name: companyName || company.name || 'Unknown',\n    url: company.url || 'Unknown',\n    description: company.description || company.scrapedData?.description || 'Unknown',\n    industry: company.industry || 'Unknown',\n    businessType: company.businessProfile?.businessType || 'Unknown',\n    marketSegment: company.businessProfile?.marketSegment || 'Unknown',\n    primaryMarkets: company.businessProfile?.primaryMarkets?.join(', ') || 'Unknown',\n    targetCustomers: company.businessProfile?.targetCustomers || 'Unknown',\n    businessModel: company.businessProfile?.businessModel || 'Unknown',\n    technologies: company.businessProfile?.technologies?.join(', ') || 'Unknown',\n    primaryProducts: company.scrapedData?.mainProducts?.join(', ') || 'Unknown',\n    keywords: company.scrapedData?.keywords?.join(', ') || 'Unknown'\n  };\n  \n  return `You are an expert market research analyst with access to current web data. Your task is to find ${maxResults} REAL competitor companies by analyzing the provided company profile and adapting your search strategy accordingly.\n\nCOMPANY PROFILE TO ANALYZE:\n- Company Name: ${companyInfo.name}\n- Website URL: ${companyInfo.url}\n- Description: ${companyInfo.description}\n- Industry: ${companyInfo.industry}\n- Business Type: ${companyInfo.businessType}\n- Market Segment: ${companyInfo.marketSegment}\n- Primary Markets: ${companyInfo.primaryMarkets}\n- Target Customers: ${companyInfo.targetCustomers}\n- Business Model: ${companyInfo.businessModel}\n- Technologies: ${companyInfo.technologies}\n- Products/Services: ${companyInfo.primaryProducts}\n- Keywords: ${companyInfo.keywords}\n\nADAPTIVE ANALYSIS INSTRUCTIONS:\n1. **Geographic Scope Analysis**: Based on the company profile, determine if this business operates:\n   - LOCALLY (single city/region): Small local businesses, law firms, local service providers, cantonal banks\n   - NATIONALLY (single country): National brands, country-specific services, regulated industries\n   - INTERNATIONALLY: Global brands, tech companies, multinational corporations\n\n2. **Market Context Adaptation**: Analyze the business characteristics to understand:\n   - Language markets (French, German, English, Portuguese, Spanish, etc.)\n   - Regulatory environments (banking, legal, healthcare, construction)\n   - Cultural specificity (local vs global appeal)\n   - Business model (B2B, B2C, marketplace, SaaS, services, manufacturing)\n\n3. **Search Strategy Formulation**: Based on your analysis, adapt your web search to:\n   - Use appropriate language keywords for the detected market\n   - Focus on the right geographic scope (local directories vs international databases)\n   - Target industry-specific sources and databases\n   - Consider regulatory and cultural factors\n   - Search for companies of similar size and market position\n\nSEARCH REQUIREMENTS:\n- Search the web for current, accurate information\n- Find REAL companies with actual websites and current operations\n- Verify companies operate in the same relevant market scope you identified\n- Prioritize direct competitors over indirect ones\n- Include both established players and emerging competitors\n- Ensure domain names are accurate and current\n- Focus on companies that actually compete for the same customers\n\nOUTPUT REQUIREMENTS:\n- The structure of the prompt must always be the same : \n  - Geographic scope : local, national, international\n  - Keywords to search for : 8-12 specific terms\n  - Target market : segment and geographic scope\n  - Competitor informations(name, domain, description, competitionScore)\n- Provide EXACT company names (not generic terms)\n- Include accurate website domains (verify they exist)\n- Brief explanation of competitive relationship\n- Rate competitiveness score based on directness of competition (0-1)\n- Ensure geographic and market alignment with your analysis\n\nEXAMPLES OF ADAPTIVE THINKING:\n- Swiss cantonal bank → Other Swiss cantonal banks, not international banks\n- French law firm in Lyon → Other law firms in Lyon/France, not global legal services\n- Portuguese construction company → Portuguese construction companies, not global construction\n- German tech startup → German and European tech companies in the same domain\n- International SaaS platform → Global SaaS platforms in the same category\n- Local restaurant chain → Other restaurant chains in the same region/country\n- Swiss watchmaker → Other Swiss and luxury watch manufacturers\n- French wine producer → Other French wine producers in similar regions\n\nFocus on finding companies that a customer would actually consider as alternatives when making a purchasing decision in this specific market context.\n\nRemember: Let the company profile guide your search strategy. Don't assume the geographic scope - analyze and adapt based on the actual business characteristics provided. Pay special attention to the URL domain, business type, and market indicators to determine the appropriate scope.`;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\lib\\competitor-pipeline\\search-method-config.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1095,1098],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1095,1098],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":48,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1169,1172],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1169,1172],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Configuration for testing different search methods\r\n */\r\n\r\nexport interface SearchMethodConfig {\r\n  method: 'ai-web-search';\r\n  useWebSearch?: boolean;\r\n  maxResults?: number;\r\n  useSonarReasoning?: boolean;\r\n}\r\n\r\n// Easy configuration presets for testing\r\nexport const SEARCH_CONFIGS = {\r\n  // AI web search with OpenAI/Gemini search capabilities\r\n  aiWebSearch: {\r\n    method: 'ai-web-search' as const,\r\n    useWebSearch: true,\r\n    maxResults: 9\r\n  },\r\n  // AI search without web capabilities (knowledge-based only)\r\n  aiKnowledge: {\r\n    method: 'ai-web-search' as const,\r\n    useWebSearch: false,\r\n    maxResults: 9\r\n  }\r\n} as const;\r\n\r\n/**\r\n * Get the appropriate API endpoint for a search method\r\n */\r\nexport function getApiEndpoint(method: SearchMethodConfig['method']): string {\r\n  switch (method) {\r\n    case 'ai-web-search':\r\n      return '/api/competitors/ai-search';\r\n    default:\r\n      return '/api/competitors/ai-search';\r\n  }\r\n}\r\n\r\n/**\r\n * Build request body for the given search method\r\n */\r\nexport function buildRequestBody(\r\n  config: SearchMethodConfig,\r\n  company: any,\r\n  locale?: string,\r\n  useIntelliSearch?: boolean\r\n): Record<string, any> {\r\n  switch (config.method) {\r\n    case 'ai-web-search':\r\n      return {\r\n        company,\r\n        maxResults: config.maxResults || 9,\r\n        useWebSearch: config.useWebSearch ?? true,\r\n        useSonarReasoning: useIntelliSearch ?? config.useSonarReasoning ?? false\r\n      };\r\n    default:\r\n      return { \r\n        company, \r\n        maxResults: config.maxResults || 9, \r\n        useWebSearch: true,\r\n        useSonarReasoning: useIntelliSearch ?? false\r\n      };\r\n  }\r\n}\r\n\r\n/**\r\n * Current active configuration - change this to test different methods\r\n */\r\nexport const ACTIVE_SEARCH_CONFIG = SEARCH_CONFIGS.aiWebSearch; // 🔬 Change this to test different approaches\r\n\r\n// Helper function to easily switch config\r\nexport function setActiveSearchMethod(configName: keyof typeof SEARCH_CONFIGS) {\r\n  console.log(`🔬 [SearchConfig] Switching to: ${configName}`);\r\n  return SEARCH_CONFIGS[configName];\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\lib\\locale-utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[685,688],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[685,688],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":19,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1328,1331],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1328,1331],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1618,1621],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1618,1621],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":57,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":124,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3954,3957],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3954,3957],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest } from 'next/server';\r\nimport { routing } from '@/i18n/routing';\r\n\r\n/**\r\n * Extract locale from API request headers\r\n * Uses Accept-Language header and referrer to determine user's preferred locale\r\n */\r\nexport function getLocaleFromRequest(request: NextRequest): string {\r\n  // Try to get locale from referrer URL first (most reliable)\r\n  const referrer = request.headers.get('referer') || request.headers.get('referrer');\r\n  if (referrer) {\r\n    try {\r\n      const url = new URL(referrer);\r\n      const pathSegments = url.pathname.split('/');\r\n      const possibleLocale = pathSegments[1];\r\n      if (possibleLocale && routing.locales.includes(possibleLocale as any)) {\r\n        return possibleLocale;\r\n      }\r\n    } catch (error) {\r\n      // Invalid URL, continue to fallback\r\n    }\r\n  }\r\n\r\n  // Fallback to Accept-Language header\r\n  const acceptLanguage = request.headers.get('accept-language');\r\n  if (acceptLanguage) {\r\n    // Parse Accept-Language header (e.g., \"fr-FR,fr;q=0.9,en;q=0.8\")\r\n    const languages = acceptLanguage\r\n      .split(',')\r\n      .map(lang => lang.split(';')[0].trim().toLowerCase())\r\n      .map(lang => lang.split('-')[0]); // Extract language code only\r\n\r\n    // Find first supported language\r\n    for (const lang of languages) {\r\n      if (routing.locales.includes(lang as any)) {\r\n        return lang;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Default fallback\r\n  return routing.defaultLocale;\r\n}\r\n\r\n/**\r\n * Load messages for a given locale\r\n */\r\nexport async function getMessages(locale: string) {\r\n  // Ensure locale is supported\r\n  if (!routing.locales.includes(locale as any)) {\r\n    locale = routing.defaultLocale;\r\n  }\r\n\r\n  try {\r\n    const messages = await import(`../messages/${locale}.json`);\r\n    return messages.default;\r\n  } catch (error) {\r\n    console.warn(`Failed to load messages for locale ${locale}, falling back to ${routing.defaultLocale}`);\r\n    const fallbackMessages = await import(`../messages/${routing.defaultLocale}.json`);\r\n    return fallbackMessages.default;\r\n  }\r\n}\r\n\r\n/**\r\n * Get language instruction from locale code\r\n * LLMs understand locale codes directly and can respond in any language\r\n */\r\nexport function getLanguageInstruction(locale: string): string {\r\n  // For most cases, just use the locale directly - LLMs understand it\r\n  const localeUpper = locale.toUpperCase();\r\n  \r\n  // Common locale mappings for clarity in prompts\r\n  const languageMap: { [key: string]: string } = {\r\n    'EN': 'English',\r\n    'FR': 'French (Français)', \r\n    'ES': 'Spanish (Español)',\r\n    'DE': 'German (Deutsch)',\r\n    'IT': 'Italian (Italiano)',\r\n    'PT': 'Portuguese (Português)',\r\n    'NL': 'Dutch (Nederlands)',\r\n    'RU': 'Russian (Русский)',\r\n    'JA': 'Japanese (日本語)',\r\n    'KO': 'Korean (한국어)',\r\n    'ZH': 'Chinese (中文)',\r\n    'AR': 'Arabic (العربية)',\r\n    'HI': 'Hindi (हिन्दी)',\r\n    'TR': 'Turkish (Türkçe)',\r\n    'PL': 'Polish (Polski)',\r\n    'SV': 'Swedish (Svenska)',\r\n    'NO': 'Norwegian (Norsk)',\r\n    'DA': 'Danish (Dansk)',\r\n    'FI': 'Finnish (Suomi)',\r\n    'HU': 'Hungarian (Magyar)',\r\n    'CS': 'Czech (Čeština)',\r\n    'SK': 'Slovak (Slovenčina)',\r\n    'UK': 'Ukrainian (Українська)',\r\n    'BG': 'Bulgarian (Български)',\r\n    'RO': 'Romanian (Română)',\r\n    'HR': 'Croatian (Hrvatski)',\r\n    'SR': 'Serbian (Српски)',\r\n    'SL': 'Slovenian (Slovenščina)',\r\n    'ET': 'Estonian (Eesti)',\r\n    'LV': 'Latvian (Latviešu)',\r\n    'LT': 'Lithuanian (Lietuvių)',\r\n    'MT': 'Maltese (Malti)',\r\n    'GA': 'Irish (Gaeilge)',\r\n    'CY': 'Welsh (Cymraeg)',\r\n  };\r\n  \r\n  return languageMap[localeUpper] || `language with locale: ${locale}`;\r\n}\r\n\r\n/**\r\n * Legacy function - kept for compatibility\r\n * @deprecated Use getLanguageInstruction instead\r\n */\r\nexport function getLanguageName(locale: string): string {\r\n  return getLanguageInstruction(locale);\r\n}\r\n\r\n/**\r\n * Get translated text from messages object using dot notation\r\n */\r\nexport function getTranslation(messages: any, key: string, replacements?: Record<string, string>): string {\r\n  const keys = key.split('.');\r\n  let value = messages;\r\n  \r\n  for (const k of keys) {\r\n    if (value && typeof value === 'object' && k in value) {\r\n      value = value[k];\r\n    } else {\r\n      console.warn(`Translation key not found: ${key}`);\r\n      return key; // Return key as fallback\r\n    }\r\n  }\r\n  \r\n  if (typeof value !== 'string') {\r\n    console.warn(`Translation value is not a string: ${key}`);\r\n    return key;\r\n  }\r\n  \r\n  // Apply replacements if provided\r\n  if (replacements) {\r\n    return Object.entries(replacements).reduce((text, [placeholder, replacement]) => {\r\n      return text.replace(new RegExp(`\\\\{${placeholder}\\\\}`, 'g'), replacement);\r\n    }, value);\r\n  }\r\n  \r\n  return value;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\lib\\logger.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[112,115],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[112,115],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[164,167],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[164,167],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[216,219],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[216,219],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[269,272],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[269,272],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[665,668],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[665,668],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[812,815],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[812,815],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[957,960],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[957,960],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1104,1107],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1104,1107],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"type LogLevel = 'debug' | 'info' | 'warn' | 'error';\r\n\r\ninterface Logger {\r\n  debug: (message: string, ...args: any[]) => void;\r\n  info: (message: string, ...args: any[]) => void;\r\n  warn: (message: string, ...args: any[]) => void;\r\n  error: (message: string, ...args: any[]) => void;\r\n}\r\n\r\nconst isProduction = process.env.NODE_ENV === 'production';\r\n\r\n// En production, ne loguer que les warnings et erreurs\r\nconst shouldLog = (level: LogLevel): boolean => {\r\n  if (isProduction) {\r\n    return level === 'warn' || level === 'error';\r\n  }\r\n  return true; // En développement, tout loguer\r\n};\r\n\r\nexport const logger: Logger = {\r\n  debug: (message: string, ...args: any[]) => {\r\n    if (shouldLog('debug')) {\r\n      console.log(`[DEBUG] ${message}`, ...args);\r\n    }\r\n  },\r\n  \r\n  info: (message: string, ...args: any[]) => {\r\n    if (shouldLog('info')) {\r\n      console.log(`[INFO] ${message}`, ...args);\r\n    }\r\n  },\r\n  \r\n  warn: (message: string, ...args: any[]) => {\r\n    if (shouldLog('warn')) {\r\n      console.warn(`[WARN] ${message}`, ...args);\r\n    }\r\n  },\r\n  \r\n  error: (message: string, ...args: any[]) => {\r\n    if (shouldLog('error')) {\r\n      console.error(`[ERROR] ${message}`, ...args);\r\n    }\r\n  }\r\n};\r\n\r\n// Export par défaut pour faciliter l'import\r\nexport default logger;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\lib\\openai-web-search.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'extractTokensFromUsage' is defined but never used.","line":3,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'languageName' is assigned a value but never used.","line":74,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'parseError' is defined but never used.","line":128,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":128,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":299,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":299,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11256,11259],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11256,11259],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":420,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":420,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16080,16083],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16080,16083],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":423,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":423,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16169,16172],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16169,16172],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":424,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":424,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16254,16257],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16254,16257],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":425,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":425,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16320,16323],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16320,16323],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":426,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":426,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16380,16383],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16380,16383],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":427,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":427,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16423,16426],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16423,16426],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":428,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":428,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16490,16493],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16490,16493],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":429,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":429,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16540,16543],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16540,16543],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":430,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":430,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16608,16611],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16608,16611],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":434,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":434,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16703,16706],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16703,16706],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":435,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":435,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16762,16765],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16762,16765],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":437,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":437,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16861,16864],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16861,16864],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'snippet' is assigned a value but never used.","line":470,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":470,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":482,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":482,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18720,18723],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18720,18723],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":483,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":483,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18812,18815],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18812,18815],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":504,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":504,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19560,19563],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19560,19563],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":551,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":551,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21416,21419],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21416,21419],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":576,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":576,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22033,22036],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22033,22036],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'brandNameLower' is assigned a value but never used.","line":641,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":641,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":682,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":682,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26429,26432],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26429,26432],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'brandNameLower' is assigned a value but never used.","line":695,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":695,"endColumn":25}],"suppressedMessages":[],"errorCount":25,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import OpenAI from 'openai';\nimport { AIResponse } from './types';\nimport { apiUsageTracker, extractTokensFromUsage, estimateCost } from './api-usage-tracker';\n\n/**\n * Extract brand name from complex brand strings\n * Focus on the actual brand, not the product\n */\nfunction extractBrandName(brandString: string): string {\n  let brand = brandString.trim();\n  \n  // Handle parentheses format like \"Citroën (Ami)\" -> \"Citroën\"\n  const parenthesesMatch = brand.match(/^([^(]+)\\s*\\(/);\n  if (parenthesesMatch) {\n    brand = parenthesesMatch[1].trim();\n  }\n  \n  // Handle comma format like \"Renault, Twizy\" -> \"Renault\"\n  const commaMatch = brand.match(/^([^,]+),/);\n  if (commaMatch) {\n    brand = commaMatch[1].trim();\n  }\n  \n  return brand;\n}\n\n/**\n * Create simple variations for basic brand names (case, accents)\n * For complex multi-word brands, use AI-powered detection\n */\nfunction createSimpleBrandVariations(brandString: string): string[] {\n  const coreBrand = extractBrandName(brandString);\n  const variations = new Set<string>();\n  \n  // Add original\n  variations.add(coreBrand);\n  \n  // Add lowercase\n  const lower = coreBrand.toLowerCase();\n  variations.add(lower);\n  \n  // Add without accents\n  const normalized = lower\n    .normalize('NFD')\n    .replace(/[\\u0300-\\u036f]/g, '');\n  if (normalized !== lower) {\n    variations.add(normalized);\n  }\n  \n  // Add uppercase version of normalized\n  if (normalized !== lower) {\n    variations.add(normalized.charAt(0).toUpperCase() + normalized.slice(1));\n  }\n  \n  return Array.from(variations).filter(v => v.length > 1);\n}\n\n/**\n * Use OpenAI to generate smart brand variations for complex multi-word brands\n * This handles cases like \"Silence Urban Mobility\" → [\"Silence Urban Mobility\", \"Silence\", \"silence\"]\n */\nexport async function createAIBrandVariations(\n  brandString: string,\n  locale?: string,\n  model: string = 'gpt-4o-mini'\n): Promise<string[]> {\n  const coreBrand = extractBrandName(brandString);\n  \n  // For simple single-word brands, use the simple function\n  if (!coreBrand.includes(' ') || coreBrand.split(/\\s+/).length <= 2) {\n    return createSimpleBrandVariations(brandString);\n  }\n  \n  const languageName = locale ? getLanguageName(locale) : 'English';\n  \n  const prompt = `Analyze this brand name and generate search variations for brand detection.\n\nBrand: \"${coreBrand}\"\n\nGenerate variations that would help detect this brand in text, focusing on:\n1. The full brand name\n2. The distinctive part(s) that are NOT generic terms (avoid words like \"Urban\", \"Mobility\", \"Systems\", \"Solutions\", \"Technologies\", \"Group\", \"International\", \"Global\", \"Worldwide\", \"The\", \"And\", \"Of\", \"For\", \"Inc\", \"LLC\", \"Corp\")\n3. Different cases (original, lowercase, proper case)\n\nExamples:\n- \"Silence Urban Mobility\" → [\"Silence Urban Mobility\", \"Silence\", \"silence\"]\n- \"Clean Motion Technologies\" → [\"Clean Motion Technologies\", \"Clean Motion\", \"clean motion\", \"CleanMotion\", \"cleanmotion\"]\n- \"XEV YoYo\" → [\"XEV YoYo\", \"XEV\", \"xev\", \"YoYo\", \"yoyo\"]\n\nReturn ONLY a JSON array of strings, no other text.`;\n\n  try {\n    const openai = getOpenAIClient();\n    const response = await openai.chat.completions.create({\n      model,\n      messages: [\n        {\n          role: 'system',\n          content: `You are a brand detection expert. Generate search variations for brand names, focusing on distinctive parts while avoiding generic terms. Return only valid JSON arrays.`\n        },\n        {\n          role: 'user',\n          content: prompt\n        }\n      ],\n      temperature: 0.1,\n      max_tokens: 200\n    });\n\n    let content = response.choices[0]?.message?.content?.trim();\n    if (!content) {\n      console.warn('No content from OpenAI brand variations');\n      return createSimpleBrandVariations(brandString);\n    }\n\n    // Try to parse JSON response\n    try {\n      // Remove optional markdown fences ```json ... ``` if present\n      if (content.startsWith('```')) {\n        content = content.replace(/^```[a-zA-Z]*\\n/, '').replace(/\\n```$/, '').trim();\n      }\n      const variations = JSON.parse(content);\n      if (Array.isArray(variations) && variations.every(v => typeof v === 'string')) {\n        const filtered = filterBrandVariations(coreBrand, variations);\n        console.log(`🤖 [AI Brand Variations] ${coreBrand} → [${filtered.join(', ')}]`);\n        return filtered;\n      }\n    } catch (parseError) {\n      console.warn('Failed to parse OpenAI brand variations JSON:', content);\n    }\n  } catch (error) {\n    console.warn('OpenAI brand variations failed:', error);\n  }\n  \n  // Fallback to simple variations (filtered)\n  return filterBrandVariations(coreBrand, createSimpleBrandVariations(brandString));\n}\n\n/**\n * Create smart variations of a brand name for better detection\n * Uses hybrid approach: simple variations for basic brands, AI for complex ones\n */\nasync function createSmartBrandVariations(brandString: string, locale?: string): Promise<string[]> {\n  const coreBrand = extractBrandName(brandString);\n  \n  // For simple brands (1-2 words), use deterministic approach\n  if (!coreBrand.includes(' ') || coreBrand.split(/\\s+/).length <= 2) {\n    return createSimpleBrandVariations(brandString);\n  }\n  \n  // For complex multi-word brands, use AI\n  return createAIBrandVariations(brandString, locale);\n}\nimport { getLanguageName } from './locale-utils';\n\n// Filtre les variantes génériques pour les marques multi-mots (ex: évite \"Silence\", \"Mobility\")\nfunction filterBrandVariations(coreBrand: string, variations: string[]): string[] {\n  const coreWords = coreBrand.trim().split(/\\s+/).filter(Boolean);\n  const isMultiWord = coreWords.length >= 2;\n  const coreLower = coreBrand.toLowerCase();\n  const genericSingles = new Set<string>([\n    'the','and','of','for','group','international','global','worldwide','inc','llc','corp','corporation','ltd','limited','sa','sas','gmbh','plc','bv','ag',\n    'urban','mobility','ecomobility','systems','solutions','technologies','technology'\n  ]);\n\n  const keep = new Set<string>();\n  for (const v of (variations || [])) {\n    if (!v || typeof v !== 'string') continue;\n    const vv = v.trim();\n    if (vv.length <= 1) continue;\n\n    const vvLower = vv.toLowerCase();\n    // Toujours garder le nom complet\n    if (vvLower === coreLower) { keep.add(vv); continue; }\n\n    const wordCount = vv.split(/\\s+/).filter(Boolean).length;\n    if (isMultiWord) {\n      // Interdit les variantes mono-mot sauf acronyme plausible (MAJUSCULES, <=5)\n      if (wordCount === 1) {\n        const isAcronym = /^[A-Z0-9]{2,5}$/.test(vv);\n        if (!isAcronym) continue;\n        if (genericSingles.has(vvLower)) continue;\n      }\n    }\n\n    if (wordCount === 1 && genericSingles.has(vvLower)) continue;\n\n    keep.add(vv);\n  }\n\n  if (![...keep].some(x => x.toLowerCase() === coreLower)) {\n    keep.add(coreBrand);\n  }\n  return Array.from(keep);\n}\n\n// Utility: get hostname from URL (without www)\nfunction hostnameFromUrl(url: string): string {\n  try {\n    const { hostname } = new URL(url);\n    return hostname.replace(/^www\\./i, '') || hostname;\n  } catch {\n    return 'Source web';\n  }\n}\n\n// Utility: trim snippet without cutting mid-word\nfunction trimAtWord(input: string, limit: number): string {\n  if (!input) return '';\n  if (input.length <= limit) return input;\n  const slice = input.slice(0, limit);\n  const lastSpace = slice.lastIndexOf(' ');\n  return (lastSpace > 40 ? slice.slice(0, lastSpace) : slice).trim();\n}\n\n/**\n * OpenAI Web Search Implementation using the Responses API\n * Documentation: https://platform.openai.com/docs/guides/tools-web-search?api-mode=responses\n */\n\n// Initialize OpenAI client\nlet openaiClient: OpenAI | null = null;\n\nfunction getOpenAIClient(): OpenAI {\n  if (!openaiClient) {\n    if (!process.env.OPENAI_API_KEY) {\n      throw new Error('OPENAI_API_KEY not configured');\n    }\n    openaiClient = new OpenAI({\n      apiKey: process.env.OPENAI_API_KEY,\n    });\n  }\n  return openaiClient;\n}\n\n/**\n * Models that support web search via responses API\n */\nconst WEB_SEARCH_SUPPORTED_MODELS = [\n  'gpt-4o',\n  'gpt-4o-mini'\n];\n\n/**\n * Canonicalize a list of raw brand names using OpenAI.\n */\nexport async function canonicalizeBrandsWithOpenAI(\n  rawNames: string[],\n  locale?: string,\n  model: string = 'gpt-4o-mini'\n): Promise<{ canonicalNames: string[]; mapping: Record<string, string>; alternatives: Record<string, string[]> }> {\n  const client = getOpenAIClient();\n  const languageName = locale ? getLanguageName(locale) : 'English';\n\n  const unique = Array.from(new Set((rawNames || []).filter(Boolean)));\n  if (unique.length === 0) {\n    return { canonicalNames: [], mapping: {}, alternatives: {} };\n  }\n\n  const instruction = `You are a brand normalization engine. Given a list of raw company/brand strings, output canonical brand names with their common alternative names.\\n\\nRules:\\n- Collapse corporate suffixes: Inc, LLC, Corp, Corporation, Ltd, Limited, SA, SAS, GmbH, PLC, BV, AG\\n- Remove geography/organization qualifiers like International, Global, Europe, USA, EU, Group, Holdings\\n- Remove product models/lines and anything in parentheses or after commas\\n- Treat different brands as distinct even if similar (e.g., \"Ginette\" is a brand; \"NY\" alone is NOT a brand and must not be mapped to Ginette)\\n- Keep the brand root: \"Renault Sport\", \"Renault International\" -> \"Renault\"; \"Ginette NY\", \"Ginette\" -> \"Ginette\"; but do NOT map \"NY\" -> \"Ginette\"\\n- Preserve diacritics/accents when known; otherwise return a natural Title Case canonicalization\\n\\nFor each brand, also provide common alternative names/shortcuts that people use:\\n- Patek Philippe -> \"Patek\"\\n- Louis Vuitton -> \"LV\"\\n- Christian Dior -> \"Dior\"\\n- Mercedes-Benz -> \"Mercedes\"\\n- Harley-Davidson -> \"Harley\"\\n- McDonald's -> \"McDo\", \"McDonald's\"\\n- BMW -> \"BMW\" (no common alternative)\\n- Apple -> \"Apple\" (no common alternative)\\n\\nReturn STRICT JSON with keys: canonicalNames (unique list), mapping (object from raw to canonical), alternatives (object from canonical to array of alternative names). Do not include any extra keys.\\n\\nLanguage for free-text (if needed): ${languageName}`;\n\n  const user = `Raw brands:\\n${unique.map((n, i) => `${i + 1}. ${n}`).join('\\n')}`;\n\n  try {\n    // Track API call for brand canonicalization\n    const callId = apiUsageTracker.trackCall({\n      provider: 'openai',\n      model: model,\n      operation: 'analysis',\n      success: true,\n      metadata: { \n        step: 'brand_canonicalization',\n        brandsCount: unique.length,\n        locale\n      }\n    });\n\n    const startTime = Date.now();\n    const res = await client.chat.completions.create({\n      model,\n      messages: [\n        { role: 'system', content: instruction },\n        { role: 'user', content: user }\n      ],\n      response_format: { type: 'json_object' },\n      temperature: 0.2,\n    });\n    const duration = Date.now() - startTime;\n\n    // Update API call with actual usage\n    apiUsageTracker.updateCall(callId, {\n      inputTokens: res.usage?.prompt_tokens || 0,\n      outputTokens: res.usage?.completion_tokens || 0,\n      cost: estimateCost('openai', model, res.usage?.prompt_tokens || 0, res.usage?.completion_tokens || 0),\n      duration\n    });\n\n    const content = res.choices[0]?.message?.content || '{}';\n    const parsed: any = JSON.parse(content);\n    const mapping: Record<string, string> = parsed?.mapping || {};\n    const canonicalNames: string[] = parsed?.canonicalNames || [];\n    const alternatives: Record<string, string[]> = parsed?.alternatives || {};\n\n    // Safety net: ensure mapping for each input\n    for (const raw of unique) {\n      if (!mapping[raw]) {\n        const base = extractBrandName(raw)\n          .toLowerCase()\n          .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\n          .replace(/\\s*(inc|llc|corp|corporation|ltd|limited|sa|sas|gmbh|plc|bv|ag|international|global|group|holdings)\\b/gi, '')\n          .replace(/\\s*\\([^)]*\\)\\s*/g, ' ')\n          .replace(/,.*$/, '')\n          .replace(/\\s+/g, ' ')\n          .trim();\n        const title = base.split(' ').map(w => w ? w[0].toUpperCase() + w.slice(1) : '').join(' ').trim() || raw;\n        mapping[raw] = title;\n        if (!canonicalNames.includes(title)) canonicalNames.push(title);\n        // Add empty alternatives array if not present\n        if (!alternatives[title]) alternatives[title] = [];\n      }\n    }\n\n    const seen = new Set<string>();\n    const dedup = canonicalNames.filter(n => (seen.has(n) ? false : (seen.add(n), true)));\n\n    console.log('[Brand Canonicalizer] Input:', unique);\n    console.log('[Brand Canonicalizer] Mapping:', mapping);\n    console.log('[Brand Canonicalizer] Canonical:', dedup);\n    console.log('[Brand Canonicalizer] Alternatives:', alternatives);\n\n    return { canonicalNames: dedup, mapping, alternatives };\n  } catch (e) {\n    console.warn('[Brand Canonicalizer] Failed, fallback to identity mapping:', (e as Error)?.message);\n    return { \n      canonicalNames: unique, \n      mapping: Object.fromEntries(unique.map(n => [n, n])), \n      alternatives: Object.fromEntries(unique.map(n => [n, []])) \n    };\n  }\n}\n\n/**\n * Analyze prompt with OpenAI using web search\n */\nexport async function analyzePromptWithOpenAIWebSearch(\n  originalPrompt: string,\n  brandName: string,\n  competitors: string[],\n  locale?: string,\n  model: string = 'gpt-4o-mini'\n): Promise<AIResponse> {\n  const client = getOpenAIClient();\n  const languageName = locale ? getLanguageName(locale) : 'English';\n\n  // Ensure the model supports web search\n  if (!WEB_SEARCH_SUPPORTED_MODELS.includes(model)) {\n    console.warn(`Model ${model} does not support web search, falling back to gpt-4o-mini`);\n    model = 'gpt-4o-mini';\n  }\n\n  // Enhanced prompt for web search - do not ask model to append sources section in text\n  const enhancedPrompt = `IMPORTANT: You must search the web for current, factual information to answer this question. Do not rely on your training data alone.\n\nQuestion: ${originalPrompt}\n\nPlease search for recent information, current rankings, and up-to-date data to provide an accurate and current response. Do not append any explicit \"Sources consultées\" section to the text.\n\nIMPORTANT: Keep your response concise and under 800 tokens. Prioritize the most important information and rankings.\n\nReturn the content in ${languageName} language.`;\n\n  try {\n    console.log(`[OpenAI Web Search] Starting analysis with model: ${model}`);\n    console.log(`[OpenAI Web Search] Prompt preview: \"${enhancedPrompt.substring(0, 100)}...\"`);\n\n    // Track API call for web search analysis\n    const callId = apiUsageTracker.trackCall({\n      provider: 'openai',\n      model: model,\n      operation: 'analysis',\n      success: true,\n      metadata: { \n        type: 'web_search',\n        brandName,\n        competitorsCount: competitors.length,\n        locale\n      }\n    });\n\n    const startTime = Date.now();\n    // Use OpenAI Responses API with web search\n    const response = await client.responses.create({\n      model: model,\n      tools: [\n        { type: \"web_search\" }\n      ],\n      input: enhancedPrompt,\n      temperature: 0.7,\n      max_output_tokens: 800,\n    });\n    const duration = Date.now() - startTime;\n\n    // Update API call with duration (tokens not available from responses API)\n    apiUsageTracker.updateCall(callId, {\n      duration,\n      // Estimate tokens based on response length\n      inputTokens: Math.ceil(enhancedPrompt.length / 4), // Rough estimation\n      outputTokens: Math.ceil((response.output_text?.length || 0) / 4),\n      cost: estimateCost('openai', model, Math.ceil(enhancedPrompt.length / 4), Math.ceil((response.output_text?.length || 0) / 4))\n    });\n\n    console.log(`[OpenAI Web Search] Response received. Length: ${response.output_text?.length || 0}`);\n    \n    if (!response.output_text || response.output_text.length === 0) {\n      console.error(`[OpenAI Web Search] ERROR: Empty response for prompt: \"${originalPrompt}\"`);\n      throw new Error('OpenAI returned empty response');\n    }\n\n    // Extract web search sources from multiple possible locations\n    const webSearchSources: any[] = [];\n    \n    // Method 1: Check standard API response paths\n    if ((response as any).web_search_call?.action?.sources) {\n      webSearchSources.push(...(response as any).web_search_call.action.sources);\n    } else if ((response as any).sources) {\n      webSearchSources.push(...(response as any).sources);\n    } else if ((response as any).search_results) {\n      webSearchSources.push(...(response as any).search_results);\n    } else if ((response as any).output?.sources) {\n      webSearchSources.push(...(response as any).output.sources);\n    }\n    \n    // Method 2: Check annotations field\n    if ((response as any).annotations) {\n      const annotations = (response as any).annotations;\n      if (Array.isArray(annotations)) {\n        annotations.forEach((annotation: any) => {\n          if (annotation.type === 'citation' || annotation.url) {\n            webSearchSources.push({\n              url: annotation.url || annotation.source,\n              title: annotation.title || annotation.text || 'Citation',\n              type: 'annotation'\n            });\n          }\n        });\n      }\n    }\n    \n    // Method 3: Extract sources from the response text itself\n    const responseText = response.output_text;\n    // Clean any inline sources section so it won't render in UI\n    const cleanedText = responseText.replace(/\\n?Sources consultées?:[\\s\\S]*$/i, '').trim();\n    \n    // Method 4: Extract URLs from anywhere in the response text with context\n    if (webSearchSources.length === 0) {\n      const allUrls = cleanedText.match(/https?:\\/\\/[^\\s\\)]+/g);\n      if (allUrls) {\n        allUrls.forEach((url: string) => {\n          const cleanUrl = url.replace(/[.,;)]+$/, '');\n          \n          // Try to extract context around the URL\n          const urlIndex = cleanedText.indexOf(url);\n          const contextStart = Math.max(0, urlIndex - 100);\n          const contextEnd = Math.min(cleanedText.length, urlIndex + url.length + 100);\n          const context = cleanedText.substring(contextStart, contextEnd);\n          \n          // Extract a meaningful snippet (clean, not mid-word)\n          const sentences = context.split(/[.!?]+/);\n          const relevantSentence = sentences.find(s => s.includes(url)) || sentences[0];\n          const snippet = relevantSentence ? trimAtWord(relevantSentence.trim(), 200) : 'Source trouvée dans la réponse';\n          \n          webSearchSources.push({ \n            url: cleanUrl, \n            domain: hostnameFromUrl(cleanUrl),\n            type: 'url_extraction'\n          });\n        });\n      }\n    }\n    \n    // Method 5: Check reasoning field for sources\n    if ((response as any).reasoning && webSearchSources.length === 0) {\n      const reasoningText = (response as any).reasoning;\n      if (typeof reasoningText === 'string') {\n        const urlMatches = reasoningText.match(/https?:\\/\\/[^\\s)]+/g);\n        if (urlMatches) {\n          urlMatches.forEach((url: string) => {\n            webSearchSources.push({ \n              url, \n              domain: 'Source from reasoning',\n              type: 'reasoning'\n            });\n          });\n        }\n      }\n    }\n\n    console.log(`[OpenAI Web Search] Web search sources found: ${webSearchSources.length}`);\n    if (webSearchSources.length > 0) {\n      console.log(`[OpenAI Web Search] Sources:`, webSearchSources.map(s => s.url || s.domain).join(', '));\n    }\n    \n    // For debugging, show if web search was actually used\n    const reasoningText = (response as any).reasoning;\n    const webSearchUsed = responseText.includes('recherche') || \n                         responseText.includes('récent') ||\n                         responseText.includes('2024') ||\n                         responseText.includes('Sources consultées') ||\n                         responseText.includes('selon') ||\n                         (typeof reasoningText === 'string' && reasoningText.includes('search'));\n    console.log(`[OpenAI Web Search] Web search appears to have been used: ${webSearchUsed}`);\n\n    // Analyze the response for brand mentions and rankings\n    const analysisResult = await analyzeResponseContent(\n      cleanedText,\n      brandName,\n      competitors,\n      languageName,\n      client,\n      locale\n    );\n\n    return {\n      provider: 'OpenAI',\n      prompt: originalPrompt, // Keep the original prompt for proper frontend matching\n      response: cleanedText,\n      rankings: analysisResult.rankings,\n      competitors: analysisResult.competitors,\n      brandMentioned: analysisResult.brandMentioned,\n      brandPosition: analysisResult.brandPosition,\n      sentiment: analysisResult.sentiment,\n      confidence: analysisResult.confidence,\n      timestamp: new Date(),\n      webSearchSources: webSearchSources,\n    };\n\n  } catch (error) {\n    console.error('[OpenAI Web Search] Error:', error);\n    \n    // Check if it's an authentication error\n    const isAuthError = error instanceof Error && (\n      error.message.includes('401') || \n      error.message.includes('invalid_api_key') ||\n      error.message.includes('Authorization Required') ||\n      error.message.includes('authentication_error') ||\n      error.message.includes('Incorrect API key')\n    );\n    \n    if (isAuthError) {\n      console.log('[OpenAI Web Search] Authentication error - returning null to skip this provider');\n      return null as any;\n    }\n    \n    // For other errors, log but don't return null - let the error bubble up\n    console.error('[OpenAI Web Search] Non-auth error occurred:', {\n      message: error instanceof Error ? error.message : 'Unknown error',\n      type: typeof error,\n      stack: error instanceof Error ? error.stack : undefined\n    });\n    \n    throw error;\n  }\n}\n\n/**\n * Analyze the response content for brand mentions and rankings\n */\nasync function analyzeResponseContent(\n  text: string,\n  brandName: string,\n  competitors: string[],\n  languageName: string,\n  client: OpenAI,\n  locale?: string\n): Promise<{\n  rankings: any[];\n  competitors: string[];\n  brandMentioned: boolean;\n  brandPosition?: number;\n  sentiment: 'positive' | 'neutral' | 'negative';\n  confidence: number;\n}> {\n  const analysisPrompt = `Analyze this AI response about ${brandName} and its competitors:\n\nResponse: \"${text}\"\n\nYour task:\n1. Look for ANY mention of ${brandName} anywhere in the response (even if not ranked)\n2. Look for ANY mention of these competitors: ${competitors.join(', ')}\n3. For each mentioned company, determine if it has a specific ranking position\n4. Identify the sentiment towards each mentioned company\n5. Rate your confidence in this analysis (0-1)\n\nIMPORTANT: A company is \"mentioned\" if it appears anywhere in the response text, even without a specific ranking. Count ALL mentions, not just ranked ones. Return the analysis in ${languageName} language.\n\nBe very thorough in detecting company names - they might appear in different contexts (listed, compared, recommended, etc.)\n\nPlease respond in JSON format with the following structure:\n{\n  \"rankings\": [{\"position\": number, \"company\": string, \"reason\": string, \"sentiment\": \"positive|neutral|negative\"}],\n  \"analysis\": {\n    \"brandMentioned\": boolean,\n    \"brandPosition\": number | null,\n    \"competitors\": string[],\n    \"overallSentiment\": \"positive|neutral|negative\",\n    \"confidence\": number\n  }\n}`;\n\n  try {\n    // Use standard chat completion for analysis (faster and more reliable)\n    const analysisResponse = await client.chat.completions.create({\n      model: 'gpt-4o-mini',\n      messages: [\n        {\n          role: 'system',\n          content: 'You are an expert at analyzing text and extracting structured information about companies and rankings. Always respond with valid JSON.'\n        },\n        {\n          role: 'user',\n          content: analysisPrompt\n        }\n      ],\n      temperature: 0.3,\n      response_format: { type: \"json_object\" }\n    });\n\n    const analysisText = analysisResponse.choices[0]?.message?.content;\n    if (!analysisText) {\n      console.warn('[OpenAI Web Search] No analysis response received, falling back to text analysis');\n      throw new Error('No analysis response received');\n    }\n\n    const analysisData = JSON.parse(analysisText);\n    \n    console.log('[OpenAI Web Search] Structured analysis successful');\n    \n    // Enhanced brand detection fallback (same as ai-utils-enhanced.ts)\n    // Apply robust detection logic even after successful structured analysis\n    const textLower = text.toLowerCase();\n    const brandNameLower = brandName.toLowerCase();\n    \n    // Enhanced brand detection with smart variations\n    const brandVariations = await createSmartBrandVariations(brandName, locale);\n    const enhancedBrandMentioned = analysisData.analysis?.brandMentioned || \n      brandVariations.some(variation => textLower.includes(variation));\n      \n    // Add any missed competitors from text search with smart variations\n    const aiCompetitors = new Set<string>((analysisData.analysis?.competitors || []) as string[]);\n    const allMentionedCompetitors = new Set<string>([...aiCompetitors]);\n    \n    for (const competitor of competitors) {\n      const competitorVariations = await createSmartBrandVariations(competitor, locale);\n      const found = competitorVariations.some(variation => textLower.includes(variation));\n      \n      if (found) {\n        allMentionedCompetitors.add(competitor);\n      }\n    }\n\n    // Filter competitors to only include the ones we're tracking\n    const relevantCompetitors = Array.from(allMentionedCompetitors).filter(c => \n      competitors.includes(c) && c !== brandName\n    );\n    \n    try {\n      const brandTerms = await createSmartBrandVariations(brandName, locale);\n      const competitorTermsMap: Record<string, string[]> = {};\n      for (const c of competitors) {\n        competitorTermsMap[c] = await createSmartBrandVariations(c, locale);\n      }\n      console.log('🔎 [OpenAI Web Search Detection] Terms used:');\n      console.log('  • Brand:', brandName, '→', brandTerms);\n      console.log('  • Competitors:', competitorTermsMap);\n      console.log('  • Found brandMentioned:', enhancedBrandMentioned);\n      console.log('  • Found competitors:', Array.from(allMentionedCompetitors));\n    } catch (e) {\n      console.warn('🔎 [OpenAI Web Search Detection] Log terms failed:', e);\n    }\n    \n    return {\n      rankings: (analysisData.rankings || []) as any[],\n      competitors: relevantCompetitors,\n      brandMentioned: enhancedBrandMentioned,\n      brandPosition: analysisData.analysis?.brandPosition || undefined,\n      sentiment: analysisData.analysis?.overallSentiment || 'neutral',\n      confidence: analysisData.analysis?.confidence || 0.5,\n    };\n\n  } catch (error) {\n    console.error('[OpenAI Web Search] Structured analysis failed, using fallback:', error);\n    \n    // Fallback to basic text analysis\n    const textLower = text.toLowerCase();\n    const brandNameLower = brandName.toLowerCase();\n    \n    // Enhanced brand detection with smart variations (fallback)\n    const brandVariations = await createSmartBrandVariations(brandName, locale);\n    const mentioned = brandVariations.some(variation => textLower.includes(variation));\n      \n    // Enhanced competitor detection with smart variations (fallback)\n    const detectedCompetitors: string[] = [];\n    for (const c of competitors) {\n      const competitorVariations = await createSmartBrandVariations(c, locale);\n      if (competitorVariations.some(variation => textLower.includes(variation))) {\n        detectedCompetitors.push(c);\n      }\n    }\n    \n    return {\n      rankings: [],\n      competitors: detectedCompetitors,\n      brandMentioned: mentioned,\n      brandPosition: undefined,\n      sentiment: 'neutral' as const,\n      confidence: 0.5,\n    };\n  }\n}\n\n/**\n * Check if OpenAI web search is available\n */\nexport function isOpenAIWebSearchAvailable(): boolean {\n  return !!process.env.OPENAI_API_KEY;\n}\n\n/**\n * Get available models that support web search\n */\nexport function getWebSearchSupportedModels(): string[] {\n  return [...WEB_SEARCH_SUPPORTED_MODELS];\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\lib\\prompt-generation.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":63,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { generateText } from 'ai';\r\nimport { getProviderModel } from './provider-config';\r\nimport { getLanguageName } from './locale-utils';\r\nimport { apiUsageTracker, extractTokensFromUsage, estimateCost } from './api-usage-tracker';\r\nimport { logger } from './logger';\r\n\r\ninterface PromptGenerationCompanyInfo {\r\n  name: string;\r\n  industry?: string;\r\n  description?: string;\r\n  website?: string;\r\n}\r\n\r\nexport interface PromptGenerationOptions {\r\n  targetBrand: string;\r\n  companyInfo: PromptGenerationCompanyInfo;\r\n  competitors?: string[];\r\n  locale?: string;\r\n  maxPrompts?: number;\r\n}\r\n\r\nexport interface PromptGenerationResult {\r\n  prompts: string[];\r\n  provider: string;\r\n  rawResponse: string;\r\n}\r\n\r\ninterface ProviderAttempt {\r\n  id: 'openai' | 'anthropic' | 'google';\r\n  model: string;\r\n}\r\n\r\nconst PROVIDER_ATTEMPTS: ProviderAttempt[] = [\r\n  { id: 'openai', model: 'gpt-4o' },\r\n  { id: 'anthropic', model: 'claude-3-5-haiku-20241022' },\r\n  { id: 'google', model: 'gemini-1.5-flash' }\r\n];\r\n\r\nfunction buildCompanyContext({ name, industry, description, website }: PromptGenerationCompanyInfo): string {\r\n  const lines: string[] = [`Target Company: ${name}`];\r\n  if (industry) lines.push(`Industry: ${industry}`);\r\n  if (description) lines.push(`Description: ${description}`);\r\n  if (website) lines.push(`Website: ${website}`);\r\n  return `${lines.join('\\n')}`;\r\n}\r\n\r\nfunction buildPrompt(targetBrand: string, companyInfo: PromptGenerationCompanyInfo, competitors: string[], languageName: string): string {\r\n  const competitorList = competitors.filter(Boolean).join(', ');\r\n  const companyContext = `${buildCompanyContext(companyInfo)}\\n\\nCompetitor Brands: ${competitorList || 'None provided'}`;\r\n\r\n  return `You are an expert in brand GEO (Generative Engine Optimization), specialized in how Large Language Models surface and recommend products or services.\\n\\nBased on the company information provided below, analyze the business context and determine what industry/sector this company operates in. Then generate the 8 most searched-for, high-intent natural language queries that potential customers in that industry are most likely to type.\\n\\nCompany Context:\\n${companyContext}\\n\\nCurrent year: ${new Date().getFullYear()}\\n\\n## TASK\\n1/ Research the company's specific segment and USP (determine this from the Company Context provided, be very specific)\\ni.e ; Speedbike market in Europ VS electric bike, boutique hotels in Paris VS worldwide hotel chain, independant watch manufacturer VS watch retailer, etc.\\n\\n2/ Write queries\\nThe goal is to reveal how consumers might frame requests where LLMs are most likely to provide product/service recommendations, so ${targetBrand} can better understand its visibility and positioning relative to competitors.\\n\\nReturn ONLY the result as a valid JSON array in the following format:\\n[\"string1\", \"string2\", \"string3\", \"string4\", \"string5\", \"string6\", \"string7\", \"string8\"]\\n\\nMake sure the queries are:\\n- Natural and conversational\\n- They will naturally lead to an answer where brands are mentioned (avoid questions where brand names will not be mentioned in the answer)\\n- High-intent (looking for recommendations)\\n- Relevant to the company's specific segment and USP (determine this from the Company Context provided, be very specific)\\n- Varied in approach (some general requests, some product/service requests, some specific needs)\\n- Not referencing any company name or brand directly to avoid false positives\\n- Written in ${languageName}\\n\\nExamples of good queries:\\n- \"I am a beginner in running, which shoes should I buy?\"\\n- \"I am building a marketplace, what payment platform should I use?\"\\n- \"What are the best tools I should use as a digital nomad?\"\\n- \"What's the most reliable web scraping tool in 2025?\"\\n\\nIMPORTANT ! \\n1/ Make sure the queries lead to an answer where brands are mentioned\\n2/ Return the content in ${languageName} language.`;\r\n}\r\n\r\nfunction parsePromptsFromResponse(responseText: string): string[] {\r\n  const match = responseText.trim().match(/\\[[\\s\\S]*\\]/);\r\n  if (!match) {\r\n    throw new Error('Failed to locate JSON array in AI response');\r\n  }\r\n\r\n  let parsed: unknown;\r\n  try {\r\n    parsed = JSON.parse(match[0]);\r\n  } catch (error) {\r\n    throw new Error('Failed to parse AI response as JSON');\r\n  }\r\n\r\n  if (!Array.isArray(parsed)) {\r\n    throw new Error('AI response is not a JSON array');\r\n  }\r\n\r\n  return parsed\r\n    .filter(item => typeof item === 'string')\r\n    .map(item => (item as string).trim())\r\n    .filter(Boolean);\r\n}\r\n\r\nexport async function generateBrandQueryPrompts({\r\n  targetBrand,\r\n  companyInfo,\r\n  competitors = [],\r\n  locale,\r\n  maxPrompts = 8\r\n}: PromptGenerationOptions): Promise<PromptGenerationResult> {\r\n  const normalizedBrand = targetBrand?.trim();\r\n  if (!normalizedBrand) {\r\n    throw new Error('Target brand is required for prompt generation');\r\n  }\r\n\r\n  const languageName = getLanguageName(locale);\r\n  const prompt = buildPrompt(normalizedBrand, companyInfo, competitors, languageName);\r\n  const competitorCount = competitors.length;\r\n\r\n  for (const attempt of PROVIDER_ATTEMPTS) {\r\n    const model = getProviderModel(attempt.id, attempt.model);\r\n\r\n    if (!model) {\r\n      logger.warn(`[PromptGeneration] Provider ${attempt.id} not available, skipping`);\r\n      continue;\r\n    }\r\n\r\n    const callId = apiUsageTracker.trackCall({\r\n      provider: attempt.id,\r\n      model: attempt.model,\r\n      operation: 'prompt_generation',\r\n      success: true,\r\n      metadata: {\r\n        targetBrand: normalizedBrand,\r\n        competitorsCount: competitorCount,\r\n        language: languageName,\r\n        providerRank: `${attempt.id}-${attempt.model}`\r\n      }\r\n    });\r\n\r\n    try {\r\n      const startTime = Date.now();\r\n      const response = await generateText({\r\n        model,\r\n        prompt,\r\n        temperature: 0.7,\r\n        maxTokens: 600\r\n      });\r\n      const duration = Date.now() - startTime;\r\n\r\n      const tokens = extractTokensFromUsage(response.usage);\r\n      apiUsageTracker.updateCall(callId, {\r\n        inputTokens: tokens.inputTokens,\r\n        outputTokens: tokens.outputTokens,\r\n        cost: estimateCost(attempt.id, attempt.model, tokens.inputTokens, tokens.outputTokens),\r\n        duration\r\n      });\r\n\r\n      const prompts = parsePromptsFromResponse(response.text).slice(0, maxPrompts);\r\n\r\n      if (prompts.length === 0) {\r\n        throw new Error('AI provider returned an empty prompt list');\r\n      }\r\n\r\n      logger.info(`[PromptGeneration] Generated ${prompts.length} prompts with ${attempt.id}`);\r\n      return {\r\n        prompts,\r\n        provider: attempt.id,\r\n        rawResponse: response.text\r\n      };\r\n    } catch (error) {\r\n      logger.error(`[PromptGeneration] Provider ${attempt.id} failed:`, error);\r\n      apiUsageTracker.updateCall(callId, {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      });\r\n    }\r\n  }\r\n\r\n  throw new Error('Failed to generate prompts - no AI provider succeeded');\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\lib\\provider-config.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1354,1357],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1354,1357],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":108,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3237,3240],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3237,3240],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'options' is defined but never used.","line":108,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":108,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":108,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3252,3255],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3252,3255],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":208,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":208,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6276,6279],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6276,6279],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":302,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":302,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9124,9127],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9124,9127],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Centralized AI Provider Configuration\r\n * This file serves as the single source of truth for all AI provider configurations\r\n * \r\n * To enable/disable providers:\r\n * 1. Update PROVIDER_ENABLED_CONFIG below\r\n * 2. Set to true to enable a provider, false to disable it\r\n * 3. Even if enabled, providers still require valid API keys to function\r\n * \r\n * Provider availability is determined by:\r\n * - enabled: true in PROVIDER_ENABLED_CONFIG\r\n * - Valid API key in environment variables\r\n */\r\n\r\nimport { openai } from '@ai-sdk/openai';\r\nimport { anthropic } from '@ai-sdk/anthropic';\r\nimport { google } from '@ai-sdk/google';\r\nimport { perplexity } from '@ai-sdk/perplexity';\r\nimport { LanguageModelV1 } from 'ai';\r\n\r\nexport interface ProviderModel {\r\n  id: string;\r\n  name: string;\r\n  maxTokens?: number;\r\n  supportsFunctionCalling?: boolean;\r\n  supportsStructuredOutput?: boolean;\r\n  supportsWebSearch?: boolean;\r\n}\r\n\r\nexport interface ProviderCapabilities {\r\n  webSearch: boolean;\r\n  functionCalling: boolean;\r\n  structuredOutput: boolean;\r\n  streamingResponse: boolean;\r\n  maxRequestsPerMinute?: number;\r\n}\r\n\r\nexport interface ProviderConfig {\r\n  id: string;\r\n  name: string;\r\n  icon: string;\r\n  envKey: string;\r\n  models: ProviderModel[];\r\n  defaultModel: string;\r\n  capabilities: ProviderCapabilities;\r\n  getModel: (modelId?: string, options?: any) => LanguageModelV1 | null;\r\n  isConfigured: () => boolean;\r\n  enabled: boolean; // New field to control provider availability\r\n}\r\n\r\n/**\r\n * Provider Enable/Disable Configuration\r\n * Set to true to enable a provider, false to disable it\r\n * Even if enabled, the provider must have a valid API key to be used\r\n */\r\nexport const PROVIDER_ENABLED_CONFIG: Record<string, boolean> = {\r\n  openai: true,      // OpenAI is enabled\r\n  anthropic: false,   // Anthropic is enabled\r\n  google: false,     // Google is disabled\r\n  perplexity: true,  // Perplexity is enabled\r\n};\r\n\r\n/**\r\n * Provider Configuration Registry\r\n * Add new providers here to make them available throughout the system\r\n */\r\nexport const PROVIDER_CONFIGS: Record<string, ProviderConfig> = {\r\n  openai: {\r\n    id: 'openai',\r\n    name: 'OpenAI',\r\n    icon: '🤖',\r\n    envKey: 'OPENAI_API_KEY',\r\n    enabled: PROVIDER_ENABLED_CONFIG.openai,\r\n    models: [\r\n      {\r\n        id: 'gpt-4o',\r\n        name: 'GPT-4 Optimized',\r\n        maxTokens: 128000,\r\n        supportsFunctionCalling: true,\r\n        supportsStructuredOutput: true,\r\n        supportsWebSearch: true,\r\n      },\r\n      {\r\n        id: 'gpt-4o-mini',\r\n        name: 'GPT-4 Mini',\r\n        maxTokens: 128000,\r\n        supportsFunctionCalling: true,\r\n        supportsStructuredOutput: true,\r\n        supportsWebSearch: true, // Via responses API\r\n      },\r\n      {\r\n        id: 'gpt-4-turbo',\r\n        name: 'GPT-4 Turbo',\r\n        maxTokens: 128000,\r\n        supportsFunctionCalling: true,\r\n        supportsStructuredOutput: true,\r\n        supportsWebSearch: false,\r\n      },\r\n    ],\r\n    defaultModel: 'gpt-4o',\r\n    capabilities: {\r\n      webSearch: true, // Via responses API with specific models\r\n      functionCalling: true,\r\n      structuredOutput: true,\r\n      streamingResponse: true,\r\n      maxRequestsPerMinute: 500,\r\n    },\r\n    getModel: (modelId?: any, options?: any) => {\r\n      if (!process.env.OPENAI_API_KEY) return null;\r\n      const model = typeof modelId === 'string'\r\n        ? modelId\r\n        : (modelId?.id || PROVIDER_CONFIGS.openai.defaultModel);\r\n      \r\n      // Note: Web search is now handled by the dedicated openai-web-search.ts module\r\n      // This function returns the standard AI SDK model for non-web-search use cases\r\n      return openai(model);\r\n    },\r\n    isConfigured: () => !!process.env.OPENAI_API_KEY,\r\n  },\r\n\r\n  anthropic: {\r\n    id: 'anthropic',\r\n    name: 'Anthropic',\r\n    icon: '🧠',\r\n    envKey: 'ANTHROPIC_API_KEY',\r\n    enabled: PROVIDER_ENABLED_CONFIG.anthropic,\r\n    models: [\r\n      {\r\n        id: 'claude-4-sonnet-20250514',\r\n        name: 'Claude 4 Sonnet',\r\n        maxTokens: 200000,\r\n        supportsFunctionCalling: true,\r\n        supportsStructuredOutput: true,\r\n        supportsWebSearch: false,\r\n      },\r\n      {\r\n        id: 'claude-3-5-sonnet-20241022',\r\n        name: 'Claude 3.5 Sonnet',\r\n        maxTokens: 200000,\r\n        supportsFunctionCalling: true,\r\n        supportsStructuredOutput: true,\r\n        supportsWebSearch: false,\r\n      },\r\n      {\r\n        id: 'claude-3-opus-20240229',\r\n        name: 'Claude 3 Opus',\r\n        maxTokens: 200000,\r\n        supportsFunctionCalling: true,\r\n        supportsStructuredOutput: true,\r\n        supportsWebSearch: false,\r\n      },\r\n    ],\r\n    defaultModel: 'claude-4-sonnet-20250514',\r\n    capabilities: {\r\n      webSearch: false,\r\n      functionCalling: true,\r\n      structuredOutput: true,\r\n      streamingResponse: true,\r\n      maxRequestsPerMinute: 50,\r\n    },\r\n    getModel: (modelId?: string) => {\r\n      if (!process.env.ANTHROPIC_API_KEY) return null;\r\n      return anthropic(modelId || PROVIDER_CONFIGS.anthropic.defaultModel);\r\n    },\r\n    isConfigured: () => !!process.env.ANTHROPIC_API_KEY,\r\n  },\r\n\r\n  google: {\r\n    id: 'google',\r\n    name: 'Google',\r\n    icon: '🌟',\r\n    envKey: 'GOOGLE_GENERATIVE_AI_API_KEY',\r\n    enabled: PROVIDER_ENABLED_CONFIG.google,\r\n    models: [\r\n      {\r\n        id: 'gemini-2.5-pro',\r\n        name: 'Gemini 2.5 Pro',\r\n        maxTokens: 1000000,\r\n        supportsFunctionCalling: true,\r\n        supportsStructuredOutput: true,\r\n        supportsWebSearch: true,\r\n      },\r\n      {\r\n        id: 'gemini-1.5-pro',\r\n        name: 'Gemini 1.5 Pro',\r\n        maxTokens: 1000000,\r\n        supportsFunctionCalling: true,\r\n        supportsStructuredOutput: true,\r\n        supportsWebSearch: true,\r\n      },\r\n      {\r\n        id: 'gemini-2.0-flash-exp',\r\n        name: 'Gemini 2.0 Flash Experimental',\r\n        maxTokens: 1000000,\r\n        supportsFunctionCalling: true,\r\n        supportsStructuredOutput: true,\r\n        supportsWebSearch: true,\r\n      },\r\n    ],\r\n    defaultModel: 'gemini-2.5-pro',\r\n    capabilities: {\r\n      webSearch: true, // Native search grounding\r\n      functionCalling: true,\r\n      structuredOutput: true,\r\n      streamingResponse: true,\r\n      maxRequestsPerMinute: 60,\r\n    },\r\n    getModel: (modelId?: string, options?: any) => {\r\n      if (!process.env.GOOGLE_GENERATIVE_AI_API_KEY) return null;\r\n      return google(modelId || PROVIDER_CONFIGS.google.defaultModel, {\r\n        useSearchGrounding: options?.useWebSearch || false,\r\n      });\r\n    },\r\n    isConfigured: () => !!process.env.GOOGLE_GENERATIVE_AI_API_KEY,\r\n  },\r\n\r\n  perplexity: {\r\n    id: 'perplexity',\r\n    name: 'Perplexity',\r\n    icon: '🔍',\r\n    envKey: 'PERPLEXITY_API_KEY',\r\n    enabled: PROVIDER_ENABLED_CONFIG.perplexity,\r\n    models: [\r\n      {\r\n        id: 'sonar-pro',\r\n        name: 'Sonar Pro',\r\n        maxTokens: 127000,\r\n        supportsFunctionCalling: false,\r\n        supportsStructuredOutput: false,\r\n        supportsWebSearch: true, // Built-in web search\r\n      },\r\n      {\r\n        id: 'sonar',\r\n        name: 'Sonar',\r\n        maxTokens: 127000,\r\n        supportsFunctionCalling: false,\r\n        supportsStructuredOutput: false,\r\n        supportsWebSearch: true,\r\n      },\r\n      {\r\n        id: 'sonar-reasoning',\r\n        name: 'Sonar Reasoning',\r\n        maxTokens: 127000,\r\n        supportsFunctionCalling: false,\r\n        supportsStructuredOutput: true,\r\n        supportsWebSearch: true,\r\n      },\r\n    ],\r\n    defaultModel: 'sonar-pro',\r\n    capabilities: {\r\n      webSearch: true, // All models have built-in web search\r\n      functionCalling: false,\r\n      structuredOutput: false,\r\n      streamingResponse: true,\r\n      maxRequestsPerMinute: 20,\r\n    },\r\n    getModel: (modelId?: string) => {\r\n      if (!process.env.PERPLEXITY_API_KEY) return null;\r\n      return perplexity(modelId || PROVIDER_CONFIGS.perplexity.defaultModel);\r\n    },\r\n    isConfigured: () => !!process.env.PERPLEXITY_API_KEY,\r\n  },\r\n};\r\n\r\n/**\r\n * Get all configured providers (must be both enabled and have API key)\r\n */\r\nexport function getConfiguredProviders(): ProviderConfig[] {\r\n  return Object.values(PROVIDER_CONFIGS).filter(provider => provider.enabled && provider.isConfigured());\r\n}\r\n\r\n/**\r\n * Get providers that support a specific capability\r\n */\r\nexport function getProvidersWithCapability(capability: keyof ProviderCapabilities): ProviderConfig[] {\r\n  return Object.values(PROVIDER_CONFIGS).filter(\r\n    provider => provider.enabled && provider.isConfigured() && provider.capabilities[capability]\r\n  );\r\n}\r\n\r\n/**\r\n * Get a specific provider configuration\r\n */\r\nexport function getProviderConfig(providerId: string): ProviderConfig | undefined {\r\n  return PROVIDER_CONFIGS[providerId.toLowerCase()];\r\n}\r\n\r\n/**\r\n * Check if a provider is configured and enabled\r\n */\r\nexport function isProviderConfigured(providerId: string): boolean {\r\n  const provider = getProviderConfig(providerId);\r\n  return (provider?.enabled && provider?.isConfigured()) || false;\r\n}\r\n\r\n/**\r\n * Get provider model instance\r\n */\r\nexport function getProviderModel(\r\n  providerId: string,\r\n  modelId?: string,\r\n  options?: any\r\n): LanguageModelV1 | null {\r\n  const provider = getProviderConfig(providerId);\r\n  if (!provider || !provider.enabled || !provider.isConfigured()) {\r\n    return null;\r\n  }\r\n  return provider.getModel(modelId, options);\r\n}\r\n\r\n/**\r\n * Get provider display info for UI\r\n */\r\nexport function getProviderDisplayInfo(providerId: string): { name: string; icon: string } | null {\r\n  const provider = getProviderConfig(providerId);\r\n  if (!provider) return null;\r\n  return {\r\n    name: provider.name,\r\n    icon: provider.icon,\r\n  };\r\n}\r\n\r\n/**\r\n * Provider name mapping for backward compatibility\r\n */\r\nexport const PROVIDER_NAME_MAP: Record<string, string> = {\r\n  'OpenAI': 'openai',\r\n  'Anthropic': 'anthropic',\r\n  'Google': 'google',\r\n  'Perplexity': 'perplexity',\r\n  // Add more mappings as needed\r\n};\r\n\r\n/**\r\n * Normalize provider name for consistency\r\n */\r\nexport function normalizeProviderName(name: string): string {\r\n  return PROVIDER_NAME_MAP[name] || name.toLowerCase();\r\n}\r\n\r\n/**\r\n * Check if a provider is enabled (regardless of API key configuration)\r\n */\r\nexport function isProviderEnabled(providerId: string): boolean {\r\n  const provider = getProviderConfig(providerId);\r\n  return provider?.enabled || false;\r\n}\r\n\r\n/**\r\n * Get all enabled providers (may or may not have API keys)\r\n */\r\nexport function getEnabledProviders(): ProviderConfig[] {\r\n  return Object.values(PROVIDER_CONFIGS).filter(provider => provider.enabled);\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\lib\\rate-limit.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'windowStart' is assigned a value but never used.","line":14,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":22}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest } from 'next/server';\r\nimport { RateLimitError } from './api-errors';\r\n\r\ninterface RateLimitConfig {\r\n  windowMs: number;\r\n  maxRequests: number;\r\n}\r\n\r\nconst rateLimitStore = new Map<string, { count: number; resetTime: number }>();\r\n\r\nexport function createRateLimit(config: RateLimitConfig) {\r\n  return async (request: NextRequest, identifier: string) => {\r\n    const now = Date.now();\r\n    const windowStart = now - config.windowMs;\r\n    \r\n    for (const [key, value] of rateLimitStore.entries()) {\r\n      if (value.resetTime < now) {\r\n        rateLimitStore.delete(key);\r\n      }\r\n    }\r\n    \r\n    const current = rateLimitStore.get(identifier);\r\n    \r\n    if (!current || current.resetTime < now) {\r\n      rateLimitStore.set(identifier, {\r\n        count: 1,\r\n        resetTime: now + config.windowMs,\r\n      });\r\n      return;\r\n    }\r\n    \r\n    if (current.count >= config.maxRequests) {\r\n      const retryAfter = Math.ceil((current.resetTime - now) / 1000);\r\n      throw new RateLimitError(\r\n        `Rate limit exceeded. Try again in ${retryAfter} seconds.`,\r\n        retryAfter\r\n      );\r\n    }\r\n    \r\n    current.count++;\r\n    rateLimitStore.set(identifier, current);\r\n  };\r\n}\r\n\r\nexport const apiRateLimit = createRateLimit({ windowMs: 60000, maxRequests: 100 });\r\nexport const authRateLimit = createRateLimit({ windowMs: 900000, maxRequests: 5 });\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\lib\\scrape-utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":79,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3887,3890],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3887,3890],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":80,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3929,3932],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3929,3932],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3990,3993],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3990,3993],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4014,4017],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4014,4017],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":82,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4080,4083],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4080,4083],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":82,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4102,4105],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4102,4105],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":82,"column":102,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":105,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4131,4134],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4131,4134],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":84,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4188,4191],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4188,4191],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":102,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4953,4956],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4953,4956],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":102,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4976,4979],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4976,4979],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":106,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5125,5128],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5125,5128],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":108,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5160,5163],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5160,5163],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":108,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5178,5181],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5178,5181],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'cacheAge' is assigned a value but never used.","line":126,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":126,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":133,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6182,6185],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6182,6185],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":141,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6456,6459],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6456,6459],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":141,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6482,6485],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6482,6485],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":147,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6688,6691],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6688,6691],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":148,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":148,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6739,6742],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6739,6742],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":148,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":148,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6777,6780],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6777,6780],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":150,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":150,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6847,6850],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6847,6850],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":150,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":150,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6860,6863],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6860,6863],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":151,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6925,6928],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6925,6928],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":152,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6967,6970],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6967,6970],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":152,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6981,6984],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6981,6984],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":154,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":154,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7051,7054],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7051,7054],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":154,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":154,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7076,7079],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7076,7079],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":154,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":154,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7098,7101],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7098,7101],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":164,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7514,7517],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7514,7517],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":167,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":167,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7642,7645],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7642,7645],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":167,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":167,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7681,7684],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7681,7684],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":175,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":175,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7960,7963],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7960,7963],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":233,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":233,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10331,10334],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10331,10334],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":233,"column":107,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":233,"endColumn":110,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10375,10378],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10375,10378],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":34,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { generateObject } from 'ai';\r\nimport { z } from 'zod';\r\nimport { Company } from './types';\r\nimport FirecrawlApp from '@mendable/firecrawl-js';\r\nimport { getConfiguredProviders, getProviderModel } from './provider-config';\r\nimport { getLanguageInstruction } from './locale-utils';\r\n\r\nconst firecrawl = new FirecrawlApp({\r\n  apiKey: process.env.FIRECRAWL_API_KEY,\r\n});\r\n\r\n// Enhanced unified schema combining CompanyInfoSchema + CompanyProfileSchema\r\nconst EnhancedCompanySchema = z.object({\r\n  // Core company info (original CompanyInfoSchema)\r\n  name: z.string()\r\n    .min(1, \"Company name cannot be empty\")\r\n    .refine(name => name.trim().length > 0, \"Company name cannot be just whitespace\")\r\n    .refine(name => name === name.trim(), \"Company name should not have leading/trailing whitespace\"),\r\n  description: z.string(),\r\n  keywords: z.array(z.string()),\r\n  industry: z.string(),\r\n  mainProducts: z.array(z.string()),\r\n  competitors: z.array(z.string()).optional(),\r\n  \r\n  // Enhanced business profile (from CompanyProfileSchema)\r\n  businessType: z.string().describe('Specific type of business (e.g., \"Premium electric bicycle manufacturer\")'),\r\n  marketSegment: z.string().describe('Market segment (premium, mid-tier, budget, enterprise, SMB, etc.)'),\r\n  targetCustomers: z.string().describe('Target customer profile/ICP'),\r\n  primaryMarkets: z.array(z.string()).describe('Main geographic markets/countries'),\r\n  technologies: z.array(z.string()).describe('Key technologies used or related to business'),\r\n  businessModel: z.string().describe('Business model (B2B, B2C, SaaS, marketplace, etc.)'),\r\n  \r\n  // Competitor search optimization\r\n  competitorSearchKeywords: z.array(z.string()).describe('Keywords for finding competitors (8-12 specific terms)'),\r\n  alternativeSearchTerms: z.array(z.string()).describe('Alternative terms users might search for'),\r\n  \r\n  // Analysis metadata\r\n  confidenceScore: z.number().min(0).max(1).describe('Confidence in analysis accuracy (0-1)'),\r\n  estimatedNAICE: z.string().optional().describe('Estimated NACE/NAICS industry code')\r\n});\r\n\r\nexport async function scrapeCompanyInfo(url: string, maxAge?: number, locale?: string): Promise<Company> {\r\n  try {\r\n    console.log(`🔍 [Scraper] Starting scrape for URL: ${url}`);\r\n    \r\n    // Ensure URL has protocol\r\n    let normalizedUrl = url.trim();\r\n    if (!normalizedUrl.startsWith('http://') && !normalizedUrl.startsWith('https://')) {\r\n      normalizedUrl = `https://${normalizedUrl}`;\r\n    }\r\n    \r\n    console.log(`🔍 [Scraper] Normalized URL: ${normalizedUrl}`);\r\n    \r\n    // Default to 1 week cache if not specified\r\n    const cacheAge = maxAge ? Math.floor(maxAge / 1000) : 604800; // 1 week in seconds\r\n    \r\n    // Check Firecrawl API key\r\n    if (!process.env.FIRECRAWL_API_KEY) {\r\n      console.error('❌ [Scraper] FIRECRAWL_API_KEY not configured');\r\n      throw new Error('FIRECRAWL_API_KEY not configured');\r\n    }\r\n    \r\n    console.log(`🔍 [Scraper] Using cache age: ${cacheAge} seconds`);\r\n    \r\n    // Optimized Firecrawl scraping with enhanced parameters\r\n    // Combines the best settings from both scrapeCompanyInfo and scrapeCompanyWithFirecrawl\r\n    console.log(`🔍 [Scraper] Calling Firecrawl API...`);\r\n    const response = await firecrawl.scrapeUrl(normalizedUrl, {\r\n      formats: ['markdown'],\r\n      maxAge: cacheAge,\r\n      onlyMainContent: true, // Focus on main content to reduce complexity\r\n      waitFor: 3000, // Wait 3 seconds for page load (robust setting)\r\n      timeout: 20000, // 20 seconds timeout (increased from default)\r\n      includeTags: ['title', 'meta', 'h1', 'h2', 'h3', 'p'], // Focused tags for better extraction\r\n      excludeTags: ['script', 'style', 'nav', 'footer', 'aside', 'iframe', 'video'] // Comprehensive exclusions\r\n    });\r\n    \r\n    console.log(`🔍 [Scraper] Firecrawl response received:`, {\r\n      success: (response as any)?.success,\r\n      error: (response as any)?.error,\r\n      hasMarkdown: ('markdown' in (response as any)) && !!(response as any).markdown,\r\n      markdownLength: ('markdown' in (response as any)) && (response as any).markdown ? (response as any).markdown.length : 0\r\n    });\r\n    if (!(response as any)?.success) {\r\n      // Handle specific timeout errors more gracefully\r\n      if (response.error && response.error.includes('timed out')) {\r\n        console.warn(`⚠️ [Scraper] Timeout scraping ${normalizedUrl}, retrying with basic mode...`);\r\n        \r\n        // Retry with minimal, fast settings (fallback mode)\r\n        const retryResponse = await firecrawl.scrapeUrl(normalizedUrl, {\r\n          formats: ['markdown'],\r\n          maxAge: cacheAge,\r\n          onlyMainContent: true,\r\n          waitFor: 1000, // Reduced wait time\r\n          timeout: 10000 // Reduced timeout\r\n        });\r\n        \r\n        if (!retryResponse.success) {\r\n          throw new Error(`Scraping failed after retry: ${retryResponse.error}`);\r\n        }\r\n        \r\n        const rr: any = retryResponse as any;\r\n        return processScrapedData(rr.markdown || '', rr.metadata, normalizedUrl, locale);\r\n      }\r\n      \r\n      throw new Error((response as any)?.error);\r\n    }\r\n    const r: any = response as any;\r\n    return processScrapedData(r.markdown || '', r.metadata, normalizedUrl, locale);\r\n  } catch (error) {\r\n    console.error('Error scraping company info:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Deep crawl using Firecrawl /crawl to gather multiple pages for better business understanding\r\n */\r\nexport async function crawlCompanyInfo(url: string, maxAge?: number, locale?: string): Promise<Company> {\r\n  try {\r\n    console.log(`🕷️ [Crawler] Starting crawl for URL: ${url}`);\r\n    let normalizedUrl = url.trim();\r\n    if (!normalizedUrl.startsWith('http://') && !normalizedUrl.startsWith('https://')) {\r\n      normalizedUrl = `https://${normalizedUrl}`;\r\n    }\r\n    const cacheAge = maxAge ? Math.floor(maxAge / 1000) : 604800;\r\n    if (!process.env.FIRECRAWL_API_KEY) {\r\n      console.error('❌ [Crawler] FIRECRAWL_API_KEY not configured');\r\n      throw new Error('FIRECRAWL_API_KEY not configured');\r\n    }\r\n\r\n    // Crawl parameters tuned for business comprehension\r\n    const crawlOptions: any = {\r\n      maxDepth: 2,\r\n      limit: 20,\r\n      allowExternalLinks: false,\r\n      // Keep options minimal to satisfy v1 API; advanced filters removed\r\n    };\r\n\r\n    console.log('🕷️ [Crawler] Calling Firecrawl crawlUrl with options:', crawlOptions);\r\n    const result: any = await (firecrawl as any).crawlUrl(normalizedUrl, crawlOptions);\r\n    if (!result) {\r\n      throw new Error('Crawl returned empty result');\r\n    }\r\n\r\n    // Some SDK versions return a job id and require polling\r\n    let pages: any[] = [];\r\n    if (result?.success && (result as any).data && Array.isArray((result as any).data)) {\r\n      // Direct pages array\r\n      pages = ((result as any).data as any[]).filter(Boolean);\r\n    } else if (Array.isArray((result as any).pages)) {\r\n      pages = ((result as any).pages as any[]).filter(Boolean);\r\n    } else {\r\n      const jobId = (result as any).jobId || (result as any).id || (result as any).data?.id;\r\n      if (!jobId && result?.error) {\r\n        throw new Error(result.error);\r\n      }\r\n      if (jobId) {\r\n        console.log(`🕷️ [Crawler] Received job id: ${jobId}. Polling status...`);\r\n        const startedAt = Date.now();\r\n        const timeoutMs = 45000;\r\n        while (Date.now() - startedAt < timeoutMs) {\r\n          await new Promise(r => setTimeout(r, 1000));\r\n          let statusResp: any = null;\r\n          try {\r\n            // Try both method names for compatibility\r\n            const checker = (firecrawl as any).checkCrawlStatus || (firecrawl as any).getCrawlStatus;\r\n            if (checker) {\r\n              statusResp = await checker.call(firecrawl, jobId);\r\n            }\r\n          } catch (e) {\r\n            console.warn('🕷️ [Crawler] Status polling error (non-fatal):', e);\r\n          }\r\n\r\n          const statusObj: any = statusResp || {};\r\n          const isCompleted = statusObj?.status?.toLowerCase?.() === 'completed' || statusObj?.completed === true;\r\n          const hasData = Array.isArray(statusObj?.data) || Array.isArray(statusObj?.pages);\r\n          if (isCompleted || hasData) {\r\n            pages = (statusObj?.pages || statusObj?.data || []).filter(Boolean);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log(`🕷️ [Crawler] Pages crawled: ${pages.length}`);\r\n    if (!pages || pages.length === 0) {\r\n      console.warn('🕷️ [Crawler] No pages returned from crawl. Falling back to single-page scrape.');\r\n      return scrapeCompanyInfo(url, maxAge, locale);\r\n    }\r\n\r\n    // Concatenate top pages content (prioritize about/products/services)\r\n    const prioritize = (path: string) => {\r\n      const p = path.toLowerCase();\r\n      if (p.includes('about') || p.includes('a-propos') || p.includes('company')) return 3;\r\n      if (p.includes('product') || p.includes('products') || p.includes('services') || p.includes('solutions')) return 3;\r\n      if (p.includes('technology') || p.includes('innovation')) return 2;\r\n      if (p.includes('blog') || p.includes('news')) return 1;\r\n      return 0;\r\n    };\r\n\r\n    const sorted = pages\r\n      .map(p => ({\r\n        path: p.path || p.url || '',\r\n        markdown: p.markdown || p.content || '',\r\n        metadata: p.metadata || {},\r\n        score: prioritize((p.path || p.url || ''))\r\n      }))\r\n      .sort((a, b) => b.score - a.score);\r\n\r\n    const combinedMarkdown = sorted\r\n      .slice(0, 20)\r\n      .map(p => `\\n\\n# Source: ${p.path}\\n\\n${p.markdown || ''}`)\r\n      .join('\\n');\r\n\r\n    // Merge some metadata (take homepage-like first if present)\r\n    const homepageMeta = sorted.find(p => {\r\n      const path = (p.path || '').toLowerCase();\r\n      return path === '/' || path.endsWith('.com') || path.endsWith('.fr') || path.includes('index');\r\n    })?.metadata || sorted[0]?.metadata || {};\r\n\r\n    return processScrapedData(combinedMarkdown, homepageMeta, normalizedUrl, locale);\r\n  } catch (error) {\r\n    console.error('Error crawling company info:', error);\r\n    // Fallback to single page scrape\r\n    return scrapeCompanyInfo(url, maxAge, locale);\r\n  }\r\n}\r\n\r\n/**\r\n * Process scraped data and extract structured information\r\n */\r\nasync function processScrapedData(markdown: string, metadata: any, url: string, locale?: string): Promise<any> {\r\n  try {\r\n    console.log(`🔍 [Processor] Processing scraped data for URL: ${url}`);\r\n    // Log le markdown complet pour inspection\r\n    console.log(`🔍 [Processor] Combined Markdown:\\n${markdown}`);\r\n    console.log(`🔍 [Processor] Metadata:`, metadata);\r\n    \r\n    const html = markdown;\r\n    \r\n    // Use AI to extract structured information - try providers in order of preference\r\n    const configuredProviders = getConfiguredProviders();\r\n    console.log(`🔍 [Processor] Available providers:`, configuredProviders.map(p => p.name));\r\n    \r\n    if (configuredProviders.length === 0) {\r\n      console.error('❌ [Processor] No AI providers configured and enabled for content extraction');\r\n      throw new Error('No AI providers configured and enabled for content extraction');\r\n    }\r\n    \r\n    // Try providers in order of preference (fastest first)\r\n    const providerOrder = ['openai', 'anthropic', 'google', 'perplexity'];\r\n    let selectedProvider = null;\r\n    let selectedModel = null;\r\n    \r\n    for (const providerId of providerOrder) {\r\n      const provider = configuredProviders.find(p => p.id === providerId);\r\n      if (provider) {\r\n        console.log(`🔍 [Processor] Trying provider: ${provider.name}`);\r\n        \r\n        // Try to find a fast model first, then fallback to default\r\n        const fastModel = provider.models.find(m => \r\n          m.name.toLowerCase().includes('mini') || \r\n          m.name.toLowerCase().includes('flash') ||\r\n          m.name.toLowerCase().includes('haiku')\r\n        );\r\n        \r\n        const modelId = fastModel?.id || provider.defaultModel;\r\n        const model = getProviderModel(provider.id, modelId);\r\n        \r\n        if (model) {\r\n          selectedProvider = provider;\r\n          selectedModel = model;\r\n          console.log(`✅ [Processor] Selected provider: ${provider.name} with model: ${model}`);\r\n          break;\r\n        } else {\r\n          console.warn(`⚠️ [Processor] Provider ${provider.name} available but no suitable model found`);\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (!selectedProvider || !selectedModel) {\r\n      console.error('❌ [Processor] No working provider/model combination found');\r\n      throw new Error('No working provider/model combination found');\r\n    }\r\n    \r\n    // Get language instruction for the prompt based on locale\r\n    const languageInstruction = getLanguageInstruction(locale || 'en');\r\n    \r\n    console.log('SELECTED MODEL (scrapeCompanyInfo.generateObject):', typeof selectedModel === 'string' ? selectedModel : selectedModel);\r\n    const { object } = await generateObject({\r\n      model: selectedModel,\r\n      schema: EnhancedCompanySchema,\r\n      prompt: `Analyze this company website and extract comprehensive business information for competitor research:\r\n\r\n      URL: ${url}\r\n      Content: ${html}\r\n      \r\n      IMPORTANT LANGUAGE INSTRUCTION: \r\n      🌐 ALL analysis results MUST be written in ${languageInstruction} (locale: ${locale || 'en'}).\r\n      🌐 This includes descriptions, keywords, business types, market segments, technologies, etc.\r\n      🌐 Only the company name should remain in its original form (exact extraction).\r\n      \r\n      CORE COMPANY INFORMATION:\r\n      1. Extract the COMPLETE and EXACT company name as it appears officially\r\n      2. Write a clear, concise description of what the company does\r\n      3. Identify relevant keywords for the business\r\n      4. Classify the PRIMARY industry category\r\n      5. List ACTUAL PRODUCTS/SERVICES (not categories)\r\n      6. Extract competitor names mentioned on the site\r\n      \r\n      ENHANCED BUSINESS PROFILE:\r\n      7. **Business Type**: Be very specific (e.g., \"Premium electric bicycle manufacturer\" not \"bike company\")\r\n      8. **Market Segment**: Determine positioning (premium/luxury, mid-tier, budget, enterprise, SMB, etc.)\r\n      9. **Target Customers**: Identify the ideal customer profile/demographic\r\n      10. **Geographic Markets**: List primary countries/regions of operation\r\n      11. **Technologies**: Extract relevant tech stack, methodologies, or industry technologies\r\n      12. **Business Model**: Identify the model (B2B, B2C, SaaS, marketplace, subscription, etc.)\r\n      \r\n      COMPETITOR SEARCH OPTIMIZATION:\r\n      13. **Competitor Search Keywords**: Generate 8-12 specific keywords for finding direct competitors\r\n      14. **Alternative Search Terms**: Include synonyms and related terms for broader discovery\r\n      \r\n      ANALYSIS QUALITY:\r\n      15. **Confidence Score**: Rate your confidence in the analysis (0.0-1.0)\r\n      16. **NAICS Code**: Estimate the most appropriate industry classification code if possible\r\n      \r\n      INDUSTRY EXAMPLES:\r\n      - Coolers/drinkware/outdoor equipment → \"outdoor gear\"\r\n      - Web scraping/crawling/data extraction → \"web scraping\"\r\n      - AI/ML models or services → \"AI\"\r\n      - Hosting/deployment/cloud → \"deployment\"\r\n      - E-commerce platform/store builder → \"e-commerce platform\"\r\n      - Direct consumer products (clothing, etc.) → \"direct-to-consumer brand\"\r\n      - Fashion/apparel/clothing → \"apparel & fashion\"\r\n      - Software tools/APIs → \"developer tools\"\r\n      - Marketplace/aggregator → \"marketplace\"\r\n      - B2B software → \"B2B SaaS\"\r\n      \r\n      CRITICAL REQUIREMENTS:\r\n      ✅ Company name must be EXACT (preserve ALL characters, numbers, punctuation)\r\n      ✅ Products should be specific items, not categories\r\n      ✅ Competitors should be full company names, not initials\r\n      ✅ Focus on what company MAKES/SELLS, not what goes in products\r\n      ✅ All content must be in ${languageInstruction} (locale: ${locale || 'en'})\r\n      ✅ High accuracy - base analysis on actual website content, not assumptions\r\n      \r\n      EXAMPLES of correct extraction:\r\n      - \"ABC123 Solutions\" → \"ABC123 Solutions\" (NOT \"ABC Solutions\")\r\n      - \"Smith & Associates LLC\" → \"Smith & Associates LLC\" (NOT \"Smith Associates\")\r\n      - \"Tech-Pro Industries\" → \"Tech-Pro Industries\" (NOT \"TechPro Industries\")`\r\n    });\r\n\r\n    // Extract favicon URL - try multiple sources\r\n    const urlObj = new URL(url);\r\n    const domain = urlObj.hostname.replace('www.', '');\r\n    \r\n    // Try to get a high-quality favicon from various sources\r\n    const faviconUrl = metadata?.favicon || \r\n                      `https://www.google.com/s2/favicons?domain=${domain}&sz=128` ||\r\n                      `${urlObj.origin}/favicon.ico`;\r\n    \r\n    return {\r\n      id: crypto.randomUUID(),\r\n      url: url,\r\n      name: object.name,\r\n      description: object.description,\r\n      industry: object.industry,\r\n      logo: metadata?.ogImage || undefined,\r\n      favicon: faviconUrl,\r\n      scraped: true,\r\n      scrapedData: {\r\n        title: object.name,\r\n        description: object.description,\r\n        keywords: object.keywords,\r\n        mainContent: html || '',\r\n        mainProducts: object.mainProducts,\r\n        competitors: object.competitors,\r\n        ogImage: metadata?.ogImage || undefined,\r\n        favicon: faviconUrl,\r\n        // Additional metadata from enhanced scraping\r\n        ogTitle: metadata?.ogTitle,\r\n        ogDescription: metadata?.ogDescription,\r\n        metaKeywords: metadata?.keywords,\r\n        rawMetadata: metadata\r\n      },\r\n      // Enhanced business profile data (eliminating need for company-profiler)\r\n      businessProfile: {\r\n        businessType: object.businessType,\r\n        marketSegment: object.marketSegment,\r\n        targetCustomers: object.targetCustomers,\r\n        primaryMarkets: object.primaryMarkets,\r\n        technologies: object.technologies,\r\n        businessModel: object.businessModel,\r\n        competitorSearchKeywords: object.competitorSearchKeywords,\r\n        alternativeSearchTerms: object.alternativeSearchTerms,\r\n        confidenceScore: object.confidenceScore,\r\n        estimatedNAICE: object.estimatedNAICE\r\n      },\r\n    };\r\n  } catch (error) {\r\n    console.error('Error processing scraped data:', error);\r\n    \r\n    // Fallback: extract company name from URL\r\n    const urlObj = new URL(url);\r\n    const domain = urlObj.hostname.replace('www.', '');\r\n    const companyName = domain.split('.')[0];\r\n    const formattedName = companyName.charAt(0).toUpperCase() + companyName.slice(1);\r\n\r\n    return {\r\n      id: crypto.randomUUID(),\r\n      url: url,\r\n      name: formattedName,\r\n      description: `Information about ${formattedName}`,\r\n      industry: 'technology',\r\n      scraped: false,\r\n    };\r\n  }\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\lib\\text-highlighting-utils.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BrandDetectionMatch' is defined but never used.","line":7,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":51}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Utilities for highlighting brand mentions in text\n * Now uses the centralized brand detection service\n */\n\nimport React from 'react';\nimport { BrandDetectionResult, BrandDetectionMatch } from './brand-detection-service';\n\nexport interface HighlightedSegment {\n  text: string;\n  highlighted: boolean;\n  brandName?: string;\n  variation?: string;\n  confidence?: number;\n}\n\n/**\n * Highlights brand mentions in text by breaking it into segments\n * @param text The text to highlight\n * @param detectionResults Map of brand names to detection results\n * @returns Array of text segments with highlight information\n */\nexport function highlightBrandMentions(\n  text: string,\n  detectionResults: Map<string, BrandDetectionResult>\n): HighlightedSegment[] {\n  // Collect all matches with their positions\n  const allMatches: Array<{\n    start: number;\n    end: number;\n    brandName: string;\n    matchText: string;\n    variation?: string;\n    confidence: number;\n  }> = [];\n  \n  detectionResults.forEach((result, brandName) => {\n    result.matches.forEach(match => {\n      // Only include matches that are actually in the current text\n      if (match.index >= 0 && match.index < text.length) {\n        allMatches.push({\n          start: match.index,\n          end: match.index + match.text.length,\n          brandName,\n          matchText: match.text,\n          variation: match.variation,\n          confidence: match.confidence\n        });\n      }\n    });\n  });\n  \n  // Sort matches by position\n  allMatches.sort((a, b) => a.start - b.start);\n  \n  // Remove overlapping matches (keep the one with higher confidence)\n  const nonOverlappingMatches = allMatches.reduce((acc, match) => {\n    const lastMatch = acc[acc.length - 1];\n    if (!lastMatch || match.start >= lastMatch.end) {\n      // No overlap\n      acc.push(match);\n    } else if (match.confidence > lastMatch.confidence) {\n      // Overlap but this match has higher confidence\n      acc[acc.length - 1] = match;\n    }\n    // Otherwise keep the existing match\n    return acc;\n  }, [] as typeof allMatches);\n  \n  // Build segments\n  const segments: HighlightedSegment[] = [];\n  let lastEnd = 0;\n  \n  nonOverlappingMatches.forEach(match => {\n    // Add non-highlighted segment before this match\n    if (match.start > lastEnd) {\n      segments.push({\n        text: text.substring(lastEnd, match.start),\n        highlighted: false\n      });\n    }\n    \n    // Add highlighted segment\n    segments.push({\n      text: match.matchText,\n      highlighted: true,\n      brandName: match.brandName,\n      variation: match.variation,\n      confidence: match.confidence\n    });\n    \n    lastEnd = match.end;\n  });\n  \n  // Add remaining text\n  if (lastEnd < text.length) {\n    segments.push({\n      text: text.substring(lastEnd),\n      highlighted: false\n    });\n  }\n  \n  return segments;\n}\n\n/**\n * Converts highlighted segments to HTML\n * @param segments Array of highlighted segments\n * @param highlightClass CSS class for highlighted text\n * @returns HTML string\n */\nexport function segmentsToHtml(\n  segments: HighlightedSegment[],\n  highlightClass: string = 'bg-yellow-200'\n): string {\n  return segments.map(segment => {\n    if (segment.highlighted) {\n      const tooltip = segment.brandName ? ` title=\"${segment.brandName} (confidence: ${Math.round((segment.confidence || 0) * 100)}%)\"` : '';\n      return `<span class=\"${highlightClass}\"${tooltip}>${escapeHtml(segment.text)}</span>`;\n    }\n    return escapeHtml(segment.text);\n  }).join('');\n}\n\n/**\n * Converts highlighted segments to React elements\n * @param segments Array of highlighted segments\n * @param highlightClassName CSS class for highlighted text\n * @returns Array of React elements\n */\nexport function segmentsToReactElements(\n  segments: HighlightedSegment[],\n  highlightClassName: string | ((segment: HighlightedSegment) => string | undefined) = 'bg-yellow-200 px-0.5 rounded'\n): React.ReactElement[] {\n  const fallbackClass = typeof highlightClassName === 'string'\n    ? highlightClassName\n    : 'bg-yellow-200 px-0.5 rounded';\n\n  const resolveClass = (segment: HighlightedSegment) => {\n    if (typeof highlightClassName === 'function') {\n      return highlightClassName(segment) || fallbackClass;\n    }\n    return highlightClassName;\n  };\n\n  return segments.map((segment, index) => {\n    if (segment.highlighted) {\n      return (\n        <span\n          key={index}\n          data-brand-highlight=\"true\"\n          data-brand-name={segment.brandName}\n          data-variation={segment.variation}\n          className={resolveClass(segment)}\n          title={`${segment.brandName}${segment.variation ? ` (${segment.variation})` : ''} (${Math.round((segment.confidence || 0) * 100)}% confidence)`}\n        >\n          {segment.text}\n        </span>\n      );\n    }\n    return (\n      <span key={index}>\n        {segment.text}\n      </span>\n    );\n  });\n}\n\n/**\n * Escapes HTML special characters\n * @param text The text to escape\n * @returns Escaped text\n */\nfunction escapeHtml(text: string): string {\n  const map: Record<string, string> = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n  };\n  return text.replace(/[&<>\"']/g, m => map[m]);\n}\n\n/**\n * Gets a summary of brand mentions in text\n * @param detectionResults Map of brand names to detection results\n * @returns Summary object\n */\nexport function getBrandMentionSummary(\n  detectionResults: Map<string, BrandDetectionResult>\n): {\n  totalMentions: number;\n  brandsMentioned: string[];\n  highConfidenceMentions: number;\n  averageConfidence: number;\n} {\n  let totalMentions = 0;\n  let totalConfidence = 0;\n  let highConfidenceMentions = 0;\n  const brandsMentioned: string[] = [];\n  \n  detectionResults.forEach((result, brandName) => {\n    if (result.mentioned) {\n      brandsMentioned.push(brandName);\n      totalMentions += result.matches.length;\n      \n      result.matches.forEach(match => {\n        totalConfidence += match.confidence;\n        if (match.confidence >= 0.8) {\n          highConfidenceMentions++;\n        }\n      });\n    }\n  });\n  \n  return {\n    totalMentions,\n    brandsMentioned,\n    highConfidenceMentions,\n    averageConfidence: totalMentions > 0 ? totalConfidence / totalMentions : 0\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\lib\\types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":74,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1559,1562],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1559,1562],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":111,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2350,2353],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2350,2353],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface CompanyAnalysis {\n  url: string;\n  companyName: string;\n  description: string;\n  mainTopics: string[];\n  generatedPrompts: string[];\n}\n\nexport interface LLMProvider {\n  id: string;\n  name: string;\n  model: string;\n  enabled: boolean;\n}\n\nexport interface PromptResult {\n  provider: string;\n  prompt: string;\n  response: string;\n  mentions: {\n    companyName: string;\n    mentioned: boolean;\n    context?: string;\n    position?: number;\n  }[];\n  timestamp: Date;\n}\n\nexport interface CompetitorAnalysis {\n  competitor: string;\n  visibilityScore: number;\n  mentionCount: number;\n  averagePosition: number;\n  sentiment: 'positive' | 'neutral' | 'negative';\n  sentimentScore: number;\n  shareOfVoice: number;\n  weeklyChange?: number;\n  rankChange?: number;\n}\n\nexport interface BrandVisibilityReport {\n  company: string;\n  url: string;\n  overallVisibilityScore: number;\n  promptsAnalyzed: number;\n  competitorComparison: CompetitorAnalysis[];\n  detailedResults: PromptResult[];\n  shareOfVoice: number;\n  analyzedAt: Date;\n}\n\nexport interface Company {\n  id: string;\n  name: string;\n  url: string;\n  description?: string;\n  industry?: string;\n  logo?: string;\n  favicon?: string;\n  scraped?: boolean;\n  scrapedData?: {\n    title: string;\n    description: string;\n    keywords: string[];\n    mainContent: string;\n    mainProducts?: string[];\n    competitors?: string[];\n    ogImage?: string;\n    favicon?: string;\n    // Additional metadata from scraping\n    ogTitle?: string;\n    ogDescription?: string;\n    metaKeywords?: string[];\n    rawMetadata?: any;\n  };\n  // Business profile\n  businessProfile?: {\n    businessType: string;\n    marketSegment: string;\n    targetCustomers: string;\n    primaryMarkets: string[];\n    technologies: string[];\n    businessModel: string;\n    confidenceScore: number;\n  };\n}\n\nexport interface AIProvider {\n  name: string;\n  model: string;\n  icon?: string;\n}\n\nexport interface BrandPrompt {\n  id: string;\n  prompt: string;\n  category: 'ranking' | 'comparison' | 'alternatives' | 'recommendations';\n}\n\nexport interface AIResponse {\n  provider: string;\n  prompt: string;\n  response: string;\n  rankings?: CompanyRanking[];\n  competitors: string[];\n  brandMentioned: boolean;\n  brandPosition?: number;\n  sentiment: 'positive' | 'neutral' | 'negative';\n  confidence: number;\n  timestamp: Date;\n  webSearchSources?: any[]; // Sources from web search\n  // Enhanced detection information\n  detectionDetails?: {\n    brandMatches?: {\n      text: string;\n      index: number;\n      confidence: number;\n    }[];\n    competitorMatches?: Map<string, {\n      text: string;\n      index: number;\n      confidence: number;\n    }[]> | Record<string, {\n      text: string;\n      index: number;\n      confidence: number;\n    }[]>;\n  };\n}\n\nexport interface AnalysisSource {\n  id?: string;\n  analysisId?: string;\n  provider?: string;\n  prompt?: string;\n  domain?: string;\n  url?: string;\n  sourceType?: string;\n  metadata?: Record<string, unknown> | null;\n  rank?: number;\n  createdAt?: string;\n}\n\n\nexport interface CompanyRanking {\n  position: number | null;\n  company: string;\n  reason?: string;\n  sentiment?: 'positive' | 'neutral' | 'negative';\n}\n\nexport interface BrandAnalysis {\n  company: Company;\n  prompts: BrandPrompt[];\n  responses: AIResponse[];\n  competitors: CompetitorRanking[];\n  providerRankings?: ProviderSpecificRanking[];\n  providerComparison?: ProviderComparisonData[];\n  overallScore: number;\n  visibilityScore: number;\n  sentimentScore: number;\n  shareOfVoice: number;\n  averagePosition?: number;\n  historicalData?: HistoricalDataPoint[];\n}\n\nexport interface HistoricalDataPoint {\n  date: Date;\n  visibilityScore: number;\n  position: number;\n}\n\n// SSE Event Types\nexport type SSEEventType = \n  | 'start'\n  | 'progress'\n  | 'stage'\n  | 'competitor-found' // Legacy event type, kept for backward compatibility\n  | 'prompt-generated'\n  | 'analysis-start'\n  | 'analysis-progress'\n  | 'analysis-complete'\n  | 'scoring-start'\n  | 'scoring-complete'\n  | 'brand-extraction-start'\n  | 'brand-extraction-progress'\n  | 'brand-extraction-complete'\n  | 'partial-result'\n  | 'complete'\n  | 'error';\n\nexport interface SSEEvent<T = unknown> {\n  type: SSEEventType;\n  stage: AnalysisStage;\n  data: T;\n  timestamp: Date;\n}\n\nexport type AnalysisStage = \n  | 'initializing'\n  | 'identifying-competitors' // Legacy stage, kept for backward compatibility\n  | 'generating-prompts'\n  | 'analyzing-prompts'\n  | 'extracting-brands'\n  | 'calculating-scores'\n  | 'finalizing';\n\nexport interface ProgressData {\n  stage: AnalysisStage;\n  progress: number; // 0-100\n  message: string;\n  details?: unknown;\n}\n\nexport interface CompetitorFoundData {\n  competitor: string;\n  index: number;\n  total: number;\n}\n\nexport interface PromptGeneratedData {\n  prompt: string;\n  category: string;\n  index: number;\n  total: number;\n}\n\nexport interface AnalysisProgressData {\n  provider: string;\n  prompt: string;\n  promptIndex: number;\n  totalPrompts: number;\n  providerIndex: number;\n  totalProviders: number;\n  status: 'started' | 'completed' | 'failed';\n}\n\nexport interface PartialResultData {\n  provider: string;\n  prompt: string;\n  response: Partial<AIResponse>;\n  competitorScores?: Partial<CompetitorRanking>[];\n}\n\nexport interface ScoringProgressData {\n  competitor: string;\n  score?: number;\n  index: number;\n  total: number;\n}\n\nexport interface ErrorData {\n  message: string;\n  code?: string;\n  stage: AnalysisStage;\n  retryable?: boolean;\n}\n\nexport interface BrandExtractionProgressData {\n  stage: 'extracting-brands';\n  provider: string;\n  responseIndex: number;\n  totalResponses: number;\n  progress: number;\n  message: string;\n}\n\n// Progress callback type for AI utils\nexport type ProgressCallback = (event: SSEEvent) => void;\n\nexport interface CompetitorRanking {\n  name: string;\n  logo?: string;\n  mentions: number;\n  averagePosition: number;\n  sentiment: 'positive' | 'neutral' | 'negative';\n  sentimentScore: number;\n  shareOfVoice: number;\n  visibilityScore: number;\n  weeklyChange?: number;\n  isOwn?: boolean;\n}\n\nexport interface ProviderSpecificRanking {\n  provider: string;\n  competitors: CompetitorRanking[];\n}\n\nexport interface ProviderComparisonData {\n  competitor: string;\n  providers: {\n    [provider: string]: {\n      visibilityScore: number;\n      position: number;\n      mentions: number;\n      sentiment: 'positive' | 'neutral' | 'negative';\n    };\n  };\n  isOwn?: boolean;\n}\n\n// AI_PROVIDERS moved to provider-config.ts for centralized management\n\nexport const PROMPT_TEMPLATES = {\n  ranking: [\n    \"What are the top 10 {industry} tools in 2024?\",\n    \"List the best {industry} platforms available today\",\n    \"What are the most popular {industry} solutions?\",\n    \"Rank the top {industry} services by features and capabilities\",\n    \"What are the leading {industry} companies?\",\n  ],\n  comparison: [\n    \"Compare the top 5 {industry} tools including {brand}\",\n    \"How do the major {industry} platforms compare?\",\n    \"What are the pros and cons of different {industry} solutions?\",\n  ],\n  alternatives: [\n    \"What are the best alternatives to {brand}?\",\n    \"List similar tools to {brand} for {industry}\",\n    \"What other {industry} options are available besides {brand}?\",\n  ],\n  recommendations: [\n    \"Which {industry} tool would you recommend for businesses?\",\n    \"What's the best {industry} solution for enterprise use?\",\n    \"Which {industry} platform offers the best value?\",\n  ],\n}; ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\paulm\\Documents\\GitHub\\firegeo\\lib\\web-search-utils.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'generateText' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'z' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getProviderModel' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isProviderConfigured' is defined but never used.","line":3,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'provider' is assigned a value but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":11}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { generateText } from 'ai';\r\nimport { z } from 'zod';\r\nimport { getProviderModel, isProviderConfigured } from './provider-config';\r\n\r\n// ============================================\r\n// Provider-Specific Search Configurations\r\n// ============================================\r\n// Note: Each provider should use their native search capabilities\r\n// - OpenAI: Uses responses API with web_search_preview tool\r\n// - Google: Uses search grounding with google_search_retrieval\r\n// - Perplexity: Has built-in web search\r\n// - Anthropic: No native web search (uses base knowledge only)\r\n\r\n// ============================================\r\n// Enhanced Brand Analysis with Web Search\r\n// ============================================\r\n// ============================================\r\n// Enhanced Brand Analysis with Provider-Native Search\r\n// ============================================\r\nexport async function analyzeBrandWithProviderSearch(\r\n  brandName: string,\r\n  competitors: string[],\r\n  prompt: string,\r\n  provider: 'openai' | 'anthropic' | 'google' | 'perplexity' = 'openai'\r\n) {\r\n  // This function is now handled by ai-utils-enhanced.ts\r\n  // which properly uses each provider's native search capabilities\r\n  throw new Error(\r\n    'This function has been deprecated. Use analyzePromptWithProviderEnhanced from ai-utils-enhanced.ts instead.'\r\n  );\r\n}\r\n\r\n// ============================================\r\n// Note on Provider-Native Search Capabilities\r\n// ============================================\r\n// Each provider should use their own search capabilities:\r\n// \r\n// OpenAI with Web Search:\r\n//   - Use openai.responses('gpt-4o-mini') with web_search_preview tool\r\n//   - Only gpt-4o-mini supports web search via responses API\r\n//\r\n// Google with Search Grounding:\r\n//   - Use { useSearchGrounding: true } option\r\n//   - Automatically includes web search results\r\n//\r\n// Perplexity:\r\n//   - All models have built-in web search\r\n//   - No additional configuration needed\r\n//\r\n// Anthropic:\r\n//   - No native web search capability\r\n//   - Uses base knowledge only\r\n\r\n// ============================================\r\n// Competitor Discovery (without web search)\r\n// ============================================\r\n// Note: Competitor discovery is now handled in ai-utils.ts\r\n// using the AI's knowledge base without external search.\r\n// Web scraping via Firecrawl is only used for the initial\r\n// company website analysis in scrape-utils.ts\r\n\r\n// ============================================\r\n// Migration Notice\r\n// ============================================\r\n// Web search functionality has been moved to provider-specific implementations:\r\n// - OpenAI: Uses responses API with web_search_preview (in ai-utils-enhanced.ts)\r\n// - Google: Uses search grounding (in provider-config.ts)\r\n// - Perplexity: Built-in web search (no special config needed)\r\n// - Anthropic: No web search (base knowledge only)\r\n//\r\n// Firecrawl should ONLY be used for initial website scraping in scrape-utils.ts","usedDeprecatedRules":[]}]