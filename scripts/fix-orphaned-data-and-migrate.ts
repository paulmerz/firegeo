#!/usr/bin/env tsx

/**
 * Script pour nettoyer les donn√©es orphelines et ex√©cuter la migration
 */

import { db } from '@/lib/db';
import { readFileSync } from 'fs';
import { join } from 'path';

async function fixAndMigrate() {
  console.log('üîß Nettoyage des donn√©es orphelines et migration...');
  
  try {
    // 1. V√©rifier l'√©tat actuel
    console.log('üìä √âtat actuel des donn√©es:');
    const currentStats = await db.execute(`
      SELECT 
        (SELECT COUNT(*) FROM brand_analysis) as brand_analysis_count,
        (SELECT COUNT(*) FROM brand_analysis_runs) as brand_analysis_runs_count,
        (SELECT COUNT(*) FROM brand_analysis_sources) as brand_analysis_sources_count
    `);
    console.log(currentStats.rows[0]);

    // 2. Nettoyer les donn√©es orphelines
    console.log('üßπ Nettoyage des donn√©es orphelines...');
    
    // Supprimer les sources li√©es √† des analyses inexistantes
    const orphanedSources = await db.execute(`
      DELETE FROM brand_analysis_sources 
      WHERE analysis_id NOT IN (
        SELECT id FROM brand_analysis
      )
    `);
    console.log(`‚úÖ Supprim√© ${orphanedSources.rowCount} brand_analysis_sources orphelins`);

    // Supprimer les runs li√©s √† des analyses inexistantes
    const orphanedRuns = await db.execute(`
      DELETE FROM brand_analysis_runs 
      WHERE brand_analysis_id NOT IN (
        SELECT id FROM brand_analysis
      )
    `);
    console.log(`‚úÖ Supprim√© ${orphanedRuns.rowCount} brand_analysis_runs orphelins`);

    // Supprimer les sources li√©es √† des runs inexistants
    const orphanedSourcesByRun = await db.execute(`
      DELETE FROM brand_analysis_sources 
      WHERE run_id NOT IN (
        SELECT id FROM brand_analysis_runs
      )
    `);
    console.log(`‚úÖ Supprim√© ${orphanedSourcesByRun.rowCount} brand_analysis_sources li√©s √† des runs orphelins`);

    // 3. V√©rifier l'√©tat apr√®s nettoyage
    console.log('üìä √âtat apr√®s nettoyage:');
    const cleanStats = await db.execute(`
      SELECT 
        (SELECT COUNT(*) FROM brand_analysis) as brand_analysis_count,
        (SELECT COUNT(*) FROM brand_analysis_runs) as brand_analysis_runs_count,
        (SELECT COUNT(*) FROM brand_analysis_sources) as brand_analysis_sources_count
    `);
    console.log(cleanStats.rows[0]);

    // 4. Ex√©cuter la migration
    console.log('üöÄ Ex√©cution de la migration 019...');
    const migrationPath = join(process.cwd(), 'migrations', '019_migrate_brand_analysis_to_company_id.sql');
    const migrationSQL = readFileSync(migrationPath, 'utf-8');
    
    await db.execute(migrationSQL);
    console.log('‚úÖ Migration 019 ex√©cut√©e avec succ√®s');

    // 5. V√©rifier les r√©sultats de la migration
    console.log('üìä R√©sultats de la migration:');
    const migrationResults = await db.execute(`
      SELECT 
        COUNT(*) as total_analyses,
        COUNT(company_id) as analyses_with_company_id,
        COUNT(*) - COUNT(company_id) as analyses_without_company_id
      FROM brand_analysis
    `);
    console.log(migrationResults.rows[0]);

    // 6. V√©rifier que la colonne company_id existe
    const columnCheck = await db.execute(`
      SELECT column_name, data_type, is_nullable
      FROM information_schema.columns 
      WHERE table_name = 'brand_analysis' 
      AND column_name IN ('company_id', 'url', 'company_name', 'industry')
      ORDER BY column_name
    `);
    console.log('üìã Colonnes de brand_analysis:');
    columnCheck.rows.forEach((row: any) => {
      console.log(`  - ${row.column_name}: ${row.data_type} (nullable: ${row.is_nullable})`);
    });

  } catch (error) {
    console.error('‚ùå Erreur:', error);
    process.exit(1);
  } finally {
    process.exit(0);
  }
}

fixAndMigrate();
