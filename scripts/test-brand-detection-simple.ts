#!/usr/bin/env tsx

/**
 * Test Simple pour Brand Detection
 * Version simplifi√©e pour tester rapidement des cas sp√©cifiques
 */

// Charger les variables d'environnement
import dotenv from 'dotenv';
import path from 'path';

// Charger .env.local
dotenv.config({ path: path.resolve(process.cwd(), '.env.local') });

import { detectBrandMentions } from '../lib/brand-detection-service';

// Cas de test sp√©cifiques pour les pi√®ges mentionn√©s
const testCases = [
  {
    name: "Radical - Marque vs Adjectif",
    text: "La marque Radical a encore de beaux jours devant elle, m√™me s'il s'agit d'un virage radical pour la marque",
    brand: "Radical",
    expected: 1
  },
  {
    name: "Louis Vuitton - Variations",
    text: "LVMH a publi√© ses r√©sultats et Louis Vuitton tire le wagon. LV a encore perform√© cette ann√©e et louis vuitton restera longtemps sur le podium",
    brand: "Louis Vuitton", 
    expected: 3
  },
  {
    name: "Orange - Casse",
    text: "Orange est une marque fran√ßaise, mais j'aime les oranges du march√©. Orange a encore de beaux jours devant elle.",
    brand: "Orange",
    expected: 2
  }
];

async function runQuickTest() {
  console.log('üöÄ Test Rapide de D√©tection de Marques\n');
  
  for (const testCase of testCases) {
    console.log(`\nüß™ ${testCase.name}`);
    console.log(`üìÑ Texte: "${testCase.text}"`);
    console.log(`üéØ Marque: "${testCase.brand}"`);
    console.log(`üìä Attendu: ${testCase.expected} d√©tection(s)`);
    
    try {
      const result = await detectBrandMentions(testCase.text, testCase.brand);
      const actual = result.matches.length;
      const passed = actual === testCase.expected;
      
      console.log(`‚úÖ R√©sultat: ${actual} d√©tection(s) trouv√©e(s)`);
      console.log(`üéØ Status: ${passed ? '‚úÖ PASSED' : '‚ùå FAILED'}`);
      
      if (result.matches.length > 0) {
        console.log(`üîç D√©tections:`);
        result.matches.forEach((match, i) => {
          console.log(`   ${i + 1}. "${match.text}" (${match.variation}, conf: ${match.confidence.toFixed(2)})`);
        });
      }
      
    } catch (error) {
      console.log(`‚ùå Erreur: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
    }
    
    console.log('-'.repeat(60));
  }
}

// Test d'une marque sp√©cifique
async function testSpecificBrand(brand: string, text: string) {
  console.log(`\nüîç Test sp√©cifique pour "${brand}"`);
  console.log(`üìÑ Texte: "${text}"`);
  
  try {
    const result = await detectBrandMentions(text, brand);
    console.log(`‚úÖ R√©sultat: ${result.matches.length} d√©tection(s)`);
    
    if (result.matches.length > 0) {
      console.log(`üîç D√©tections:`);
      result.matches.forEach((match, i) => {
        console.log(`   ${i + 1}. "${match.text}" (${match.variation}, conf: ${match.confidence.toFixed(2)})`);
      });
    } else {
      console.log(`‚ÑπÔ∏è  Aucune d√©tection trouv√©e`);
    }
    
  } catch (error) {
    console.log(`‚ùå Erreur: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
  }
}

// Ex√©cution
if (require.main === module) {
  const args = process.argv.slice(2);
  
  if (args.length === 2) {
    // Test d'une marque sp√©cifique
    testSpecificBrand(args[0], args[1]);
  } else {
    // Test rapide
    runQuickTest();
  }
}

export { runQuickTest, testSpecificBrand };
