#!/usr/bin/env tsx

/**
 * Script de test pour v√©rifier la gestion des erreurs de d√©tection de marque
 * Teste les diff√©rents sc√©narios d'erreur et le m√©canisme de fallback
 */

import { detectBrandMentions, detectMultipleBrands } from '../lib/brand-detection-service';

async function testErrorHandling() {
  console.log('üß™ Test de la gestion des erreurs de d√©tection de marque\n');

  // Test 1: Texte vide
  console.log('Test 1: Texte vide');
  try {
    await detectBrandMentions('', 'Nike');
    console.log('‚ùå Aucune erreur captur√©e pour texte vide');
  } catch (error) {
    console.log('‚úÖ Erreur captur√©e:', error instanceof Error ? error.message : 'Unknown error');
  }

  // Test 2: Nom de marque vide
  console.log('\nTest 2: Nom de marque vide');
  try {
    await detectBrandMentions('Nike est une marque de sport', '');
    console.log('‚ùå Aucune erreur captur√©e pour nom de marque vide');
  } catch (error) {
    console.log('‚úÖ Erreur captur√©e:', error instanceof Error ? error.message : 'Unknown error');
  }

  // Test 3: D√©tection multiple avec marques invalides
  console.log('\nTest 3: D√©tection multiple avec marques invalides');
  try {
    await detectMultipleBrands('Nike et Adidas sont des marques', ['Nike', '', 'Adidas']);
    console.log('‚ùå Aucune erreur captur√©e pour marques invalides');
  } catch (error) {
    console.log('‚úÖ Erreur captur√©e:', error instanceof Error ? error.message : 'Unknown error');
  }

  console.log('\nüéâ Tests de gestion des erreurs termin√©s');
  console.log('Note: Les tests de d√©tection normale n√©cessitent une cl√© API OpenAI configur√©e');
}

// Ex√©cuter les tests si le script est appel√© directement
if (require.main === module) {
  testErrorHandling().catch(console.error);
}

export { testErrorHandling };
